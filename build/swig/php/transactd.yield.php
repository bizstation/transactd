<?php
/* =================================================================
 Copyright (C) 2014 BizStation Corp All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 02111-1307, USA.
 ================================================================= */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 * ----------------------------------------------------------------------------- */

//
//  Transactd Client for PHP
//      ( YIELD-VERSION : for PHP 5.5.x or later )
//
namespace BizStation\Transactd;

// Try to load our extension if it's not already loaded.
if (!extension_loaded('transactd')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_transactd.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('transactd.so')) return;
    } else {
      if (!dl('transactd.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class transactd {
	const CP_ACP = CP_ACP;

	const CP_UTF8 = CP_UTF8;

	const ft_string = ft_string;

	const ft_integer = ft_integer;

	const ft_float = ft_float;

	const ft_date = ft_date;

	const ft_time = ft_time;

	const ft_decimal = ft_decimal;

	const ft_money = ft_money;

	const ft_logical = ft_logical;

	const ft_numeric = ft_numeric;

	const ft_bfloat = ft_bfloat;

	const ft_lstring = ft_lstring;

	const ft_zstring = ft_zstring;

	const ft_note = ft_note;

	const ft_lvar = ft_lvar;

	const ft_uinteger = ft_uinteger;

	const ft_autoinc = ft_autoinc;

	const ft_bit = ft_bit;

	const ft_numericsts = ft_numericsts;

	const ft_numericsa = ft_numericsa;

	const ft_currency = ft_currency;

	const ft_timestamp = ft_timestamp;

	const ft_blob = ft_blob;

	const ft_reserve22 = ft_reserve22;

	const ft_reserve23 = ft_reserve23;

	const ft_reserve24 = ft_reserve24;

	const ft_wstring = ft_wstring;

	const ft_wzstring = ft_wzstring;

	const ft_guid = ft_guid;

	const ft_datetime = ft_datetime;

	const ft_myvarchar = ft_myvarchar;

	const ft_myvarbinary = ft_myvarbinary;

	const ft_mywvarchar = ft_mywvarchar;

	const ft_mywvarbinary = ft_mywvarbinary;

	const ft_mychar = ft_mychar;

	const ft_mywchar = ft_mywchar;

	const ft_mydate = ft_mydate;

	const ft_mytime = ft_mytime;

	const ft_mydatetime = ft_mydatetime;

	const ft_mytimestamp = ft_mytimestamp;

	const ft_mytext = ft_mytext;

	const ft_myblob = ft_myblob;

	const ft_autoIncUnsigned = ft_autoIncUnsigned;

	const ft_myfixedbinary = ft_myfixedbinary;

	const ft_nullindicator = ft_nullindicator;

	const CMPLOGICAL_VAR_COMP_ALL = CMPLOGICAL_VAR_COMP_ALL;

	const CMPLOGICAL_CMPACS = CMPLOGICAL_CMPACS;

	const CMPLOGICAL_FIELD = CMPLOGICAL_FIELD;

	const CMPLOGICAL_CASEINSENSITIVE = CMPLOGICAL_CASEINSENSITIVE;

	const LOCK_BIAS_DEFAULT = LOCK_BIAS_DEFAULT;

	const LOCK_SINGLE_WAIT = LOCK_SINGLE_WAIT;

	const LOCK_SINGLE_NOWAIT = LOCK_SINGLE_NOWAIT;

	const LOCK_MULTI_WAIT = LOCK_MULTI_WAIT;

	const LOCK_MULTI_NOWAIT = LOCK_MULTI_NOWAIT;

	const NOWAIT_WRITE = NOWAIT_WRITE;

	const PARALLEL_TRN = PARALLEL_TRN;

	const TRN_ISO_READ_COMMITED = TRN_ISO_READ_COMMITED;

	const TRN_ISO_REPEATABLE_READ = TRN_ISO_REPEATABLE_READ;

	const TRN_ISO_SERIALIZABLE = TRN_ISO_SERIALIZABLE;

	const SINGLELOCK_READ_COMMITED = SINGLELOCK_READ_COMMITED;

	const MULTILOCK_READ_COMMITED = MULTILOCK_READ_COMMITED;

	const MULTILOCK_REPEATABLE_READ = MULTILOCK_REPEATABLE_READ;

	const MULTILOCK_ISO_SERIALIZABLE = MULTILOCK_ISO_SERIALIZABLE;

	const SINGLELOCK_NOGAP = SINGLELOCK_NOGAP;

	const MULTILOCK_NOGAP = MULTILOCK_NOGAP;

	const MULTILOCK_GAP = MULTILOCK_GAP;

	const CONSISTENT_READ = CONSISTENT_READ;

	const MULTILOCK_GAP_SHARE = MULTILOCK_GAP_SHARE;

	const MULTILOCK_NOGAP_SHARE = MULTILOCK_NOGAP_SHARE;

	const ROW_LOCK_X = ROW_LOCK_X;

	const ROW_LOCK_S = ROW_LOCK_S;

	const SRV_ISO_READ_UNCOMMITED = SRV_ISO_READ_UNCOMMITED;

	const SRV_ISO_READ_COMMITED = SRV_ISO_READ_COMMITED;

	const SRV_ISO_REPEATABLE_READ = SRV_ISO_REPEATABLE_READ;

	const SRV_ISO_SERIALIZABLE = SRV_ISO_SERIALIZABLE;

	const TD_OPEN_NORMAL = TD_OPEN_NORMAL;

	const TD_OPEN_READONLY = TD_OPEN_READONLY;

	const TD_OPEN_EXCLUSIVE = TD_OPEN_EXCLUSIVE;
	
	const TD_OPEN_READONLY_EXCLUSIVE = TD_OPEN_READONLY_EXCLUSIVE;

	const BT_AL_LEFT = BT_AL_LEFT;

	const BT_AL_CENTER = BT_AL_CENTER;

	const BT_AL_RIGHT = BT_AL_RIGHT;

	const STATUS_TABLE_YET_OPEN = STATUS_TABLE_YET_OPEN;

	const STATUS_DURING_TRANSACTION = STATUS_DURING_TRANSACTION;

	const STATUS_NO_ACR_UPDATE_DELETE = STATUS_NO_ACR_UPDATE_DELETE;

	const STATUS_NO_ACR_INSERT = STATUS_NO_ACR_INSERT;

	const STATUS_NO_ACR_READ = STATUS_NO_ACR_READ;

	const STATUS_CANT_ALLOC_MEMORY = STATUS_CANT_ALLOC_MEMORY;

	const STATUS_USE_KEYFIELD = STATUS_USE_KEYFIELD;

	const STATUS_TOO_MANY_TABLES = STATUS_TOO_MANY_TABLES;

	const STATUS_INVARID_PRM_KEY_NUM = STATUS_INVARID_PRM_KEY_NUM;

	const STATUS_INVARID_PNT_KEY_NUM = STATUS_INVARID_PNT_KEY_NUM;

	const STATUS_INVARID_REP_KEY_NUM = STATUS_INVARID_REP_KEY_NUM;

	const STATUS_INVARID_FIELD_IDX = STATUS_INVARID_FIELD_IDX;

	const STATUS_ALREADY_DELETED = STATUS_ALREADY_DELETED;

	const STATUS_LMITS_MAX_TABLES = STATUS_LMITS_MAX_TABLES;

	const STATUS_DB_YET_OPEN = STATUS_DB_YET_OPEN;

	const STATUS_TABLENAME_NOTFOUND = STATUS_TABLENAME_NOTFOUND;

	const STATUS_DIFFERENT_DBVERSION = STATUS_DIFFERENT_DBVERSION;

	const STATUS_DUPLICATE_FIELDNAME = STATUS_DUPLICATE_FIELDNAME;

	const STATUS_INVALID_TABLE_IDX = STATUS_INVALID_TABLE_IDX;

	const STATUS_AUTH_DENIED = STATUS_AUTH_DENIED;

	const STATUS_TOO_MANY_FIELDS = STATUS_TOO_MANY_FIELDS;

	const STATUS_FILTERSTRING_ERROR = STATUS_FILTERSTRING_ERROR;

	const STATUS_INVALID_FIELDLENGTH = STATUS_INVALID_FIELDLENGTH;

	const STATUS_INVALID_KEYTYPE = STATUS_INVALID_KEYTYPE;

	const STATUS_LVAR_NOTE_NOT_LAST = STATUS_LVAR_NOTE_NOT_LAST;

	const STATUS_NODEF_FOR_CONVERT = STATUS_NODEF_FOR_CONVERT;

	const STATUS_TRD_NEED_VARLENGTH = STATUS_TRD_NEED_VARLENGTH;

	const STATUS_INVALID_VARIABLETABLE = STATUS_INVALID_VARIABLETABLE;

	const STATUS_AUTOINC_SPACE_ERROR = STATUS_AUTOINC_SPACE_ERROR;

	const STATUS_TOO_LONG_OWNERNAME = STATUS_TOO_LONG_OWNERNAME;

	const STATUS_CANT_DEL_FOR_REL = STATUS_CANT_DEL_FOR_REL;

	const STATUS_NO_AUTOINC_SPACE = STATUS_NO_AUTOINC_SPACE;

	const STATUS_INVALID_RECLEN = STATUS_INVALID_RECLEN;

	const STATUS_INVALID_FIELDVALUE = STATUS_INVALID_FIELDVALUE;

	const STATUS_INVALID_VALLEN = STATUS_INVALID_VALLEN;

	const STATUS_FIELDTYPE_NOTSUPPORT = STATUS_FIELDTYPE_NOTSUPPORT;
	
	const STATUS_INVALID_NULLMODE = STATUS_INVALID_NULLMODE;

	const STATUS_SUCCESS = STATUS_SUCCESS;

	const STATUS_PROGRAM_ERROR = STATUS_PROGRAM_ERROR;

	const STATUS_IO_ERROR = STATUS_IO_ERROR;

	const STATUS_FILE_NOT_OPENED = STATUS_FILE_NOT_OPENED;

	const STATUS_NOT_FOUND_TI = STATUS_NOT_FOUND_TI;

	const STATUS_DUPPLICATE_KEYVALUE = STATUS_DUPPLICATE_KEYVALUE;

	const STATUS_INVALID_KEYNUM = STATUS_INVALID_KEYNUM;

	const STATUS_NO_CURRENT = STATUS_NO_CURRENT;

	const STATUS_EOF = STATUS_EOF;

	const STATUS_TABLE_NOTOPEN = STATUS_TABLE_NOTOPEN;

	const STATUS_REQUESTER_DEACTIVE = STATUS_REQUESTER_DEACTIVE;

	const STATUS_KEYBUFFERTOOSMALL = STATUS_KEYBUFFERTOOSMALL;

	const STATUS_BUFFERTOOSMALL = STATUS_BUFFERTOOSMALL;

	const STATUS_CANT_CREATE = STATUS_CANT_CREATE;

	const STATUS_NOSUPPORT_OP = STATUS_NOSUPPORT_OP;

	const STATUS_INVALID_BOOKMARK = STATUS_INVALID_BOOKMARK;

	const STATUS_ACCESS_DENIED = STATUS_ACCESS_DENIED;

	const STATUS_INVALID_OWNERNAME = STATUS_INVALID_OWNERNAME;

	const STATUS_TABLE_EXISTS_ERROR = STATUS_TABLE_EXISTS_ERROR;

	const STATUS_LIMMIT_OF_REJECT = STATUS_LIMMIT_OF_REJECT;

	const STATUS_WARKSPACE_TOO_SMALL = STATUS_WARKSPACE_TOO_SMALL;

	const STATUS_REACHED_FILTER_COND = STATUS_REACHED_FILTER_COND;

	const STATUS_INVALID_FIELD_OFFSET = STATUS_INVALID_FIELD_OFFSET;

	const STATUS_CHANGE_CONFLICT = STATUS_CHANGE_CONFLICT;

	const STATUS_INVALID_LOCKTYPE = STATUS_INVALID_LOCKTYPE;

	const STATUS_LOCK_ERROR = STATUS_LOCK_ERROR;

	const STATUS_FILE_LOCKED = STATUS_FILE_LOCKED;

	const STATUS_CANNOT_LOCK_TABLE = STATUS_CANNOT_LOCK_TABLE;

	const STATUS_INVALID_KEYNAME = STATUS_INVALID_KEYNAME;

	const STATUS_INVALID_DATASIZE = STATUS_INVALID_DATASIZE;

	const STATUS_INVALID_FIELDNAME = STATUS_INVALID_FIELDNAME;

	const ERROR_TD_INVALID_CLINETHOST = ERROR_TD_INVALID_CLINETHOST;

	const ERROR_NO_DATABASE = ERROR_NO_DATABASE;

	const ERROR_NOSPECIFY_TABLE = ERROR_NOSPECIFY_TABLE;

	const ERROR_LOAD_CLIBRARY = ERROR_LOAD_CLIBRARY;

	const ERROR_INDEX_RND_INIT = ERROR_INDEX_RND_INIT;

	const STATUS_ALREADY_INSNAPSHOT = STATUS_ALREADY_INSNAPSHOT;

	const STATUS_ALREADY_INTRANSACTION = STATUS_ALREADY_INTRANSACTION;

	const SERVER_CLIENT_NOT_COMPATIBLE = SERVER_CLIENT_NOT_COMPATIBLE;

	const NET_BAD_SRB_FORMAT = NET_BAD_SRB_FORMAT;

	const ERROR_TD_HOSTNAME_NOT_FOUND = ERROR_TD_HOSTNAME_NOT_FOUND;

	const ERROR_TD_CONNECTION_FAILURE = ERROR_TD_CONNECTION_FAILURE;

	const ERROR_TD_NOT_CONNECTED = ERROR_TD_NOT_CONNECTED;

	const ERROR_TD_NET_TIMEOUT = ERROR_TD_NET_TIMEOUT;

	const ERROR_TD_NET_REMOTE_DISCONNECT = ERROR_TD_NET_REMOTE_DISCONNECT;

	const ERROR_TD_NET_TOO_BIGDATA = ERROR_TD_NET_TOO_BIGDATA;

	const ERROR_TD_NET_OTHER = ERROR_TD_NET_OTHER;

	const ERROR_TD_C_CLIENT_UNKNOWN = ERROR_TD_C_CLIENT_UNKNOWN;

	const ERROR_TD_RECONNECTED = ERROR_TD_RECONNECTED;

	const TRANSACTD_SCHEMANAME = TRANSACTD_SCHEMANAME;

	const TYPE_SCHEMA_BDF = TYPE_SCHEMA_BDF;

	const TYPE_SCHEMA_DDF = TYPE_SCHEMA_DDF;

	const FILTER_CURRENT_TYPE_NOTINC = FILTER_CURRENT_TYPE_NOTINC;

	const FILTER_CURRENT_TYPE_INC = FILTER_CURRENT_TYPE_INC;

	const FILTER_CURRENT_TYPE_NOBOOKMARK = FILTER_CURRENT_TYPE_NOBOOKMARK;

	const NIS_FILED_NAME = NIS_FILED_NAME;

	const OWNERNAME_SIZE = OWNERNAME_SIZE;

	const TD_BACKUP_START = TD_BACKUP_START;

	const TD_BACKUP_END = TD_BACKUP_END;

	const TD_BACKUP_MODE_OK = TD_BACKUP_MODE_OK;

	const TD_BACKUP_MODE_NOT_SUPPORT = TD_BACKUP_MODE_NOT_SUPPORT;

	const TD_BACKUP_MODE_BUSY = TD_BACKUP_MODE_BUSY;

	const TD_BACKUP_MODE_NOT_PERMIT = TD_BACKUP_MODE_NOT_PERMIT;

	const TD_BACKUP_MODE_SERVER_ERROR = TD_BACKUP_MODE_SERVER_ERROR;

	const DFV_TIMESTAMP_DEFAULT = DFV_TIMESTAMP_DEFAULT;

	const CPP_INTERFACE_VER_MAJOR = CPP_INTERFACE_VER_MAJOR;

	const CPP_INTERFACE_VER_MINOR = CPP_INTERFACE_VER_MINOR;

	const CPP_INTERFACE_VER_RELEASE = CPP_INTERFACE_VER_RELEASE;

	const TRANSACTD_VER_MAJOR = TRANSACTD_VER_MAJOR;

	const TRANSACTD_VER_MINOR = TRANSACTD_VER_MINOR;

	const TRANSACTD_VER_RELEASE = TRANSACTD_VER_RELEASE;

	const MAX_KEY_SEGMENT = MAX_KEY_SEGMENT;

	static function getTypeName($type) {
		return getTypeName($type);
	}

	static function getTypeAlign($type) {
		return getTypeAlign($type);
	}

	static function lenByCharnum($type,$charsetIndex,$charnum) {
		return lenByCharnum($type,$charsetIndex,$charnum);
	}

	static function isStringType($type) {
		return isStringType($type);
	}

	const eCend = 0;

	const eCand = eCand;

	const eCor = eCor;

	const eEqual = 1;

	const eGreater = 2;

	const eLess = 3;

	const eNotEq = 4;

	const eGreaterEq = 5;

	const eLessEq = 6;

	const eBitAnd = 8;

	const eNotBitAnd = 9;

	const eIsNull = 10;

	const eIsNotNull = 11;



	static function getFilterLogicTypeCode($cmpstr) {
		return getFilterLogicTypeCode($cmpstr);
	}

	const TABLE_NUM_TMP = TABLE_NUM_TMP;

	const eMinlen = 0;

	const eMaxlen = eMaxlen;

	const eDefaultlen = eDefaultlen;

	const eDecimals = eDecimals;

	const null_str = null_str;

	const KEYVALUE_PTR = KEYVALUE_PTR;

	const KEYVALUE_STR = KEYVALUE_STR;

	const KEYVALUE_NEED_COPY = KEYVALUE_NEED_COPY;

	const KEYVALUE_STR_NEED_COPY = KEYVALUE_STR_NEED_COPY;

	const MAX_CHAR_INFO = MAX_CHAR_INFO;

	const CHARSET_LATIN1 = CHARSET_LATIN1;

	const CHARSET_CP850 = CHARSET_CP850;

	const CHARSET_ASCII = CHARSET_ASCII;

	const CHARSET_SJIS = CHARSET_SJIS;

	const CHARSET_UTF8 = CHARSET_UTF8;

	const CHARSET_USC2 = CHARSET_USC2;

	const CHARSET_UTF8B4 = CHARSET_UTF8B4;

	const CHARSET_UTF16LE = CHARSET_UTF16LE;

	const CHARSET_CP932 = CHARSET_CP932;

	const CHARSET_EUCJ = CHARSET_EUCJ;

	static function charsize($index) {
		return charsize($index);
	}

	static function charsetName($index) {
		return charsetName($index);
	}

	static function charsetIndex($name_or_codePage) {
		return charsetIndex($name_or_codePage);
	}

	static function codePage($charsetIndex) {
		return codePage($charsetIndex);
	}

	static function atobtrd($date) {
		$r=atobtrd($date);
		if (is_resource($r)) {
			return new btrDate($r);
		}
		return $r;
	}

	static function atobtrt($p) {
		$r=atobtrt($p);
		if (is_resource($r)) {
			return new btrTime($r);
		}
		return $r;
	}

	static function btrdtoa($d_or_date,$type_vb=false) {
		$r=btrdtoa($d_or_date,$type_vb);
		return $r;
	}

	static function btrttoa($t_or_time,$type_vb=false) {
		$r=btrttoa($t_or_time,$type_vb);
		return $r;
	}

	static function btrstoa($d,$type_vb=false) {
		return btrstoa($d,$type_vb);
	}

	static function atobtrs($p) {
		$r=atobtrs($p);
		if (is_resource($r)) {
			return new btrDateTime($r);
		}
		return $r;
	}

	static function getNowDate() {
		return getNowDate();
	}

	static function getNowTime() {
		return getNowTime();
	}

	const ROW_MEM_BLOCK_RESERVE = ROW_MEM_BLOCK_RESERVE;

	static function new_fieldsBase_p_p() {
		return new_fieldsBase_p_p();
	}

	static function copy_fieldsBase_p_p($value) {
		return copy_fieldsBase_p_p($value);
	}

	static function delete_fieldsBase_p_p($obj) {
		delete_fieldsBase_p_p($obj);
	}

	static function fieldsBase_p_p_assign($obj,$value) {
		fieldsBase_p_p_assign($obj,$value);
	}

	static function fieldsBase_p_p_value($obj) {
		$r=fieldsBase_p_p_value($obj);
		$this->_cPtr = $r;
		return $this;
	}
	
	const FIELDVALUEMODE_RETURNNULL = 0;
	
	const FIELDVALUEMODE_NORETURNNULL = 1;
	
	const RECORD_KEYVALUE_FIELDVALUE = 0;
	
	const RECORD_KEYVALUE_FIELDOBJECT = 1;
	
	static $fieldValueMode = self::FIELDVALUEMODE_NORETURNNULL;
	
	static $recordValueMode = self::RECORD_KEYVALUE_FIELDVALUE;
	
	static function setFieldValueMode($mode) {
		self::$fieldValueMode = $mode;
	}

	static function fieldValueMode() {
		return  self::$fieldValueMode;
	}
	
	static function setRecordValueMode($mode) {
		self::$recordValueMode = $mode;
	}

	static function recordValueMode() {
		return  self::$recordValueMode;
	}

}

/* PHP Proxy Classes */
class BOOKMARK {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('BOOKMARK_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_BOOKMARK') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_BOOKMARK();
	}

	function isEmpty() {
		return BOOKMARK_isEmpty($this->_cPtr);
	}
}

// TODO Is this class true ? Not used $this->_cPtr.
class FLAGS {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'FLAGS_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'FLAGS_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('FLAGS_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__FLAGS') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FLAGS();
	}
}

class keySegment {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'fieldNum') return keySegment_fieldNum_set($this->_cPtr,$value);
		if ($var === 'flags') return keySegment_flags_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'flags') return new FLAGS(keySegment_flags_get($this->_cPtr));
		if ($var === 'fieldNum') return keySegment_fieldNum_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('keySegment_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__keySegment') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_keySegment();
	}
}

class keydef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'keydef_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'segments') return new keySegment(keydef_segments_get($this->_cPtr));
		if ($var === 'keyNumber') return keydef_keyNumber_get($this->_cPtr);
		if ($var === 'segmentCount') return keydef_segmentCount_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('keydef_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function segment($index) {
		$r=keydef_segment($this->_cPtr,$index);
		if (is_resource($r)) {
			return new keySegment($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__keydef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_keydef();
	}
}

class fielddef_t_my {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'fielddef_t_my_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'fielddef_t_my_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('fielddef_t_my_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__fielddef_tT_64_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fielddef_t_my();
	}
}

class fielddef extends fielddef_t_my {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		fielddef_t_my::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return fielddef_t_my::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return fielddef_t_my::__isset($var);
	}

	function defaultValue() {
		return fielddef_defaultValue_str($this->_cPtr);
	}

	function setName($s) {
		fielddef_setName($this->_cPtr,$s);
	}

	function typeName() {
		return fielddef_typeName($this->_cPtr);
	}

	function align() {
		return fielddef_align($this->_cPtr);
	}

	function setLenByCharnum($charnum) {
		fielddef_setLenByCharnum($this->_cPtr,$charnum);
	}

	function codePage() {
		return fielddef_codePage($this->_cPtr);
	}

	function isStringType() {
		return fielddef_isStringType($this->_cPtr);
	}

	function isPadCharType() {
		return fielddef_isPadCharType($this->_cPtr);
	}

	function isNumericType() {
		return fielddef_isNumericType($this->_cPtr);
	}

	function isDateTimeType() {
		return fielddef_isDateTimeType($this->_cPtr);
	}

	function charNum() {
		return fielddef_charNum($this->_cPtr);
	}

	function isValidCharNum() {
		return fielddef_isValidCharNum($this->_cPtr);
	}

	function setCharsetIndex($index) {
		fielddef_setCharsetIndex($this->_cPtr,$index);
	}

	function charsetIndex() {
		return fielddef_charsetIndex($this->_cPtr);
	}

	function isNullable() {
		return fielddef_isNullable($this->_cPtr);
	}

	function setNullable($v,$defaultNull=true) {
		fielddef_setNullable($this->_cPtr,$v,$defaultNull);
	}

	function setDefaultValue($s_or_v) {
		fielddef_setDefaultValue($this->_cPtr,$s_or_v);
	}

	function setTimeStampOnUpdate($v) {
		fielddef_setTimeStampOnUpdate($this->_cPtr,$v);
	}

	function isTimeStampOnUpdate() {
		return fielddef_isTimeStampOnUpdate($this->_cPtr);
	}

	function isDefaultNull() {
		return fielddef_isDefaultNull($this->_cPtr);
	}

	function name() {
		return fielddef_name($this->_cPtr);
	}

	function isTrimPadChar() {
		return fielddef_isTrimPadChar($this->_cPtr);
	}

	function isUsePadChar() {
		return fielddef_isUsePadChar($this->_cPtr);
	}

	function setPadCharSettings($set, $trim) {
		fielddef_setPadCharSettings($this->_cPtr, $set, $trim);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__fielddef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fielddef();
	}
}

class tabledef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'tabledef_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'keyDefs') return new keydef(tabledef_keyDefs_get($this->_cPtr));
		if ($var === 'fieldDefs') return new fielddef(tabledef_fieldDefs_get($this->_cPtr));
		if ($var === 'flags') return new FLAGS(tabledef_flags_get($this->_cPtr));
		if ($var === 'parent') return new dbdef(tabledef_parent_get($this->_cPtr));
		$func = 'tabledef_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('tabledef_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__tabledef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_tabledef();
	}

	function cleanup() {
		tabledef_cleanup($this->_cPtr);
	}

	function fileName() {
		return tabledef_fileName($this->_cPtr);
	}

	function tableName() {
		return tabledef_tableName($this->_cPtr);
	}

	function setFileName($s) {
		tabledef_setFileName($this->_cPtr,$s);
	}

	function setTableName($s) {
		tabledef_setTableName($this->_cPtr,$s);
	}

	function nullfields() {
		return tabledef_nullfields($this->_cPtr);
	}

	function inUse() {
		return tabledef_inUse($this->_cPtr);
	}

	function size() {
		return tabledef_size($this->_cPtr);
	}

	function fieldNumByName($name) {
		return tabledef_fieldNumByName($this->_cPtr,$name);
	}

	function recordlen() {
		return tabledef_recordlen($this->_cPtr);
	}

	function isMysqlNullMode() {
		return tabledef_isMysqlNullMode($this->_cPtr);
	}


	function fieldDef($index) {
		$r=tabledef_fieldDef($this->_cPtr,$index);
		if (is_resource($r)) {
			return new fielddef($r);
		}
		return $r;
	}

	function keyDef($index) {
		$r=tabledef_keyDef($this->_cPtr,$index);
		if (is_resource($r)) {
			return new keydef($r);
		}
		return $r;
	}
}

class btrVersion {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrVersion_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'btrVersion_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrVersion_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function moduleVersionShortString($buf) {
		return btrVersion_moduleVersionShortString($this->_cPtr,$buf);
	}

	function moduleTypeString() {
		return btrVersion_moduleTypeString($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrVersion') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrVersion();
	}
}

class btrVersions {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'versions') return btrVersions_versions_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'versions') return new btrVersion(btrVersions_versions_get($this->_cPtr));
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrVersions_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function version($index) {
		$r=btrVersions_version($this->_cPtr,$index);
		if (is_resource($r)) {
			return new btrVersion($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrVersions') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrVersions();
	}
}

abstract class nstable {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($h) {
		$this->_cPtr=$h;
	}

	const changeCurrentCc = 0;

	const changeCurrentNcc = nstable_changeCurrentNcc;

	const changeInKey = nstable_changeInKey;

	const findForword = 0;

	const findBackForword = nstable_findBackForword;

	const findContinue = nstable_findContinue;

	const inkey = nstable_inkey;

	function nsdb() {
		$r=nstable_nsdb($this->_cPtr);
		if (is_resource($r)) {
			return new nsdatabase($r);
		}
		return $r;
	}

	function tableid() {
		return nstable_tableid($this->_cPtr);
	}

	function setTableid($v) {
		nstable_setTableid($this->_cPtr,$v);
	}

	function isOpen() {
		return nstable_isOpen($this->_cPtr);
	}

	function isUseTransactd() {
		return nstable_isUseTransactd($this->_cPtr);
	}

	function setAccessRights($curd) {
		nstable_setAccessRights($this->_cPtr,$curd);
	}

	function datalen() {
		return nstable_datalen($this->_cPtr);
	}

	function stat() {
		return nstable_stat($this->_cPtr);
	}

	function keyNum() {
		return nstable_keyNum($this->_cPtr);
	}

	function setKeyNum($v) {
		nstable_setKeyNum($this->_cPtr,$v);
	}

	function canRead() {
		return nstable_canRead($this->_cPtr);
	}

	function canWrite() {
		return nstable_canWrite($this->_cPtr);
	}

	function canInsert() {
		return nstable_canInsert($this->_cPtr);
	}

	function canDelete() {
		return nstable_canDelete($this->_cPtr);
	}

	function getWriteImageLen() {
		return nstable_getWriteImageLen($this->_cPtr);
	}

	function close() {
		nstable_close($this->_cPtr);
	}

	function update($type=null) {
		switch (func_num_args()) {
		case 0: nstable_update($this->_cPtr); break;
		default: nstable_update($this->_cPtr,$type);
		}
	}

	function del($in_key=false) {
		nstable_del($this->_cPtr,$in_key);
	}

	function insert($ncc=false) {
		return nstable_insert($this->_cPtr,$ncc);
	}

	function createIndex($specifyKeyNum=false) {
		nstable_createIndex($this->_cPtr,$specifyKeyNum);
	}

	function dropIndex($norenumber=false) {
		nstable_dropIndex($this->_cPtr,$norenumber);
	}

	function recordCount($estimate=true,$fromCurrent=false) {
		return nstable_recordCount($this->_cPtr,$estimate,$fromCurrent);
	}

	function beginBulkInsert($maxBuflen) {
		nstable_beginBulkInsert($this->_cPtr,$maxBuflen);
	}

	function abortBulkInsert() {
		nstable_abortBulkInsert($this->_cPtr);
	}

	function commitBulkInsert($autoCommit=false) {
		return nstable_commitBulkInsert($this->_cPtr,$autoCommit);
	}

	function seekFirst($lockBias=0) {
		nstable_seekFirst($this->_cPtr,$lockBias);
	}

	function seekLast($lockBias=0) {
		nstable_seekLast($this->_cPtr,$lockBias);
	}

	function seekPrev($lockBias=0) {
		nstable_seekPrev($this->_cPtr,$lockBias);
	}

	function seekNext($lockBias=0) {
		nstable_seekNext($this->_cPtr,$lockBias);
	}

	function seek($lockBias=0) {
		nstable_seek($this->_cPtr,$lockBias);
	}

	function seekGreater($orEqual,$lockBias=LOCK_BIAS_DEFAULT) {
		nstable_seekGreater($this->_cPtr,$orEqual,$lockBias);
	}

	function seekLessThan($orEqual,$lockBias=0) {
		nstable_seekLessThan($this->_cPtr,$orEqual,$lockBias);
	}

	function stepFirst($lockBias=0) {
		nstable_stepFirst($this->_cPtr,$lockBias);
	}

	function stepLast($lockBias=0) {
		nstable_stepLast($this->_cPtr,$lockBias);
	}

	function stepPrev($lockBias=0) {
		nstable_stepPrev($this->_cPtr,$lockBias);
	}

	function stepNext($lockBias=0) {
		nstable_stepNext($this->_cPtr,$lockBias);
	}

	function bookmarkLen() {
		return nstable_bookmarkLen($this->_cPtr);
	}

	function bookmark() {
		return nstable_bookmark($this->_cPtr);
	}

	function seekByBookmark($bm=null,$lockBias=0) {
		switch (func_num_args()) {
		case 0: nstable_seekByBookmark($this->_cPtr); break;
		default: nstable_seekByBookmark($this->_cPtr,$bm,$lockBias);
		}
	}

	function getPercentage($bm=null) {
		switch (func_num_args()) {
		case 0: $r=nstable_getPercentage($this->_cPtr); break;
		default: $r=nstable_getPercentage($this->_cPtr,$bm);
		}
		return $r;
	}

	function seekByPercentage($pc=null) {
		switch (func_num_args()) {
		case 0: nstable_seekByPercentage($this->_cPtr); break;
		default: nstable_seekByPercentage($this->_cPtr,$pc);
		}
	}

	function setOwnerName($name,$enctype=0) {
		nstable_setOwnerName($this->_cPtr,$name,$enctype);
	}

	function clearOwnerName() {
		nstable_clearOwnerName($this->_cPtr);
	}

	function recordLength() {
		return nstable_recordLength($this->_cPtr);
	}

	function stats($databuffer,$buflen,$estimate=true) {
		nstable_stats($this->_cPtr,$databuffer,$buflen,$estimate);
	}

	function unlock($bm=null) {
		switch (func_num_args()) {
		case 0: nstable_unlock($this->_cPtr); break;
		default: nstable_unlock($this->_cPtr,$bm);
		}
	}

	function mode() {
		return nstable_mode($this->_cPtr);
	}

	function statMsg() {
		return nstable_statMsg($this->_cPtr); 
	}

	static function getFileName($uri) {
		return nstable_getFileName($uri);
	}

	static function getDirURI($uri) {
		return nstable_getDirURI($uri);
	}

	static function existsFile($filename) {
		return nstable_existsFile($filename);
	}
}

class dbdef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($h) {
		$this->_cPtr=$h;
	}

	function tableCount() {
		return dbdef_tableCount($this->_cPtr);
	}

	function openMode() {
		return dbdef_openMode($this->_cPtr);
	}

	function tableDefs($index) {
		$r=dbdef_tableDefs($this->_cPtr,$index);
		if (is_resource($r)) {
			return new tabledef($r);
		}
		return $r;
	}

	function setVersion($v) {
		dbdef_setVersion($this->_cPtr,$v);
	}

	function version() {
		return dbdef_version($this->_cPtr);
	}

	function stat() {
		return dbdef_stat($this->_cPtr);
	}

	function validateTableDef($TableIndex) {
		return dbdef_validateTableDef($this->_cPtr,$TableIndex);
	}

	function updateTableDef($tableIndex,$forPsqlDdf=true) {
		dbdef_updateTableDef($this->_cPtr,$tableIndex,$forPsqlDdf);
	}

	function insertField($tableIndex,$insertIndex) {
		$r=dbdef_insertField($this->_cPtr,$tableIndex,$insertIndex);
		if (is_resource($r)) {
			return new fielddef($r);
		}
		return $r;
	}

	function deleteField($tableIndex,$deleteIndex) {
		dbdef_deleteField($this->_cPtr,$tableIndex,$deleteIndex);
	}

	function insertKey($tableIndex,$insertIndex) {
		$r=dbdef_insertKey($this->_cPtr,$tableIndex,$insertIndex);
		if (is_resource($r)) {
			return new keydef($r);
		}
		return $r;
	}

	function deleteKey($tableIndex,$deleteIndex) {
		dbdef_deleteKey($this->_cPtr,$tableIndex,$deleteIndex);
	}

	function insertTable($tableDef) {
		dbdef_insertTable($this->_cPtr,$tableDef);
	}

	function deleteTable($tableIndex) {
		dbdef_deleteTable($this->_cPtr,$tableIndex);
	}

	function renumberTable($oldIndex,$newIndex) {
		dbdef_renumberTable($this->_cPtr,$oldIndex,$newIndex);
	}

	function tableNumByName($tableName) {
		return dbdef_tableNumByName($this->_cPtr,$tableName);
	}

	function findKeynumByFieldNum($tableIndex,$index) {
		return dbdef_findKeynumByFieldNum($this->_cPtr,$tableIndex,$index);
	}

	function fieldNumByName($tableIndex,$name) {
		return dbdef_fieldNumByName($this->_cPtr,$tableIndex,$name);
	}

	function fieldValidLength($query,$fieldType) {
		return dbdef_fieldValidLength($this->_cPtr,$query,$fieldType);
	}

	function statMsg() {
		return dbdef_statMsg($this->_cPtr); 
	}

	function reopen($mode=-2) {
		dbdef_reopen($this->_cPtr,$mode);
	}

	function mode() {
		return dbdef_mode($this->_cPtr);
	}

	function synchronizeSeverSchema($tableIndex) {
		dbdef_synchronizeSeverSchema($this->_cPtr,$tableIndex);
	}
}

class table extends nstable {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		nstable::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return nstable::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return nstable::__isset($var);
	}

	function __construct($h) {
		$this->_cPtr=$h;
	}
	
	const clearNull = 0;

	const defaultNull = table_defaultNull;

	function tableDef() {
		$r=table_tableDef($this->_cPtr);
		if (is_resource($r)) {
			return new tabledef($r);
		}
		return $r;
	}

	function valiableFormatType() {
		return table_valiableFormatType($this->_cPtr);
	}

	function blobFieldUsed() {
		return table_blobFieldUsed($this->_cPtr);
	}

	function logicalToString() {
		return table_logicalToString($this->_cPtr);
	}

	function setLogicalToString($v) {
		table_setLogicalToString($this->_cPtr,$v);
	}

	function optionalData() {
		return table_optionalData($this->_cPtr);
	}

	function setOptionalData($v) {
		table_setOptionalData($this->_cPtr,$v);
	}

	function myDateTimeValueByBtrv() {
		return table_myDateTimeValueByBtrv($this->_cPtr);
	}

	function bookmarksCount() {
		return table_bookmarksCount($this->_cPtr);
	}

	function moveBookmarks($Id) {
		table_moveBookmarks($this->_cPtr,$Id);
	}

	function bookmarks($index) {
		$r=table_bookmarks($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new BOOKMARK($r);
		}
		return $r;
	}

	function clearBuffer($resetType=table_defaultNull) {
		table_clearBuffer($this->_cPtr, $resetType);
	}

	function getRecordHash() {
		return table_getRecordHash($this->_cPtr);
	}

	function smartUpdate() {
		table_smartUpdate($this->_cPtr);
	}

	function find($type=null) {
		switch (func_num_args()) {
		case 0: table_find($this->_cPtr); break;
		default: table_find($this->_cPtr,$type);
		}
	}

	function findFirst() {
		table_findFirst($this->_cPtr);
	}

	function findLast() {
		table_findLast($this->_cPtr);
	}

	function findNext($notIncCurrent=true) {
		table_findNext($this->_cPtr,$notIncCurrent);
	}

	function findPrev($notIncCurrent=true) {
		table_findPrev($this->_cPtr,$notIncCurrent);
	}

	function statReasonOfFind() {
		return table_statReasonOfFind($this->_cPtr);
	}
	
	function lastFindDirection() {
		return table_lastFindDirection($this->_cPtr);
	}

	function bookmarkFindCurrent() {
		return table_bookmarkFindCurrent($this->_cPtr);
	}

	function setFilter($str,$rejectCount,$cacheCount,$autoEscape=true) {
		table_setFilter($this->_cPtr,$str,$rejectCount,$cacheCount,$autoEscape);
	}

	function fieldNumByName($name) {
		return table_fieldNumByName($this->_cPtr,$name);
	}

	function getFVbyt($index_or_fieldName) {
		return table_getFVint($this->_cPtr,$index_or_fieldName);
	}

	function getFVsht($index_or_fieldName) {
		return table_getFVint($this->_cPtr,$index_or_fieldName);
	}

	function getFVint($index_or_fieldName) {
		return table_getFVint($this->_cPtr,$index_or_fieldName);
	}

	function getFVlng($index_or_fieldName) {
		return table_getFVint($this->_cPtr,$index_or_fieldName);
	}

	function getFV64($index_or_fieldName) {
		return table_getFV64($this->_cPtr,$index_or_fieldName);
	}

	function getFVflt($index_or_fieldName) {
		return table_getFVdbl($this->_cPtr,$index_or_fieldName);
	}

	function getFVdbl($index_or_fieldName) {
		return table_getFVdbl($this->_cPtr,$index_or_fieldName);
	}

	function getFVNull($index_or_fieldName) {
		return table_getFVNull($this->_cPtr,$index_or_fieldName);
	}

	function setFVNull($index_or_fieldName,$v) {
		table_setFVNull($this->_cPtr,$index_or_fieldName,$v);
	}

	function getFVstr($index_or_fieldName) {
		return table_getFVstr($this->_cPtr,$index_or_fieldName);
	}

	function fields() {
		return table_fields($this->_cPtr);
	}

	function setFV($index_or_fieldName,$data,$size=null) {
		switch (func_num_args()) {
		case 2: table_setFV($this->_cPtr,$index_or_fieldName,$data); break;
		default: table_setFV($this->_cPtr,$index_or_fieldName,$data,$size);
		}
	}

	function getFVbin($index_or_fieldName) {
		return table_getFVbin($this->_cPtr,$index_or_fieldName);
	}

	function keyValueDescription() {
		return table_keyValueDescription($this->_cPtr);
	}

	function prepare($q,$serverPrepare=false) {
		return table_prepare($this->_cPtr,$q,$serverPrepare);
	}

	function setQuery($q,$serverPrepare=false) {
		return table_setQuery($this->_cPtr,$q,$serverPrepare);
	}

	function setPrepare($q) {
		table_setPrepare($this->_cPtr,$q);
	}

	function release() {
		table_release($this->_cPtr);
	}
}

/* Added "abstract".  The querybase dose not use direct from PHP.*/
abstract class queryBase {
	public $_cPtr=null;
	protected $_pData=array();
	protected $_bookmarks=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($h) {
		$this->_cPtr=$h;
	}

	const none = 0;

	const joinHasOneOrHasMany = 1;

	const combineCondition = 2;

	function clearSeekKeyValues() {
		queryBase_clearSeekKeyValues($this->_cPtr);
		$this->_bookmarks=array();
	}

	function clearSelectFields() {
		queryBase_clearSelectFields($this->_cPtr);
	}

	function addSeekKeyValue($value, $reset=false) {
		$this->_bookmarks=array();
		queryBase_addSeekKeyValue($this->_cPtr,$value,$reset);
	}
	
	function addSeekBookmark($bookmark, $len, $reset=false) {
		if ($reset === true)
		{
			$this->_bookmarks=array();
		}
		queryBase_addSeekBookmark($this->_cPtr,$bookmark,$len,$reset);
		array_push($this->_bookmarks, $bookmark);
	}

	function reserveSeekKeyValueSize($v) {
		queryBase_reserveSeekKeyValueSize($this->_cPtr,$v);
	}

	function queryString($str,$autoEscape=false) {
		queryBase_queryString($this->_cPtr,$str,$autoEscape);
		return $this;
	}

	function reject($v) {
		queryBase_reject($this->_cPtr,$v);
		return $this;
	}

	function limit($v) {
		queryBase_limit($this->_cPtr,$v);
		return $this;
	}

	function direction($v) {
		queryBase_direction($this->_cPtr,$v);
		return $this;
	}

	function all() {
		queryBase_all($this->_cPtr);
		return $this;
	}

	function optimize($v) {
		queryBase_optimize($this->_cPtr,$v);
		return $this;
	}

	function bookmarkAlso($v) {
		queryBase_bookmarkAlso($this->_cPtr,$v);
		return $this;
	}

	function toString() {
		return queryBase_toString($this->_cPtr);
	}

	function getDirection() {
		return queryBase_getDirection($this->_cPtr);
	}

	function getReject() {
		return queryBase_getReject($this->_cPtr);
	}

	function getLimit() {
		return queryBase_getLimit($this->_cPtr);
	}

	function isAll() {
		return queryBase_isAll($this->_cPtr);
	}

	function getJoinKeySize() {
		return queryBase_getJoinKeySize($this->_cPtr);
	}

	function getOptimize() {
		return queryBase_getOptimize($this->_cPtr);
	}

	function isBookmarkAlso() {
		return queryBase_isBookmarkAlso($this->_cPtr);
	}

	function isSeekByBookmarks() {
		return queryBase_isSeekByBookmarks($this->_cPtr);
	}

	function selectCount() {
		return queryBase_selectCount($this->_cPtr);
	}

	function getSelect($index) {
		return queryBase_getSelect($this->_cPtr,$index);
	}

	function whereTokens() {
		return queryBase_whereTokens($this->_cPtr);
	}

	function getWhereToken($index) {
		return queryBase_getWhereToken($this->_cPtr,$index);
	}

	function setWhereToken($index,$v) {
		queryBase_setWhereToken($this->_cPtr,$index,$v);
	}

	function reverseAliasName($alias,$src) {
		queryBase_reverseAliasName($this->_cPtr,$alias,$src);
	}
	
	function stopAtLimit($v) {
		queryBase_stopAtLimit($this->_cPtr,$v);
		return $this;
	}

	function isStopAtLimit() {
		return queryBase_isStopAtLimit($this->_cPtr);
	}

}

class query extends queryBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		queryBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return queryBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return queryBase::__isset($var);
	}

	function reset() {
		query_reset($this->_cPtr);
		$this->_bookmarks=array();
		return $this;
	}

	function select($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
		query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
		return $this;
	}

	function whereIsNull($name) {
		$r=query_whereIsNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function whereIsNotNull($name) {
		$r=query_whereIsNotNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function andIsNull($name) {
		$r=query_andIsNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function andIsNotNull($name) {
		$r=query_andIsNotNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function orIsNull($name) {
		$r=query_orIsNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function orIsNotNull($name) {
		$r=query_orIsNotNull($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new query($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__query') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_query();
	}

	function where($name,$qlogic,$value) {
		query_where($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}

	function and_($name,$qlogic,$value) {
		query_and_($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}

	function or_($name,$qlogic,$value) {
		query_or_($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}

	function in($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
		query_in($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
		return $this;
	}
}

class nsdatabase {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__nsdatabase') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_nsdatabase();
	}

	function enableTrn() {
		return nsdatabase_enableTrn($this->_cPtr);
	}

	function stat() {
		return nsdatabase_stat($this->_cPtr);
	}

	function clientID() {
		return nsdatabase_clientID($this->_cPtr);
	}

	function openTableCount() {
		return nsdatabase_openTableCount($this->_cPtr);
	}

	function uri() {
		return nsdatabase_uri($this->_cPtr);
	}

	function uriMode() {
		return nsdatabase_uriMode($this->_cPtr);
	}

	function lockWaitCount() {
		return nsdatabase_lockWaitCount($this->_cPtr);
	}

	function lockWaitTime() {
		return nsdatabase_lockWaitTime($this->_cPtr);
	}

	function setLockWaitCount($v) {
		nsdatabase_setLockWaitCount($this->_cPtr,$v);
	}

	function setLockWaitTime($v) {
		nsdatabase_setLockWaitTime($this->_cPtr,$v);
	}

	function setLocalSharing($v) {
		nsdatabase_setLocalSharing($this->_cPtr,$v);
	}

	function dropTable($uri) {
		nsdatabase_dropTable($this->_cPtr,$uri);
	}

	function rename($oldUri,$newUri) {
		nsdatabase_rename($this->_cPtr,$oldUri,$newUri);
	}

	function swapTablename($uri1,$uri2) {
		nsdatabase_swapTablename($this->_cPtr,$uri1,$uri2);
	}

	function beginTrn($bias=null) {
		switch (func_num_args()) {
		case 0: nsdatabase_beginTrn($this->_cPtr); break;
		default: nsdatabase_beginTrn($this->_cPtr,$bias);
		}
	}

	function endTrn() {
		nsdatabase_endTrn($this->_cPtr);
	}

	function abortTrn() {
		nsdatabase_abortTrn($this->_cPtr);
	}

	function beginSnapshot($bias=CONSISTENT_READ) {
		nsdatabase_beginSnapshot($this->_cPtr,$bias);
	}

	function endSnapshot() {
		nsdatabase_endSnapshot($this->_cPtr);
	}

	function trxIsolationServer() {
		return nsdatabase_trxIsolationServer($this->_cPtr);
	}

	function trxLockWaitTimeoutServer() {
		return nsdatabase_trxLockWaitTimeoutServer($this->_cPtr);
	}

	function statMsg() {
		return nsdatabase_statMsg($this->_cPtr); 
	}

	function useLongFilename() {
		return nsdatabase_useLongFilename($this->_cPtr);
	}

	function setUseLongFilename($value) {
		nsdatabase_setUseLongFilename($this->_cPtr,$value);
	}

	function setUseTransactd() {
		return nsdatabase_setUseTransactd($this->_cPtr);
	}

	function isTransactdUri($uri) {
		return nsdatabase_isTransactdUri($this->_cPtr,$uri);
	}

	function isUseTransactd() {
		return nsdatabase_isUseTransactd($this->_cPtr);
	}

	function readDatabaseDirectory() {
		return nsdatabase_readDatabaseDirectory($this->_cPtr);
	}

	function connect($uri,$newConnection=false) {
		return nsdatabase_connect($this->_cPtr,$uri,$newConnection);
	}

	function disconnect($uri="") {
		return nsdatabase_disconnect($this->_cPtr,$uri);
	}

	function disconnectForReconnectTest() {
		return nsdatabase_disconnectForReconnectTest($this->_cPtr);
	}

	function reconnect() {
		return nsdatabase_reconnect($this->_cPtr);
	}

	static function trnsactionFlushWaitStatus() {
		return nsdatabase_trnsactionFlushWaitStatus();
	}

	static function setExecCodePage($codepage) {
		nsdatabase_setExecCodePage($codepage);
	}

	static function execCodePage() {
		return nsdatabase_execCodePage();
	}

	static function setCheckTablePtr($v) {
		nsdatabase_setCheckTablePtr($v);
	}
}

class database extends nsdatabase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		nsdatabase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return nsdatabase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return nsdatabase::__isset($var);
	}

	function dbDef() {
		$r=database_dbDef($this->_cPtr);
		if (is_resource($r)) {
			return new dbdef($r);
		}
		return $r;
	}

	function rootDir() {
		return database_rootDir($this->_cPtr);
	}

	function setRootDir($directory) {
		database_setRootDir($this->_cPtr,$directory);
	}

	function optionalData() {
		return database_optionalData($this->_cPtr);
	}

	function setOptionalData($v) {
		database_setOptionalData($this->_cPtr,$v);
	}

	function tableReadOnly() {
		return database_tableReadOnly($this->_cPtr);
	}

	function setTableReadOnly($value) {
		database_setTableReadOnly($this->_cPtr,$value);
	}

	function open($uri,$schemaType=0,$mode=-2,$dir=null,$ownerName=null) {
		switch (func_num_args()) {
		case 1: case 2: case 3: $r=database_open($this->_cPtr,$uri,$schemaType,$mode); break;
		case 4: $r=database_open($this->_cPtr,$uri,$schemaType,$mode,$dir); break;
		default: $r=database_open($this->_cPtr,$uri,$schemaType,$mode,$dir,$ownerName);
		}
		return $r;
	}

	function __clone() {
		$r=database___clone($this->_cPtr);
		$this->__construct($r);
	}

	function create($uri,$type=0) {
		database_create($this->_cPtr,$uri,$type);
	}

	function drop() {
		database_drop($this->_cPtr);
	}

	function dropTable($tableName) {
		database_dropTable($this->_cPtr,$tableName);
	}

	function close($withDropDefaultSchema=false) {
		database_close($this->_cPtr,$withDropDefaultSchema);
	}

	function aclReload() {
		return database_aclReload($this->_cPtr);
	}

	function continuous($op=0,$inclideRepfile=false) {
		return database_continuous($this->_cPtr,$op,$inclideRepfile);
	}

	function assignSchemaData($src) {
		return database_assignSchemaData($this->_cPtr,$src);
	}

	function copyTableData($dest,$src,$turbo,$offset=0,$keyNum=-1,$maxSkip=-1) {
		return database_copyTableData($this->_cPtr,$dest,$src,$turbo,$offset,$keyNum,$maxSkip);
	}

	function convertTable($tableIndex,$turbo,$ownerName=null) {
		switch (func_num_args()) {
		case 2: database_convertTable($this->_cPtr,$tableIndex,$turbo); break;
		default: database_convertTable($this->_cPtr,$tableIndex,$turbo,$ownerName);
		}
	}

	function existsTableFile($tableIndex,$ownerName=null) {
		switch (func_num_args()) {
		case 1: $r=database_existsTableFile($this->_cPtr,$tableIndex); break;
		default: $r=database_existsTableFile($this->_cPtr,$tableIndex,$ownerName);
		}
		return $r;
	}

	function getBtrVersion($versions) {
		database_getBtrVersion($this->_cPtr,$versions);
	}

	function isOpened() {
		return database_isOpened($this->_cPtr);
	}

	function mode() {
		return database_mode($this->_cPtr);
	}

	function autoSchemaUseNullkey() {
		return database_autoSchemaUseNullkey($this->_cPtr);
	}

	function setAutoSchemaUseNullkey($v) {
		database_setAutoSchemaUseNullkey($this->_cPtr,$v);
	}

	static function setCompatibleMode($mode) {
		database_setCompatibleMode($mode);
	}

	static function comaptibleMode() {
		return database_comaptibleMode();
	}

	const CMP_MODE_MYSQL_NULL = database_CMP_MODE_MYSQL_NULL;

	const CMP_MODE_OLD_NULL = database_CMP_MODE_OLD_NULL;
	
	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__database') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_database();
	}

	function openTable($tableName_or_fileNum,$mode=null,$autoCreate=null,$ownerName=null,$uri=null) {
		switch (func_num_args()) {
		case 1: $r=database_openTable($this->_cPtr,$tableName_or_fileNum); break;
		case 2: $r=database_openTable($this->_cPtr,$tableName_or_fileNum,$mode); break;
		case 3: $r=database_openTable($this->_cPtr,$tableName_or_fileNum,$mode,$autoCreate); break;
		case 4: $r=database_openTable($this->_cPtr,$tableName_or_fileNum,$mode,$autoCreate,$ownerName); break;
		default: $r=database_openTable($this->_cPtr,$tableName_or_fileNum,$mode,$autoCreate,$ownerName,$uri);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__table': return new table($r);
		default: return new table($r);
		}
	}
}

class benchmark {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function start() {
		benchmark_start();
	}

	static function stop() {
		return benchmark_stop();
	}

	static function showTimes($result,$name) {
		benchmark_showTimes($result,$name);
	}

	static function showTimeSec($result,$name) {
		benchmark_showTimeSec($result,$name);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__rtl__benchmark') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_benchmark();
	}
}

class btrDate {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrDate_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'btrDate_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrDate_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrDate') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrDate();
	}
}

class btrTime {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrTime_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'btrTime_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrTime_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrTime') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrTime();
	}
}

class btrDateTime {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrDateTime_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'time') return new btrTime(btrDateTime_time_get($this->_cPtr));
		if ($var === 'date') return new btrDate(btrDateTime_date_get($this->_cPtr));
		if ($var === 'i64') return btrDateTime_i64_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrDateTime_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrDateTime') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrDateTime();
	}
}

class btrTimeStamp {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i64') return btrTimeStamp_i64_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'i64') return btrTimeStamp_i64_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('btrTimeStamp_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($i_or_p_or_d,$t=null) {
		if (is_resource($i_or_p_or_d) && get_resource_type($i_or_p_or_d) === '_p_bzs__db__protocol__tdap__btrTimeStamp') {
			$this->_cPtr=$i_or_p_or_d;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_btrTimeStamp($i_or_p_or_d); break;
		default: $this->_cPtr=new_btrTimeStamp($i_or_p_or_d,$t);
		}
	}

	function toString() {
		return btrTimeStamp_toString($this->_cPtr);
	}

	function fromString($p) {
		btrTimeStamp_fromString($this->_cPtr,$p);
	}
}

abstract class RangeIterator implements \Iterator {
	protected $_position = 0;
	protected $_start = -1;
	protected $_end = -1;

	function __construct($start, $end) {
		$this->_position = 0;
		$this->_start = $start;
		$this->_end = $end;
	}

	public function rewind() {
		$this->_position = $this->_start;
	}

	public function valid() {
		return $this->_position <= $this->_end;
	}

	abstract public function current();

	public function key() {
		return $this->_position;
	}

	public function next() {
		$this->_position++;
	}
}

class fielddefsIterator extends RangeIterator {
	private $_fielddefs_ptr = NULL;

	function __construct($fielddefs_ptr, $start, $end) {
		$this->_fielddefs_ptr = $fielddefs_ptr;
		parent::__construct($start, $end);
	}

	public function current() {
		$r = fielddefs_getFielddef($this->_fielddefs_ptr,$this->_position);
		if (is_resource($r))
			return new fielddef($r);
		return $r;
	}
}

class fielddefs implements \ArrayAccess, \Countable, \IteratorAggregate {
	public $_cPtr=null;
	protected $_pData=array();

	// IteratorAggregate
	public function getIterator() {
		return new fielddefsIterator($this->_cPtr, 0, (fielddefs_size($this->_cPtr) - 1));
	}

	// ArrayAccess
	public function offsetExists($offset) {
		return (\gettype($offset) === "integer" &&
			$offset >= 0 && $offset < fielddefs_size($this->_cPtr));
	}

	public function offsetGet($offset) {
		if (\gettype($offset) !== "integer" ||
			$offset < 0 || $offset >= fielddefs_size($this->_cPtr))
			throw new \OutOfRangeException();
		$r = fielddefs_getFielddef($this->_cPtr,$offset);
		if (is_resource($r))
			return new fielddef($r);
		return $r;
	}

	public function offsetSet($offset, $value) {
		throw new \BadMethodCallException();
	}

	public function offsetUnset($offset) {
		throw new \BadMethodCallException();
	}

	// Countable
	public function count() {
		return fielddefs_size($this->_cPtr);
	}

	// Generator
	function range($start = null, $end = null) {
		$count = fielddefs_size($this->_cPtr);
		if (\gettype($start) !== 'integer' || $start < 0) {
			$i = 0;
		} else {
			$i = $start;
		}
		if (\gettype($end) !== 'integer' || $end < 0 || $end >= $count) {
			$end = $count - 1;
		}
		while ($i <= $end) {
			$r = fielddefs_getFielddef($this->_cPtr, $i);
			if (is_resource($r))
				yield new fielddef($r);
			else
				yield $r;
			$i++;
		}
	}

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __clone() {
		$r=fielddefs___clone($this->_cPtr);
		$this->__construct($r);
	}

	function indexByName($name) {
		return fielddefs_indexByName($this->_cPtr,$name);
	}

	function getFielddef($index_or_name) {
		$r=fielddefs_getFielddef($this->_cPtr,$index_or_name);
		if (is_resource($r)) {
			return new fielddef($r);
		}
		return $r;
	}

	function checkIndex($index) {
		return fielddefs_checkIndex($this->_cPtr,$index);
	}

	function size() {
		return fielddefs_size($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__fielddefs') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fielddefs();
	}
}

class field {
	public function getFV() {
		if ((transactd::fieldValueMode() === transactd::FIELDVALUEMODE_RETURNNULL)
				&& $this->isNull() === true)
			return null;
		switch ($this->type()) {
			case transactd::ft_integer:
			case transactd::ft_uinteger:
			case transactd::ft_autoinc:
			case transactd::ft_autoIncUnsigned:
			case transactd::ft_logical:
			case transactd::ft_bit:
				return field_i64($this->_cPtr);
			case transactd::ft_float:
			case transactd::ft_decimal:
			case transactd::ft_money:
			case transactd::ft_numeric:
			case transactd::ft_bfloat:
			case transactd::ft_numericsts:
			case transactd::ft_numericsa:
			case transactd::ft_currency:
				return field_d($this->_cPtr);
			default:
				return field_c_str($this->_cPtr);
		}
		return null;
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'value') return field_setFV($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'value') return getFV();
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($ptr_or_r=null) {
		if (is_resource($ptr_or_r) && get_resource_type($ptr_or_r) === '_p_bzs__db__protocol__tdap__client__field') {
			$this->_cPtr=$ptr_or_r;
			return;
		}
		if (func_num_args() == 0)  
			$this->_cPtr=new_field();
		else
			$this->_cPtr=new_field($ptr_or_r);
	}

	function type() {
		return field_type($this->_cPtr);
	}

	function len() {
		return field_len($this->_cPtr);
	}

	function isNull() {
		return field_isNull($this->_cPtr);
	}

	function setNull($v) {
		field_setNull($this->_cPtr,$v);
	}

	function setFV($p_or_v_or_data,$size=null) {
		switch (func_num_args()) {
		case 1: $r=field_setFV($this->_cPtr,$p_or_v_or_data); break;
		default: $r=field_setFV($this->_cPtr,$p_or_v_or_data,$size);
		}
		return $r;
	}

	function getBin() {
		return field_getBin($this->_cPtr);
	}

	function setBin($str) {
		return field_setFV($this->_cPtr, $str, strlen($str));
	}

	function comp($r_,$logType=16) {
		return field_comp($this->_cPtr,$r_,$logType);
	}
	
	function i() { return field_i($this->_cPtr); }
	
	function i64() { return field_i64($this->_cPtr); }

	function d() { return field_d($this->_cPtr); }

	function str() { return field_c_str($this->_cPtr); }

	function bin() { return field_getBin($this->_cPtr); }
	
	function setValue($p_or_v_or_data,$size=null) {
		switch (func_num_args()) {
		case 1: field_setFV($this->_cPtr,$p_or_v_or_data); break;
		default: field_setFV($this->_cPtr,$p_or_v_or_data,$size);
		}
	}
}

class RecordIterator implements \Iterator {
	private $_record_cPtr = null;
	private $_position = 0;
	private $_count = -1;
	private $_field = null;
	private $_fielddefs = null;

	function __construct($record_cPtr, $fielddefs) {
		$this->_record_cPtr = $record_cPtr;
		$this->_position = 0;
		$this->_count = Record_size($record_cPtr);
		$this->_fielddefs = $fielddefs;
		$this->_field = new field();
	}

	public function rewind() {
		$this->_position = 0;
	}

	public function valid() {
		return $this->_position < $this->_count;
	}

	public function current() {
		Record_getFieldByIndexRef($this->_record_cPtr, $this->_position, $this->_field);
		return $this->_field->getFV();
	}

	public function key() {
		return $this->_fielddefs->getFielddef($this->_position)->name();
	}

	public function next() {
		$this->_position++;
	}
}

class Record implements \ArrayAccess, \Countable, \IteratorAggregate {
	protected $_field = null;
	protected $_fielddefs = null;

	function __clone() {
		$this->_field = new field();
	}

	// IteratorAggregate
	public function getIterator() {
		return new RecordIterator($this->_cPtr, $this->_fielddefs);
	}

	// ArrayAccess
	public function offsetExists($offset) {
		switch (\gettype($offset)) {
			case "integer":
				return $offset >= 0 && $offset < $this->count();
			case "string":
				return Record_indexByName($this->_cPtr, $offset) >= 0;
			default:
				return false;
		}
	}

	public function offsetGet($offset) {
		switch (\gettype($offset)) {
			case "integer":
				Record_getFieldByIndexRef($this->_cPtr, $offset, $this->_field);
				break;
			case "string":
				Record_getFieldByNameRef($this->_cPtr, $offset, $this->_field);
				break;
			default:
				throw new \OutOfRangeException();
		}
		if (transactd::recordValueMode() === transactd::RECORD_KEYVALUE_FIELDVALUE)
			return $this->_field->getFV();
		else
			return $this->_field;
	}

	public function offsetSet($offset, $value) {
		throw new \BadMethodCallException();
	}

	public function offsetUnset($offset) {
		throw new \BadMethodCallException();
	}

	// Countable
	public function count() {
		return Record_size($this->_cPtr);
	}

	// Generator
	function keys() {
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			yield $this->_fielddefs->getFielddef($i)->name();
		}
	}

	function values() {
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			yield $this->_field->getFV();
		}
	}

	// toArray
	function keysArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			$ret[] = $this->_fielddefs->getFielddef($i)->name();
		}
		return $ret;
	}

	function valuesArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			$ret[] = $this->_field->getFV();
		}
		return $ret;
	}

	function toArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			$ret[$this->_fielddefs->getFielddef($i)->name()] = $this->_field->getFV();
		}
		return $ret;
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($h) {
		$this->_cPtr=$h;
		$this->_fielddefs = $this->fieldDefs();
		$this->_field = new field();
	}

	function isInvalidRecord() {
		return Record_isInvalidRecord($this->_cPtr);
	}

	function getField($index_or_name) {
		$r=Record_getField($this->_cPtr,$index_or_name);
		if (is_resource($r)) {
			return new field($r);
		}
		return $r;
	}

	function size() {
		return Record_size($this->_cPtr);
	}

	function indexByName($name) {
		return Record_indexByName($this->_cPtr,$name);
	}

	function fieldDefs() {
		$r=Record_fieldDefs($this->_cPtr);
		if (is_resource($r)) {
			return new fielddefs($r);
		}
		return $r;
	}

	function clear() {
		Record_clear($this->_cPtr);
	}

	function getFieldByIndexRef($index,$return_field) {
		Record_getFieldByIndexRef($this->_cPtr,$index,$return_field);
	}

	function getFieldByNameRef($name,$return_field) {
		Record_getFieldByNameRef($this->_cPtr,$name,$return_field);
	}
}

class writableRecord extends Record {
	// override ArrayAccess method (set value).
	public function offsetSet($offset, $value) {
		$this->offsetGet($offset);
		switch ($this->_field->type()) {
			case transactd::ft_string:
			case transactd::ft_myvarbinary:
			case transactd::ft_mywvarbinary:
			case transactd::ft_myblob:
				$this->_field->setFV($value, strlen($value));
				break;
			default:
				$this->_field->setFV($value);
		}
	}

	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		Record::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return Record::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Record::__isset($var);
	}

	function __construct($h) {
		$this->_cPtr=$h;
		$this->_fielddefs = $this->fieldDefs();
		$this->_field = new field();
	}

	function read($KeysetAlrady_or_bm=null) {
		switch (func_num_args()) {
		case 0: $r=writableRecord_read($this->_cPtr); break;
		default: $r=writableRecord_read($this->_cPtr,$KeysetAlrady_or_bm);
		}
		return $r;
	}

	function insert() {
		writableRecord_insert($this->_cPtr);
	}

	function del($KeysetAlrady=false) {
		writableRecord_del($this->_cPtr,$KeysetAlrady);
	}

	function update() {
		writableRecord_update($this->_cPtr);
	}

	function save() {
		writableRecord_save($this->_cPtr);
	}
}

class connectParams {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($protocol_or_uri,$hostOrIp=null,$dbname=null,$schemaTable=null,
	                        $username=null,$passwd=null) {
		if (is_resource($protocol_or_uri) && get_resource_type($protocol_or_uri) === '_p_bzs__db__protocol__tdap__client__connectParams') {
			$this->_cPtr=$protocol_or_uri;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_connectParams($protocol_or_uri); break;
		case 2: $this->_cPtr=new_connectParams($protocol_or_uri,$hostOrIp); break;
		case 3: $this->_cPtr=new_connectParams($protocol_or_uri,$hostOrIp,$dbname); break;
		case 4: $this->_cPtr=new_connectParams($protocol_or_uri,$hostOrIp,$dbname,$schemaTable);break;
		case 5: $this->_cPtr=new_connectParams($protocol_or_uri,$hostOrIp,$dbname,$schemaTable,$username);break;
		default: $this->_cPtr=new_connectParams($protocol_or_uri,$hostOrIp,$dbname,$schemaTable,$username,$passwd);
		}
	}

	function setMode($v) {
		connectParams_setMode($this->_cPtr,$v);
	}

	function setType($v) {
		connectParams_setType($this->_cPtr,$v);
	}

	function uri() {
		return connectParams_uri($this->_cPtr);
	}

	function mode() {
		return connectParams_mode($this->_cPtr);
	}

	function type() {
		return connectParams_type($this->_cPtr);
	}
}

class fieldNames {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function reset() {
		fieldNames_reset($this->_cPtr);
		return $this;
	}

	function keyField($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
		fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
		return $this;
	}

	function count() {
		return fieldNames_count($this->_cPtr);
	}

	function getFieldName($index) {
		return fieldNames_getFieldName($this->_cPtr,$index);
	}

	function getValue($index) {
		return fieldNames_getValue($this->_cPtr,$index);
	}

	function addValue($v) {
		fieldNames_addValue($this->_cPtr,$v);
	}

	function addValues($values,$delmi) {
		fieldNames_addValues($this->_cPtr,$values,$delmi);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__fieldNames') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fieldNames();
	}
}

class sortField {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'name') return sortField_name_set($this->_cPtr,$value);
		if ($var === 'asc') return sortField_asc_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'name') return sortField_name_get($this->_cPtr);
		if ($var === 'asc') return sortField_asc_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('sortField_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__sortField') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_sortField();
	}
}

class sortFields {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function add($name,$asc) {
		sortFields_add($this->_cPtr,$name,$asc);
		return $this;
	}

	function size() {
		return sortFields_size($this->_cPtr);
	}

	function getSortField($index) {
		$r=sortFields_getSortField($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new sortField($r);
		}
		return $r;
	}

	function clear() {
		sortFields_clear($this->_cPtr);
		return $this;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__sortFields') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_sortFields();
	}
}

class recordsetQuery {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function reset() {
		recordsetQuery_reset($this->_cPtr);
		return $this;
	}

	function toString() {
		return recordsetQuery_toString($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordsetQuery') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_recordsetQuery();
	}

	function when($name,$qlogic,$value) {
		recordsetQuery_when($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}

	function and_($name,$qlogic,$value) {
		recordsetQuery_and_($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}

	function or_($name,$qlogic,$value) {
		recordsetQuery_or_($this->_cPtr,$name,$qlogic,$value);
		return $this;
	}
}

abstract class groupFuncBase extends recordsetQuery {
	public $_cPtr=null;
	protected $resultName = '';

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		recordsetQuery::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return recordsetQuery::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return recordsetQuery::__isset($var);
	}

	function __construct($h) {
		$this->_cPtr=$h;
	}

	function targetNames() {
		$r=groupFuncBase_targetNames($this->_cPtr);
		if (is_resource($r)) {
			return new fieldNames($r);
		}
		return $r;
	}

	function resultName() {
		return groupFuncBase_resultName($this->_cPtr);
	}

	function setResultName($v) {
		$this->resultName = $v;
		groupFuncBase_setResultName($this->_cPtr,$this->resultName);
	}

	function resultKey() {
		return groupFuncBase_resultKey($this->_cPtr);
	}

	function reset() {
		groupFuncBase_reset($this->_cPtr);
	}

	function __clone() {
		$r=groupFuncBase___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}
}

class groupQuery {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function reset() {
		groupQuery_reset($this->_cPtr);
		return $this;
	}

	function addFunction($func) {
		groupQuery_addFunction($this->_cPtr,$func);
		return $this;
	}

	function keyField($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
		groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
		return $this;
	}

	function getKeyFields() {
		$r=groupQuery_getKeyFields($this->_cPtr);
		if (is_resource($r)) {
			return new fieldNames($r);
		}
		return $r;
	}

	function getFunction($index) {
		$r=groupQuery_getFunction($this->_cPtr,$index);
		$this->_cPtr = $r;
		return $this;
	}

	function functionCount() {
		return groupQuery_functionCount($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__groupQuery') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_groupQuery();
	}
}

class sum extends groupFuncBase {
	public $_cPtr=null;
	protected $targetNames = null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __clone() {
		$r=sum___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__sum') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_sum($this->targetNames); break;
		default: $this->_cPtr=new_sum($this->targetNames,$this->resultName);
		}
	}
}

class first extends groupFuncBase {
	public $_cPtr=null;
	protected $targetNames = null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __clone() {
		$r=first___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__first') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_first($this->targetNames); break;
		default: $this->_cPtr=new_first($this->targetNames,$this->resultName);
		}
	}
}

class last extends groupFuncBase {
	public $_cPtr=null;
	protected $targetNames = null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __clone() {
		$r=last___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__last') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_last($this->targetNames); break;
		default: $this->_cPtr=new_last($this->targetNames,$this->resultName);
		}
	}
}

class count extends groupFuncBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __clone() {
		$r=count___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($resultName) {
		if (is_resource($resultName) && get_resource_type($resultName) === '_p_bzs__db__protocol__tdap__client__count') {
			$this->_cPtr=$resultName;
			return;
		}
		$this->resultName = $resultName;
		$this->_cPtr=new_count($this->resultName);
	}
}

class avg extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __clone() {
		$r=avg___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__avg') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_avg($this->targetNames); break;
		default: $this->_cPtr=new_avg($this->targetNames,$this->resultName);
		}
	}
}

class min extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __clone() {
		$r=min___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__min') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_min($this->targetNames); break;
		default: $this->_cPtr=new_min($this->targetNames,$this->resultName);
		}
	}
}

class max extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __clone() {
		$r=max___clone($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function __construct($targetNames,$resultName=null) {
		if (is_resource($targetNames) && get_resource_type($targetNames) === '_p_bzs__db__protocol__tdap__client__max') {
			$this->_cPtr=$targetNames;
			return;
		}
		$this->targetNames = $targetNames;
		$this->resultName = $resultName;
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_max($this->targetNames); break;
		default: $this->_cPtr=new_max($this->targetNames,$this->resultName);
		}
	}
}

class RecordsetIterator implements \SeekableIterator {
	private $_recordset_cPtr = null;
	private $_position = 0;
	private $_fieldsBase_p_p = null;
	private $_record = null;
	private $_count = -1;

	function __construct($recordset_cPtr, $fielddefs) {
		$this->_recordset_cPtr = $recordset_cPtr;
		$this->_position = 0;
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_count = Recordset_count($recordset_cPtr);
		$this->_record = new Record(memoryRecord_createRecord($fielddefs));
	}

	function __destruct() {
		delete_fieldsBase_p_p($this->_fieldsBase_p_p);
	}

	public function rewind() {
		$this->_position = 0;
	}

	public function valid() {
		return $this->_position < $this->_count;
	}

	public function current() {
		Recordset_getRow($this->_recordset_cPtr, $this->_position, $this->_fieldsBase_p_p);
		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
		return $this->_record;
	}

	public function key() {
		return $this->_position;
	}

	public function next() {
		$this->_position++;
	}

	public function seek($position) {
		if ($position < 0 || $position >= $this->_count) {
			throw new \OutOfBoundsException("invalid seek position ($position)");
		}
		$this->_position = $position;
	}
}

class Recordset implements \ArrayAccess, \Countable, \IteratorAggregate {
	private $_fieldsBase_p_p = null;
	private $_record = null;

	function __destruct() {
		transactd::delete_fieldsBase_p_p($this->_fieldsBase_p_p);
	}

	// IteratorAggregate
	public function getIterator() {
		return new RecordsetIterator($this->_cPtr, $this->fieldDefs());
	}

	// ArrayAccess
	public function offsetExists($offset) {
		return \gettype($offset) !== 'integer' && $offset >= 0 && $offset < $this->count();
	}

	public function offsetGet($offset) {
		Recordset_getRow($this->_cPtr, $offset, $this->_fieldsBase_p_p);
		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
		return $this->_record;
	}

	public function offsetSet($offset, $value) {
		throw new \BadMethodCallException();
	}

	public function offsetUnset($offset) {
		throw new \BadMethodCallException();
	}

	// random access
	function first() {
		if ($this->count() <= 0) {
			throw new \OutOfBoundsException('no records in recordset');
		}
		return $this->offsetGet(0);
	}

	function last() {
		if ($this->count() <= 0) {
			throw new \OutOfBoundsException('no records in recordset');
		}
		return $this->offsetGet($this->count() - 1);
	}

	// Generator
	function range($start = null, $end = null) {
		$count = $this->count();
		if (\gettype($start) !== 'integer' || $start < 0) {
			$i = 0;
		} else {
			$i = $start;
		}
		if (\gettype($end) !== 'integer' || $end < 0 || $end >= $count) {
			$end = $count - 1;
		}
		while ($i <= $end) {
			Recordset_getRow($this->_cPtr, $i, $this->_fieldsBase_p_p);
			$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
			yield $this->_record;
			$i++;
		}
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __clone() {
		$r=Recordset___clone($this->_cPtr);
		if (is_resource($r)) {
			$this->_cPtr = $r;
		} else {
			$this->_cPtr = $r->_cPtr;
		}
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
	}

	function getRecord($index) {
		return offsetGet($index);
	}

	function size() {
		return Recordset_size($this->_cPtr);
	}

	function count() {
		return Recordset_count($this->_cPtr);
	}

	function clearRecords() {
		Recordset_clearRecords($this->_cPtr);
	}

	function fieldDefs() {
		$r=Recordset_fieldDefs($this->_cPtr);
		if (is_resource($r)) {
			return new fielddefs($r);
		}
		return $r;
	}

	function clear() {
		Recordset_clear($this->_cPtr);
	}

	function top($c_,$n) {
		$r=Recordset_top($this->_cPtr,$c_,$n);
		if (is_resource($r)) {
			return new Recordset($r);
		}
		return $r;
	}

	function begin() {
		return Recordset_begin($this->_cPtr);
	}

	function end() {
		return Recordset_end($this->_cPtr);
	}

	function erase($index_or_it) {
		return Recordset_erase($this->_cPtr,$index_or_it);
	}

	function removeField($index) {
		Recordset_removeField($this->_cPtr,$index);
	}

	function matchBy($rq) {
		Recordset_matchBy($this->_cPtr,$rq);
		return $this;
	}

	function groupBy($gq) {
		Recordset_groupBy($this->_cPtr,$gq);
		return $this;
	}

	function orderBy($name1_or_orders,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
		if (Recordset_size($this->_cPtr) < 2) return $this;
		Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
		return $this;
	}

	function reverse() {
		Recordset_reverse($this->_cPtr);
		return $this;
	}

	function appendField($name,$type,$len) {
		Recordset_appendField($this->_cPtr,$name,$type,$len);
	}

	function unionRecordset($r_) {
		Recordset_unionRecordset($this->_cPtr,$r_);
		return $this;
	}

	function getRow($index,$return_record) {
		Recordset_getRow($this->_cPtr,$index,$return_record);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordset') {
			$this->_cPtr=$res;
			$this->_fieldsBase_p_p = new_fieldsBase_p_p();
			$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
			return;
		}
		$this->_cPtr=new_Recordset();
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
	}
}

class preparedQuery {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($filter) {
		if (is_resource($filter) && get_resource_type($filter) === '_p_bzs__db__protocol__tdap__client__preparedQuery') {
			$this->_cPtr=$filter;
			return;
		}
		$this->_cPtr=new_preparedQuery($filter);
	}

	function supplyValue($index,$v) {
		return preparedQuery_supplyValue($this->_cPtr,$index,$v);
	}

	function addValue($v) {
		return preparedQuery_addValue($this->_cPtr,$v);
	}

	function resetAddIndex() {
		preparedQuery_resetAddIndex($this->_cPtr);
	}
}

class activeTable {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function alias($src,$dst) {
		activeTable_alias($this->_cPtr,$src,$dst);
		return $this;
	}

	function resetAlias() {
		activeTable_resetAlias($this->_cPtr);
		return $this;
	}

	function getWritableRecord() {
		$r=activeTable_getWritableRecord($this->_cPtr);
		if (is_resource($r)) {
			return new writableRecord($r);
		}
		return $r;
	}

	function index($v) {
		activeTable_index($this->_cPtr,$v);
		return $this;
	}

	function option($v) {
		activeTable_option($this->_cPtr,$v);
		return $this;
	}

	function read($q, $v0=null, $v1=null, $v2=null, $v3=null, $v4=null, $v5=null, $v6=null, $v7=null) {
		$r=activeTable_read($this->_cPtr,$q, $v0, $v1, $v2, $v3, $v4, $v5, $v6, $v7);
		if (is_resource($r)) {
			return new Recordset($r);
		}
		return $r;
	}

	function readMore() {
		$r = activeTable_readMore($this->_cPtr);
		if (is_resource($r)) {
			return new Recordset($r);
		}
		return $r;
	}

	function prepare($q,$serverPrepare=false) {
		$r=activeTable_prepare($this->_cPtr,$q,$serverPrepare);
		if (is_resource($r)) {
			return new preparedQuery($r);
		}
		return $r;
	}

	function join($rs,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
		activeTable_join($this->_cPtr,$rs,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
		return $rs;
	}

	function outerJoin($rs,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
		activeTable_outerJoin($this->_cPtr,$rs,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
		return $rs;
	}

	function __construct($mgr_or_db,$tableName=null) {
		if (is_resource($mgr_or_db) && get_resource_type($mgr_or_db) === '_p_bzs__db__protocol__tdap__client__activeTable') {
			$this->_cPtr=$mgr_or_db;
			return;
		}
		$this->_cPtr=new_activeTable($mgr_or_db,$tableName);
	}

	function release() {
		activeTable_release($this->_cPtr);
	}

	function table() {
		$r=activeTable_table($this->_cPtr);
		if (is_resource($r)) {
			return new table($r);
		}
		return $r;
	}

	function keyValue($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
		activeTable_keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
		return $this;
	}
}

class pooledDbManager {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($param=null) {
		if (is_resource($param) && get_resource_type($param) === '_p_bzs__db__protocol__tdap__client__pooledDbManager') {
			$this->_cPtr=$param;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_pooledDbManager(); break;
		default: $this->_cPtr=new_pooledDbManager($param);
		}
	}

	function c_use($param=null) {
		pooledDbManager_c_use($this->_cPtr,$param);
	}

	function unUse() {
		pooledDbManager_unUse($this->_cPtr);
	}

	function reset($v) {
		pooledDbManager_reset($this->_cPtr,$v);
	}

	function db() {
		$r=pooledDbManager_db($this->_cPtr);
		if (is_resource($r)) {
			return new database($r);
		}
		return $r;
	}

	function uri() {
		return pooledDbManager_uri($this->_cPtr);
	}

	function mode() {
		return pooledDbManager_mode($this->_cPtr);
	}

	function isOpened() {
		return pooledDbManager_isOpened($this->_cPtr);
	}

	function setOption($v) {
		pooledDbManager_setOption($this->_cPtr,$v);
	}

	function option() {
		return pooledDbManager_option($this->_cPtr);
	}

	function beginTrn($bias) {
		pooledDbManager_beginTrn($this->_cPtr,$bias);
	}

	function endTrn() {
		pooledDbManager_endTrn($this->_cPtr);
	}

	function abortTrn() {
		pooledDbManager_abortTrn($this->_cPtr);
	}

	function enableTrn() {
		return pooledDbManager_enableTrn($this->_cPtr);
	}

	function beginSnapshot($bias=CONSISTENT_READ) {
		pooledDbManager_beginSnapshot($this->_cPtr,$bias);
	}

	function endSnapshot() {
		pooledDbManager_endSnapshot($this->_cPtr);
	}

	function stat() {
		return pooledDbManager_stat($this->_cPtr);
	}

	function clientID() {
		return pooledDbManager_clientID($this->_cPtr);
	}

	static function setMaxConnections($maxWorkerNum) {
		pooledDbManager_setMaxConnections($maxWorkerNum);
	}

	static function maxConnections() {
		return pooledDbManager_maxConnections();
	}

	static function reserve($size,$param) {
		pooledDbManager_reserve($size,$param);
	}

	function table($name) {
		$r=pooledDbManager_table($this->_cPtr,$name);
		if (is_resource($r)) {
			return new table($r);
		}
		return $r;
	}

	function usingCount() {
		return pooledDbManager_usingCount($this->_cPtr);
	}

}


?>
