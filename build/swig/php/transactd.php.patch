diff --git transactd.php transactd.php
index f7e81dc..5d6affd 100644
--- transactd.php
+++ transactd.php
@@ -1,4 +1,5 @@
 <?php
+namespace BizStation\Transactd;
 
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
@@ -802,7 +803,10 @@ abstract class transactd {
 	}
 
 	static function c_str($d,$type_vb=false) {
-		$r=c_str($d,$type_vb);
+		switch (func_num_args()) {
+		case 1: $r=c_str($d); break;
+		default: $r=c_str($d,$type_vb);
+		}
 		return $r;
 	}
 
@@ -2085,6 +2089,7 @@ class queryBase {
 
 	function reset() {
 		queryBase_reset($this->_cPtr);
+		return $this;
 	}
 
 	function clearSeekKeyValues() {
@@ -2484,6 +2489,15 @@ class nsdatabase {
 }
 
 class database extends nsdatabase {
+	function __clone() {
+		$r=database_c_clone($this->_cPtr);
+		if (is_resource($r)) {
+			$this->_cPtr = $r;
+		} else {
+			$this->_cPtr = $r->_cPtr;
+		}
+	}
+	
 	public $_cPtr=null;
 
 	function __set($var,$value) {
@@ -2887,6 +2901,15 @@ class bdate {
 }
 
 class fielddefs {
+	function __clone() {
+		$r=fielddefs_c_clone($this->_cPtr);
+		if (is_resource($r)) {
+			$this->_cPtr = $r;
+		} else {
+			$this->_cPtr = $r->_cPtr;
+		}
+	}
+	
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -2956,6 +2979,51 @@ class fielddefs {
 }
 
 class field {
+	public function getFV() {
+		switch ($this->type()) {
+			case transactd::ft_integer:
+			case transactd::ft_uinteger:
+			case transactd::ft_autoinc:
+			case transactd::ft_autoIncUnsigned:
+			case transactd::ft_logical:
+			case transactd::ft_bit:
+				return $this->i64();
+			case transactd::ft_float:
+			case transactd::ft_decimal:
+			case transactd::ft_money:
+			case transactd::ft_numeric:
+			case transactd::ft_bfloat:
+			case transactd::ft_numericsts:
+			case transactd::ft_numericsa:
+			case transactd::ft_currency:
+				return $this->d();
+			case transactd::ft_mychar:
+			case transactd::ft_myvarchar:
+			case transactd::ft_mywchar:
+			case transactd::ft_mywvarchar:
+			case transactd::ft_mytext:
+			case transactd::ft_mydate:
+			case transactd::ft_mytime:
+			case transactd::ft_mydatetime:
+			case transactd::ft_mytimestamp:
+			case transactd::ft_date:
+			case transactd::ft_time:
+			case transactd::ft_datetime:
+			case transactd::ft_timestamp:
+			case transactd::ft_note:
+			case transactd::ft_zstring:
+				return $this->c_str();
+			case transactd::ft_string:
+			case transactd::ft_myvarbinary:
+			case transactd::ft_mywvarbinary:
+			case transactd::ft_myblob:
+				return $this->getBin();
+			default:
+				return $this->c_str();
+		}
+		return null;
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -3047,7 +3115,141 @@ class field {
 	}
 }
 
-abstract class Record {
+class RecordIterator implements \Iterator {
+	private $_record_cPtr = null;
+	private $_position = 0;
+	private $_count = -1;
+	private $_field = null;
+	private $_fielddefs = null;
+
+	function __construct($record_cPtr, $fielddefs) {
+		$this->_record_cPtr = $record_cPtr;
+		$this->_position = 0;
+		$this->_count = Record_size($record_cPtr);
+		$this->_fielddefs = $fielddefs;
+		$this->_field = new field();
+	}
+
+	public function rewind() {
+		$this->_position = 0;
+	}
+
+	public function valid() {
+		return $this->_position < $this->_count;
+	}
+
+	public function current() {
+		Record_getFieldByIndexRef($this->_record_cPtr, $this->_position, $this->_field);
+		return $this->_field->getFV();
+	}
+
+	public function key() {
+		return $this->_fielddefs->getFielddef($this->_position)->nameA();
+	}
+
+	public function next() {
+		$this->_position++;
+	}
+}
+
+class Record implements \ArrayAccess, \Countable, \IteratorAggregate {
+	protected $_field = null;
+	protected $_fielddefs = null;
+
+	function __clone() {
+		$this->_field = new field();
+	}
+
+	// IteratorAggregate
+	public function getIterator() {
+		return new RecordIterator($this->_cPtr, $this->_fielddefs);
+	}
+
+	// ArrayAccess
+	public function offsetExists($offset) {
+		switch (\gettype($offset)) {
+			case "integer":
+				return $offset >= 0 && $offset < $this->count();
+			case "string":
+				return Record_indexByName($this->_cPtr, $offset) >= 0;
+			default:
+				return false;
+		}
+	}
+
+	public function offsetGet($offset) {
+		switch (\gettype($offset)) {
+			case "integer":
+				Record_getFieldByIndexRef($this->_cPtr, $offset, $this->_field);
+				break;
+			case "string":
+				Record_getFieldByNameRef($this->_cPtr, $offset, $this->_field);
+				break;
+			default:
+				throw new \OutOfRangeException();
+		}
+		return $this->_field->getFV();
+	}
+
+	public function offsetSet($offset, $value) {
+		throw new \BadMethodCallException();
+	}
+
+	public function offsetUnset($offset) {
+		throw new \BadMethodCallException();
+	}
+
+	// Countable
+	public function count() {
+		return Record_size($this->_cPtr);
+	}
+
+	// generator
+	function keys() {
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			yield $this->_fielddefs->getFielddef($i)->nameA();
+		}
+	}
+
+	function values() {
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
+			yield $this->_field->getFV();
+		}
+	}
+
+	// toArray
+	function keysArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			$ret[] = $this->_fielddefs->getFielddef($i)->nameA();
+		}
+		return $ret;
+	}
+
+	function valuesArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
+			$ret[] = $this->_field->getFV();
+		}
+		return $ret;
+	}
+
+	function toArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
+			$ret[$this->_fielddefs->getFielddef($i)->nameA()] = $this->_field->getFV();
+		}
+		return $ret;
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -3067,6 +3269,8 @@ abstract class Record {
 	}
 	function __construct($h) {
 		$this->_cPtr=$h;
+		$this->_fielddefs = $this->fieldDefs();
+		$this->_field = new field();
 	}
 
 	function setInvalidRecord($v) {
@@ -3160,6 +3364,7 @@ class memoryRecord extends Record {
 		return Record::__get($var);
 	}
 	function __construct($h) {
+		parent::__construct($h);
 		$this->_cPtr=$h;
 	}
 
@@ -3179,6 +3384,21 @@ class memoryRecord extends Record {
 }
 
 class writableRecord extends memoryRecord {
+	// override ArrayAccess method (set value).
+	public function offsetSet($offset, $value) {
+		$this->offsetGet($offset);
+		switch ($this->_field->type()) {
+			case transactd::ft_string:
+			case transactd::ft_myvarbinary:
+			case transactd::ft_mywvarbinary:
+			case transactd::ft_myblob:
+				$this->_field->setFV($value, strlen($value));
+				break;
+			default:
+				$this->_field->setFV($value);
+		}
+	}
+
 	public $_cPtr=null;
 
 	function __set($var,$value) {
@@ -3196,6 +3416,7 @@ class writableRecord extends memoryRecord {
 		return memoryRecord::__get($var);
 	}
 	function __construct($h) {
+		parent::__construct($h);
 		$this->_cPtr=$h;
 	}
 
@@ -3493,6 +3714,8 @@ class groupQuery {
 
 class sum extends groupFuncBase {
 	public $_cPtr=null;
+	private $targetName;
+	private $resultName;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3514,15 +3737,18 @@ class sum extends groupFuncBase {
 			$this->_cPtr=$targetName;
 			return;
 		}
+		$this->targetName = $targetName;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_sum($targetName); break;
-		default: $this->_cPtr=new_sum($targetName,$resultName,$query);
+		case 1: $this->_cPtr=new_sum($this->targetName); break;
+		default: $this->_cPtr=new_sum($this->targetName,$this->resultName,$query);
 		}
 	}
 }
 
 class count extends groupFuncBase {
 	public $_cPtr=null;
+	private $resultName;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3544,12 +3770,15 @@ class count extends groupFuncBase {
 			$this->_cPtr=$resultName;
 			return;
 		}
-		$this->_cPtr=new_count($resultName,$query);
+		$this->resultName = $resultName;
+		$this->_cPtr=new_count($this->resultName,$query);
 	}
 }
 
 class avg extends sum {
 	public $_cPtr=null;
+	private $targetName;
+	private $resultName;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3571,15 +3800,19 @@ class avg extends sum {
 			$this->_cPtr=$targetName;
 			return;
 		}
+		$this->targetName = $targetName;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_avg($targetName); break;
-		default: $this->_cPtr=new_avg($targetName,$resultName,$query);
+		case 1: $this->_cPtr=new_avg($this->targetName); break;
+		default: $this->_cPtr=new_avg($this->targetName,$this->resultName,$query);
 		}
 	}
 }
 
 class min extends sum {
 	public $_cPtr=null;
+	private $targetName;
+	private $resultName;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3601,15 +3834,19 @@ class min extends sum {
 			$this->_cPtr=$targetName;
 			return;
 		}
+		$this->targetName = $targetName;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_min($targetName); break;
-		default: $this->_cPtr=new_min($targetName,$resultName,$query);
+		case 1: $this->_cPtr=new_min($this->targetName); break;
+		default: $this->_cPtr=new_min($this->targetName,$this->resultName,$query);
 		}
 	}
 }
 
 class max extends sum {
 	public $_cPtr=null;
+	private $targetName;
+	private $resultName;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3631,14 +3868,141 @@ class max extends sum {
 			$this->_cPtr=$targetName;
 			return;
 		}
+		$this->targetName = $targetName;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_max($targetName); break;
-		default: $this->_cPtr=new_max($targetName,$resultName,$query);
+		case 1: $this->_cPtr=new_max($this->targetName); break;
+		default: $this->_cPtr=new_max($this->targetName,$this->resultName,$query);
+		}
+	}
+}
+
+class RecordSetIterator implements \SeekableIterator {
+	private $_recordset_cPtr = null;
+	private $_position = 0;
+	private $_fieldsBase_p_p = null;
+	private $_record = null;
+	private $_count = -1;
+
+	function __construct($recordset_cPtr, $fielddefs) {
+		$this->_recordset_cPtr = $recordset_cPtr;
+		$this->_position = 0;
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_count = RecordSet_count($recordset_cPtr);
+		$this->_record = new Record(memoryRecord::createRecord($fielddefs));
+	}
+
+	function __destruct() {
+		delete_fieldsBase_p_p($this->_fieldsBase_p_p);
+	}
+
+	public function rewind() {
+		$this->_position = 0;
+	}
+
+	public function valid() {
+		return $this->_position < $this->_count;
+	}
+
+	public function current() {
+		RecordSet_getRow($this->_recordset_cPtr, $this->_position, $this->_fieldsBase_p_p);
+		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+		return $this->_record;
+	}
+
+	public function key() {
+		return $this->_position;
+	}
+
+	public function next() {
+		$this->_position++;
+	}
+
+	public function seek($position) {
+		if ($position < 0 || $position >= $this->_count) {
+			throw new \OutOfBoundsException("invalid seek position ($position)");
 		}
+		$this->_position = $position;
 	}
 }
 
-class RecordSet {
+class RecordSet implements \ArrayAccess, \Countable, \IteratorAggregate {
+	private $_fieldsBase_p_p = null;
+	private $_record = null;
+
+	function __clone() {
+		$r=RecordSet_c_clone($this->_cPtr);
+		if (is_resource($r)) {
+			$this->_cPtr = $r;
+		} else {
+			$this->_cPtr = $r->_cPtr;
+		}
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
+	}
+
+	function __destruct() {
+		transactd::delete_fieldsBase_p_p($this->_fieldsBase_p_p);
+	}
+
+	// IteratorAggregate
+	public function getIterator() {
+		return new RecordSetIterator($this->_cPtr, $this->fieldDefs());
+	}
+
+	// ArrayAccess
+	public function offsetExists($offset) {
+		return \gettype($offset) !== 'integer' && $offset >= 0 && $offset < $this->count();
+	}
+
+	public function offsetGet($offset) {
+		RecordSet_getRow($this->_cPtr, $offset, $this->_fieldsBase_p_p);
+		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+		return $this->_record;
+	}
+
+	public function offsetSet($offset, $value) {
+		throw new \BadMethodCallException();
+	}
+
+	public function offsetUnset($offset) {
+		throw new \BadMethodCallException();
+	}
+
+	// random access
+	function first() {
+		if ($this->count() <= 0) {
+			throw new \OutOfBoundsException('no records in recordset');
+		}
+		return $this->offsetGet(0);
+	}
+
+	function last() {
+		if ($this->count() <= 0) {
+			throw new \OutOfBoundsException('no records in recordset');
+		}
+		return $this->offsetGet($this->count() - 1);
+	}
+
+	// generator
+	function range($start = null, $end = null) {
+		$count = $this->count();
+		if (\gettype($start) !== 'integer' || $start < 0) {
+			$i = 0;
+		} else {
+			$i = $start;
+		}
+		if (\gettype($end) !== 'integer' || $end < 0 || $end >= $count) {
+			$end = $count - 1;
+		}
+		while ($i <= $end) {
+			RecordSet_getRow($this->_cPtr, $i, $this->_fieldsBase_p_p);
+			$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+			yield $this->_record;
+			$i++;
+		}
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -3660,9 +4024,13 @@ class RecordSet {
 	function __construct($res=null) {
 		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordset') {
 			$this->_cPtr=$res;
+			$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+			$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
 			return;
 		}
 		$this->_cPtr=new_RecordSet();
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
 	}
 
 	function c_clone() {
@@ -3927,6 +4295,26 @@ abstract class idatabaseManager {
 }
 
 class activeTable {
+	function keyValue($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
+		$args = \func_get_args();
+		$params = array();
+		$end_args = false;
+		for ($i = 0; $i < \func_num_args(); $i++) {
+			switch (\gettype($args[$i])) {
+				case 'string':
+					$params[] = $args[$i]; break;
+				case 'NULL':
+					$end_args = true; break;
+				default:
+					$params[] = (string) $args[$i]; break;
+			}
+			if ($end_args) {
+				break;
+			}
+		}
+		return call_user_func_array(array($this, '_keyValue'), $params);
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -3945,7 +4333,7 @@ class activeTable {
 		return $this->_pData[$var];
 	}
 
-	function __construct($mgr_or_db,$tableName) {
+	function __construct($mgr_or_db,$tableName = NULL) {
 		if (is_resource($mgr_or_db) && get_resource_type($mgr_or_db) === '_p_bzs__db__protocol__tdap__client__activeTable') {
 			$this->_cPtr=$mgr_or_db;
 			return;
