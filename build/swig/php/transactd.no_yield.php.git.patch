diff --git b/transactd.no_yield.php a/transactd.no_yield.php
index b706c06..0331cee 100644
--- b/transactd.no_yield.php
+++ a/transactd.no_yield.php
@@ -1,4 +1,9 @@
 <?php
+//
+//  Transactd Client for PHP
+//      ( NO-YIELD-VERSION : for PHP 5.4.x or older )
+//
+namespace BizStation\Transactd;
 
 /* ----------------------------------------------------------------------------
  * This file was automatically generated by SWIG (http://www.swig.org).
@@ -676,8 +681,6 @@ abstract class transactd {
 	static function atobtrd($date) {
 		$r=atobtrd($date);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new btrDate($r);
 		}
 		return $r;
@@ -686,8 +689,6 @@ abstract class transactd {
 	static function atobtrt($p) {
 		$r=atobtrt($p);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new btrTime($r);
 		}
 		return $r;
@@ -710,8 +711,6 @@ abstract class transactd {
 	static function atobtrs($p) {
 		$r=atobtrs($p);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new btrDateTime($r);
 		}
 		return $r;
@@ -796,6 +795,8 @@ class trdVersiton {
 	}
 }
 
+
+// TODO Is this class true ? Not used $this->_cPtr.
 class FLAGS {
 	public $_cPtr=null;
 	protected $_pData=array();
@@ -890,8 +891,6 @@ class keydef {
 	function segment($index) {
 		$r=keydef_segment($this->_cPtr,$index);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new keySegment($r);
 		}
 		return $r;
@@ -1081,8 +1080,6 @@ class tabledef {
 	function fieldDef($index) {
 		$r=tabledef_fieldDef($this->_cPtr,$index);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fielddef($r);
 		}
 		return $r;
@@ -1091,8 +1088,6 @@ class tabledef {
 	function keyDef($index) {
 		$r=tabledef_keyDef($this->_cPtr,$index);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new keydef($r);
 		}
 		return $r;
@@ -1165,8 +1160,6 @@ class btrVersions {
 	function version($index) {
 		$r=btrVersions_version($this->_cPtr,$index);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new btrVersion($r);
 		}
 		return $r;
@@ -1199,6 +1192,7 @@ abstract class nstable {
 		if ($var === 'thisown') return true;
 		return array_key_exists($var, $this->_pData);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -1218,8 +1212,6 @@ abstract class nstable {
 	function nsdb() {
 		$r=nstable_nsdb($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new nsdatabase($r);
 		}
 		return $r;
@@ -1463,6 +1455,7 @@ class dbdef {
 		if ($var === 'thisown') return true;
 		return array_key_exists($var, $this->_pData);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -1478,8 +1471,6 @@ class dbdef {
 	function tableDefs($index) {
 		$r=dbdef_tableDefs($this->_cPtr,$index);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new tabledef($r);
 		}
 		return $r;
@@ -1508,8 +1499,6 @@ class dbdef {
 	function insertField($tableIndex,$insertIndex) {
 		$r=dbdef_insertField($this->_cPtr,$tableIndex,$insertIndex);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fielddef($r);
 		}
 		return $r;
@@ -1522,8 +1511,6 @@ class dbdef {
 	function insertKey($tableIndex,$insertIndex) {
 		$r=dbdef_insertKey($this->_cPtr,$tableIndex,$insertIndex);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new keydef($r);
 		}
 		return $r;
@@ -1599,6 +1586,7 @@ class table extends nstable {
 		if ($var === 'thisown') return true;
 		return nstable::__isset($var);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -1606,8 +1594,6 @@ class table extends nstable {
 	function tableDef() {
 		$r=table_tableDef($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new tabledef($r);
 		}
 		return $r;
@@ -1792,7 +1778,8 @@ class table extends nstable {
 	}
 }
 
-class queryBase {
+/* Added "abstract".  The querybase dose not use direct from PHP.*/
+abstract class queryBase {
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -1810,6 +1797,7 @@ class queryBase {
 		if ($var === 'thisown') return true;
 		return array_key_exists($var, $this->_pData);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -1841,72 +1829,38 @@ class queryBase {
 	}
 
 	function queryString($str,$autoEscape=false) {
-		$r=queryBase_queryString($this->_cPtr,$str,$autoEscape);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__queryBase': return new queryBase($r);
-		default: return new queryBase($r);
-		}
+		queryBase_queryString($this->_cPtr,$str,$autoEscape);
+		return $this;
 	}
 
 	function reject($v) {
-		$r=queryBase_reject($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_reject($this->_cPtr,$v);
+		return $this;
 	}
 
 	function limit($v) {
-		$r=queryBase_limit($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_limit($this->_cPtr,$v);
+		return $this;
 	}
 
 	function direction($v) {
-		$r=queryBase_direction($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_direction($this->_cPtr,$v);
+		return $this;
 	}
 
 	function all() {
-		$r=queryBase_all($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_all($this->_cPtr);
+		return $this;
 	}
 
 	function optimize($v) {
-		$r=queryBase_optimize($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_optimize($this->_cPtr,$v);
+		return $this;
 	}
 
 	function bookmarkAlso($v) {
-		$r=queryBase_bookmarkAlso($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new queryBase($r);
-		}
-		return $r;
+		queryBase_bookmarkAlso($this->_cPtr,$v);
+		return $this;
 	}
 
 	function toString() {
@@ -1985,34 +1939,13 @@ class query extends queryBase {
 	}
 
 	function reset() {
-		$r=query_reset($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new query($r);
-		}
-		return $r;
+		query_reset($this->_cPtr);
+		return $this;
 	}
 
 	function select($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
-		switch (func_num_args()) {
-		case 1: $r=query_select($this->_cPtr,$name); break;
-		case 2: $r=query_select($this->_cPtr,$name,$name1); break;
-		case 3: $r=query_select($this->_cPtr,$name,$name1,$name2); break;
-		case 4: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3); break;
-		case 5: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4); break;
-		case 6: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5); break;
-		case 7: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6); break;
-		case 8: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
-		case 9: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8); break;
-		case 10: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9); break;
-		default: $r=query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
-		}
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__query': return new query($r);
-		default: return new query($r);
-		}
+		query_select($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
+		return $this;
 	}
 
 	function __construct($res=null) {
@@ -2024,43 +1957,23 @@ class query extends queryBase {
 	}
 
 	function where($name,$qlogic,$value) {
-		$r=query_where($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new query($r);
-		}
-		return $r;
+		query_where($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 
 	function and_($name,$qlogic,$value) {
-		$r=query_and_($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new query($r);
-		}
-		return $r;
+		query_and_($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 
 	function or_($name,$qlogic,$value) {
-		$r=query_or_($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new query($r);
-		}
-		return $r;
+		query_or_($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 
-	function in($kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7) {
-		$r=query_in($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new query($r);
-		}
-		return $r;
+	function in($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
+		query_in($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
+		return $this;
 	}
 }
 
@@ -2248,8 +2161,6 @@ class database extends nsdatabase {
 	function dbDef() {
 		$r=database_dbDef($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new dbdef($r);
 		}
 		return $r;
@@ -2290,12 +2201,7 @@ class database extends nsdatabase {
 
 	function __clone() {
 		$r=database___clone($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new database($r);
-		}
-		return $r;
+		$this->__construct($r);
 	}
 
 	function create($uri,$type=0) {
@@ -2567,10 +2473,104 @@ class btrTimeStamp {
 	}
 }
 
-class fielddefs {
+abstract class RangeIterator implements \Iterator {
+	protected $_position = 0;
+	protected $_start = -1;
+	protected $_end = -1;
+
+	function __construct($start, $end) {
+		$this->_position = 0;
+		$this->_start = $start;
+		$this->_end = $end;
+	}
+
+	public function rewind() {
+		$this->_position = $this->_start;
+	}
+
+	public function valid() {
+		return $this->_position <= $this->_end;
+	}
+
+	abstract public function current();
+
+	public function key() {
+		return $this->_position;
+	}
+
+	public function next() {
+		$this->_position++;
+	}
+}
+
+class fielddefsIterator extends RangeIterator {
+	private $_fielddefs_ptr = NULL;
+
+	function __construct($fielddefs_ptr, $start, $end) {
+		$this->_fielddefs_ptr = $fielddefs_ptr;
+		parent::__construct($start, $end);
+	}
+
+	public function current() {
+		$r = fielddefs_getFielddef($this->_fielddefs_ptr,$this->_position);
+		if (is_resource($r))
+			return new fielddef($r);
+		return $r;
+	}
+}
+
+class fielddefs implements \ArrayAccess, \Countable, \IteratorAggregate {
 	public $_cPtr=null;
 	protected $_pData=array();
 
+	// IteratorAggregate
+	public function getIterator() {
+		return new fielddefsIterator($this->_cPtr, 0, (fielddefs_size($this->_cPtr) - 1));
+	}
+
+	// ArrayAccess
+	public function offsetExists($offset) {
+		return (\gettype($offset) === "integer" &&
+			$offset >= 0 && $offset < fielddefs_size($this->_cPtr));
+	}
+
+	public function offsetGet($offset) {
+		if (\gettype($offset) !== "integer" ||
+			$offset < 0 || $offset >= fielddefs_size($this->_cPtr))
+			throw new \OutOfRangeException();
+		$r = fielddefs_getFielddef($this->_cPtr,$offset);
+		if (is_resource($r))
+			return new fielddef($r);
+		return $r;
+	}
+
+	public function offsetSet($offset, $value) {
+		throw new \BadMethodCallException();
+	}
+
+	public function offsetUnset($offset) {
+		throw new \BadMethodCallException();
+	}
+
+	// Countable
+	public function count() {
+		return fielddefs_size($this->_cPtr);
+	}
+
+	// Emulation of Generator with Iterator
+	function range($start = null, $end = null) {
+		$count = fielddefs_size($this->_cPtr);
+		if ((! is_numeric($start)) || $start < 0) {
+			$start = 0;
+		}
+		if ((! is_numeric($end)) || $end < 0 || $end >= $count) {
+			$end = $count - 1;
+		}
+		$start = (int) $start;
+		$end = (int) $end;
+		return new fielddefsIterator($this->_cPtr, $start, $end);
+	}
+
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
 		$this->_pData[$var] = $value;
@@ -2588,12 +2588,7 @@ class fielddefs {
 
 	function __clone() {
 		$r=fielddefs___clone($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new fielddefs($r);
-		}
-		return $r;
+		$this->__construct($r);
 	}
 
 	function indexByName($name) {
@@ -2602,11 +2597,10 @@ class fielddefs {
 
 	function getFielddef($index_or_name) {
 		$r=fielddefs_getFielddef($this->_cPtr,$index_or_name);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__fielddef': return new fielddef($r);
-		default: return new fielddef($r);
+		if (is_resource($r)) {
+			return new fielddef($r);
 		}
+		return $r;
 	}
 
 	function checkIndex($index) {
@@ -2627,6 +2621,51 @@ class fielddefs {
 }
 
 class field {
+	public function getFV() {
+		switch ($this->type()) {
+			case transactd::ft_integer:
+			case transactd::ft_uinteger:
+			case transactd::ft_autoinc:
+			case transactd::ft_autoIncUnsigned:
+			case transactd::ft_logical:
+			case transactd::ft_bit:
+				return field_i64($this->_cPtr);
+			case transactd::ft_float:
+			case transactd::ft_decimal:
+			case transactd::ft_money:
+			case transactd::ft_numeric:
+			case transactd::ft_bfloat:
+			case transactd::ft_numericsts:
+			case transactd::ft_numericsa:
+			case transactd::ft_currency:
+				return field_d($this->_cPtr);
+			case transactd::ft_mychar:
+			case transactd::ft_myvarchar:
+			case transactd::ft_mywchar:
+			case transactd::ft_mywvarchar:
+			case transactd::ft_mytext:
+			case transactd::ft_mydate:
+			case transactd::ft_mytime:
+			case transactd::ft_mydatetime:
+			case transactd::ft_mytimestamp:
+			case transactd::ft_date:
+			case transactd::ft_time:
+			case transactd::ft_datetime:
+			case transactd::ft_timestamp:
+			case transactd::ft_note:
+			case transactd::ft_zstring:
+				return field_c_str($this->_cPtr);
+			case transactd::ft_string:
+			case transactd::ft_myvarbinary:
+			case transactd::ft_mywvarbinary:
+			case transactd::ft_myblob:
+				return field_getBin($this->_cPtr);
+			default:
+				return field_c_str($this->_cPtr);
+		}
+		return null;
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -2666,38 +2705,6 @@ class field {
 		return field_len($this->_cPtr);
 	}
 
-	function c_str() {
-		return field_c_str($this->_cPtr);
-	}
-
-	function a_str() {
-		return field_a_str($this->_cPtr);
-	}
-
-	function i() {
-		return field_i($this->_cPtr);
-	}
-
-	function i8() {
-		return field_i8($this->_cPtr);
-	}
-
-	function i16() {
-		return field_i16($this->_cPtr);
-	}
-
-	function i64() {
-		return field_i64($this->_cPtr);
-	}
-
-	function f() {
-		return field_f($this->_cPtr);
-	}
-
-	function d() {
-		return field_d($this->_cPtr);
-	}
-
 	function setFV($p_or_v_or_data,$size=null) {
 		switch (func_num_args()) {
 		case 1: $r=field_setFV($this->_cPtr,$p_or_v_or_data); break;
@@ -2733,6 +2740,7 @@ abstract class refarymem {
 		if ($var === 'thisown') return true;
 		return array_key_exists($var, $this->_pData);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -2754,7 +2762,163 @@ abstract class refarymem {
 	}
 }
 
-abstract class Record extends refarymem {
+class RecordIterator implements \Iterator {
+	private $_record_cPtr = null;
+	private $_position = 0;
+	private $_count = -1;
+	private $_field = null;
+	private $_fielddefs = null;
+
+	function __construct($record_cPtr, $fielddefs) {
+		$this->_record_cPtr = $record_cPtr;
+		$this->_position = 0;
+		$this->_count = Record_size($record_cPtr);
+		$this->_fielddefs = $fielddefs;
+		$this->_field = new field();
+	}
+
+	public function rewind() {
+		$this->_position = 0;
+	}
+
+	public function valid() {
+		return $this->_position < $this->_count;
+	}
+
+	public function current() {
+		Record_getFieldByIndexRef($this->_record_cPtr, $this->_position, $this->_field);
+		return $this->_field->getFV();
+	}
+
+	public function key() {
+		return $this->_fielddefs->getFielddef($this->_position)->name();
+	}
+
+	public function next() {
+		$this->_position++;
+	}
+}
+
+class RecordKeyIterator extends RangeIterator {
+	private $_fielddefs = null;
+
+	function __construct($count, $fielddefs) {
+		parent::__construct(0, $count - 1);
+		$this->_fielddefs = $fielddefs;
+	}
+
+	public function current() {
+		return $this->_fielddefs->getFielddef($this->_position)->name();
+	}
+}
+
+class RecordValueIterator extends RangeIterator {
+	private $_record_cPtr = null;
+	private $_field = null;
+
+	function __construct($record_cPtr) {
+		parent::__construct(0, Record_size($record_cPtr) - 1);
+		$this->_record_cPtr = $record_cPtr;
+		$this->_field = new field();
+	}
+
+	public function current() {
+		Record_getFieldByIndexRef($this->_record_cPtr, $this->_position, $this->_field);
+		return $this->_field->getFV();
+	}
+}
+
+class Record extends refarymem implements \ArrayAccess, \Countable, \IteratorAggregate {
+	protected $_field = null;
+	protected $_fielddefs = null;
+
+	function __clone() {
+		$this->_field = new field();
+	}
+
+	// IteratorAggregate
+	public function getIterator() {
+		return new RecordIterator($this->_cPtr, $this->_fielddefs);
+	}
+
+	// ArrayAccess
+	public function offsetExists($offset) {
+		switch (\gettype($offset)) {
+			case "integer":
+				return $offset >= 0 && $offset < $this->count();
+			case "string":
+				return Record_indexByName($this->_cPtr, $offset) >= 0;
+			default:
+				return false;
+		}
+	}
+
+	public function offsetGet($offset) {
+		switch (\gettype($offset)) {
+			case "integer":
+				Record_getFieldByIndexRef($this->_cPtr, $offset, $this->_field);
+				break;
+			case "string":
+				Record_getFieldByNameRef($this->_cPtr, $offset, $this->_field);
+				break;
+			default:
+				throw new \OutOfRangeException();
+		}
+		return $this->_field->getFV();
+	}
+
+	public function offsetSet($offset, $value) {
+		throw new \BadMethodCallException();
+	}
+
+	public function offsetUnset($offset) {
+		throw new \BadMethodCallException();
+	}
+
+	// Countable
+	public function count() {
+		return Record_size($this->_cPtr);
+	}
+
+	// Emulation of Generator with Iterator
+	function keys() {
+		return new RecordKeyIterator(Record_size($this->_cPtr), $this->_fielddefs);
+	}
+
+	function values() {
+		return new RecordValueIterator($this->_cPtr);
+	}
+
+	// toArray
+	function keysArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			$ret[] = $this->_fielddefs->getFielddef($i)->name();
+		}
+		return $ret;
+	}
+
+	function valuesArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
+			$ret[] = $this->_field->getFV();
+		}
+		return $ret;
+	}
+
+	function toArray() {
+		$ret = array();
+		$count = Record_size($this->_cPtr);
+		for ($i = 0; $i < $count; $i++) {
+			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
+			$ret[$this->_fielddefs->getFielddef($i)->name()] = $this->_field->getFV();
+		}
+		return $ret;
+	}
+
 	public $_cPtr=null;
 
 	function __set($var,$value) {
@@ -2771,8 +2935,11 @@ abstract class Record extends refarymem {
 		if ($var === 'thisown') return true;
 		return refarymem::__isset($var);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
+		$this->_fielddefs = $this->fieldDefs();
+		$this->_field = new field();
 	}
 
 	function isInvalidRecord() {
@@ -2782,8 +2949,6 @@ abstract class Record extends refarymem {
 	function getField($index_or_name) {
 		$r=Record_getField($this->_cPtr,$index_or_name);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new field($r);
 		}
 		return $r;
@@ -2800,8 +2965,6 @@ abstract class Record extends refarymem {
 	function fieldDefs() {
 		$r=Record_fieldDefs($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fielddefs($r);
 		}
 		return $r;
@@ -2820,7 +2983,22 @@ abstract class Record extends refarymem {
 	}
 }
 
-class memoryRecord extends Record {
+class writableRecord extends Record {
+	// override ArrayAccess method (set value).
+	public function offsetSet($offset, $value) {
+		$this->offsetGet($offset);
+		switch ($this->_field->type()) {
+			case transactd::ft_string:
+			case transactd::ft_myvarbinary:
+			case transactd::ft_mywvarbinary:
+			case transactd::ft_myblob:
+				$this->_field->setFV($value, strlen($value));
+				break;
+			default:
+				$this->_field->setFV($value);
+		}
+	}
+
 	public $_cPtr=null;
 
 	function __set($var,$value) {
@@ -2838,44 +3016,10 @@ class memoryRecord extends Record {
 		return Record::__isset($var);
 	}
 
-	static function createRecord($fdinfo) {
-		$r=memoryRecord_createRecord($fdinfo);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new memoryRecord($r);
-		}
-		return $r;
-	}
-
-	function __construct($fds) {
-		if (is_resource($fds) && get_resource_type($fds) === '_p_bzs__db__protocol__tdap__client__memoryRecord') {
-			$this->_cPtr=$fds;
-			return;
-		}
-		$this->_cPtr=new_memoryRecord($fds);
-	}
-}
-
-class writableRecord extends memoryRecord {
-	public $_cPtr=null;
-
-	function __set($var,$value) {
-		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
-		memoryRecord::__set($var,$value);
-	}
-
-	function __get($var) {
-		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
-		return memoryRecord::__get($var);
-	}
-
-	function __isset($var) {
-		if ($var === 'thisown') return true;
-		return memoryRecord::__isset($var);
-	}
 	function __construct($h) {
 		$this->_cPtr=$h;
+		$this->_fielddefs = $this->fieldDefs();
+		$this->_field = new field();
 	}
 
 	function read($KeysetAlrady=false) {
@@ -2970,6 +3114,7 @@ abstract class idatabaseManager {
 		if ($var === 'thisown') return true;
 		return array_key_exists($var, $this->_pData);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -2985,8 +3130,6 @@ abstract class idatabaseManager {
 	function db() {
 		$r=idatabaseManager_db($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new database($r);
 		}
 		return $r;
@@ -3073,34 +3216,13 @@ class fieldNames {
 	}
 
 	function reset() {
-		$r=fieldNames_reset($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new fieldNames($r);
-		}
-		return $r;
+		fieldNames_reset($this->_cPtr);
+		return $this;
 	}
 
 	function keyField($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
-		switch (func_num_args()) {
-		case 1: $r=fieldNames_keyField($this->_cPtr,$name); break;
-		case 2: $r=fieldNames_keyField($this->_cPtr,$name,$name1); break;
-		case 3: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2); break;
-		case 4: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3); break;
-		case 5: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4); break;
-		case 6: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5); break;
-		case 7: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6); break;
-		case 8: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
-		case 9: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8); break;
-		case 10: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9); break;
-		default: $r=fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
-		}
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__fieldNames': return new fieldNames($r);
-		default: return new fieldNames($r);
-		}
+		fieldNames_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
+		return $this;
 	}
 
 	function count() {
@@ -3152,13 +3274,8 @@ class recordsetQuery {
 	}
 
 	function reset() {
-		$r=recordsetQuery_reset($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new recordsetQuery($r);
-		}
-		return $r;
+		recordsetQuery_reset($this->_cPtr);
+		return $this;
 	}
 
 	function toString() {
@@ -3174,38 +3291,24 @@ class recordsetQuery {
 	}
 
 	function when($name,$qlogic,$value) {
-		$r=recordsetQuery_when($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new recordsetQuery($r);
-		}
-		return $r;
+		recordsetQuery_when($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 
 	function and_($name,$qlogic,$value) {
-		$r=recordsetQuery_and_($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new recordsetQuery($r);
-		}
-		return $r;
+		recordsetQuery_and_($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 
 	function or_($name,$qlogic,$value) {
-		$r=recordsetQuery_or_($this->_cPtr,$name,$qlogic,$value);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new recordsetQuery($r);
-		}
-		return $r;
+		recordsetQuery_or_($this->_cPtr,$name,$qlogic,$value);
+		return $this;
 	}
 }
 
 abstract class groupFuncBase extends recordsetQuery {
 	public $_cPtr=null;
+	protected $resultName = '';
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3221,6 +3324,7 @@ abstract class groupFuncBase extends recordsetQuery {
 		if ($var === 'thisown') return true;
 		return recordsetQuery::__isset($var);
 	}
+
 	function __construct($h) {
 		$this->_cPtr=$h;
 	}
@@ -3228,8 +3332,6 @@ abstract class groupFuncBase extends recordsetQuery {
 	function targetNames() {
 		$r=groupFuncBase_targetNames($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fieldNames($r);
 		}
 		return $r;
@@ -3240,7 +3342,8 @@ abstract class groupFuncBase extends recordsetQuery {
 	}
 
 	function setResultName($v) {
-		groupFuncBase_setResultName($this->_cPtr,$v);
+		$this->resultName = $v;
+		groupFuncBase_setResultName($this->_cPtr,$this->resultName);
 	}
 
 	function resultKey() {
@@ -3282,51 +3385,23 @@ class groupQuery {
 	}
 
 	function reset() {
-		$r=groupQuery_reset($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new groupQuery($r);
-		}
-		return $r;
+		groupQuery_reset($this->_cPtr);
+		return $this;
 	}
 
 	function addFunction($func) {
-		$r=groupQuery_addFunction($this->_cPtr,$func);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new groupQuery($r);
-		}
-		return $r;
+		groupQuery_addFunction($this->_cPtr,$func);
+		return $this;
 	}
 
 	function keyField($name,$name1=null,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null) {
-		switch (func_num_args()) {
-		case 1: $r=groupQuery_keyField($this->_cPtr,$name); break;
-		case 2: $r=groupQuery_keyField($this->_cPtr,$name,$name1); break;
-		case 3: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2); break;
-		case 4: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3); break;
-		case 5: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4); break;
-		case 6: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5); break;
-		case 7: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6); break;
-		case 8: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
-		case 9: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8); break;
-		case 10: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9); break;
-		default: $r=groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
-		}
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__groupQuery': return new groupQuery($r);
-		default: return new groupQuery($r);
-		}
+		groupQuery_keyField($this->_cPtr,$name,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10);
+		return $this;
 	}
 
 	function getKeyFields() {
 		$r=groupQuery_getKeyFields($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fieldNames($r);
 		}
 		return $r;
@@ -3353,6 +3428,7 @@ class groupQuery {
 
 class sum extends groupFuncBase {
 	public $_cPtr=null;
+	protected $targetNames = null;
 
 	function __set($var,$value) {
 		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
@@ -3380,9 +3456,11 @@ class sum extends groupFuncBase {
 			$this->_cPtr=$targetNames;
 			return;
 		}
+		$this->targetNames = $targetNames;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_sum($targetNames); break;
-		default: $this->_cPtr=new_sum($targetNames,$resultName);
+		case 1: $this->_cPtr=new_sum($this->targetNames); break;
+		default: $this->_cPtr=new_sum($this->targetNames,$this->resultName);
 		}
 	}
 }
@@ -3416,7 +3494,8 @@ class count extends groupFuncBase {
 			$this->_cPtr=$resultName;
 			return;
 		}
-		$this->_cPtr=new_count($resultName);
+		$this->resultName = $resultName;
+		$this->_cPtr=new_count($this->resultName);
 	}
 }
 
@@ -3449,9 +3528,11 @@ class avg extends sum {
 			$this->_cPtr=$targetNames;
 			return;
 		}
+		$this->targetNames = $targetNames;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_avg($targetNames); break;
-		default: $this->_cPtr=new_avg($targetNames,$resultName);
+		case 1: $this->_cPtr=new_avg($this->targetNames); break;
+		default: $this->_cPtr=new_avg($this->targetNames,$this->resultName);
 		}
 	}
 }
@@ -3485,9 +3566,11 @@ class min extends sum {
 			$this->_cPtr=$targetNames;
 			return;
 		}
+		$this->targetNames = $targetNames;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_min($targetNames); break;
-		default: $this->_cPtr=new_min($targetNames,$resultName);
+		case 1: $this->_cPtr=new_min($this->targetNames); break;
+		default: $this->_cPtr=new_min($this->targetNames,$this->resultName);
 		}
 	}
 }
@@ -3521,14 +3604,148 @@ class max extends sum {
 			$this->_cPtr=$targetNames;
 			return;
 		}
+		$this->targetNames = $targetNames;
+		$this->resultName = $resultName;
 		switch (func_num_args()) {
-		case 1: $this->_cPtr=new_max($targetNames); break;
-		default: $this->_cPtr=new_max($targetNames,$resultName);
+		case 1: $this->_cPtr=new_max($this->targetNames); break;
+		default: $this->_cPtr=new_max($this->targetNames,$this->resultName);
 		}
 	}
 }
 
-class Recordset {
+class RecordsetIterator implements \SeekableIterator {
+	private $_recordset_cPtr = null;
+	private $_position = 0;
+	private $_fieldsBase_p_p = null;
+	private $_record = null;
+	private $_count = -1;
+
+	function __construct($recordset_cPtr, $fielddefs) {
+		$this->_recordset_cPtr = $recordset_cPtr;
+		$this->_position = 0;
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_count = Recordset_count($recordset_cPtr);
+		$this->_record = new Record(memoryRecord_createRecord($fielddefs));
+	}
+
+	function __destruct() {
+		delete_fieldsBase_p_p($this->_fieldsBase_p_p);
+	}
+
+	public function rewind() {
+		$this->_position = 0;
+	}
+
+	public function valid() {
+		return $this->_position < $this->_count;
+	}
+
+	public function current() {
+		Recordset_getRow($this->_recordset_cPtr, $this->_position, $this->_fieldsBase_p_p);
+		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+		return $this->_record;
+	}
+
+	public function key() {
+		return $this->_position;
+	}
+
+	public function next() {
+		$this->_position++;
+	}
+
+	public function seek($position) {
+		if ($position < 0 || $position >= $this->_count) {
+			throw new \OutOfBoundsException("invalid seek position ($position)");
+		}
+		$this->_position = $position;
+	}
+}
+
+class RecordsetRecordIterator extends RangeIterator {
+	private $_recordset_cPtr = null;
+	private $_fieldsBase_p_p = null;
+	private $_record = null;
+
+	function __construct($start, $end, $recordset_cPtr, $fielddefs) {
+		parent::__construct($start, $end);
+		$this->_recordset_cPtr = $recordset_cPtr;
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_record = new Record(memoryRecord::createRecord($fielddefs));
+	}
+
+	function __destruct() {
+		delete_fieldsBase_p_p($this->_fieldsBase_p_p);
+	}
+
+	public function current() {
+		Recordset_getRow($this->_recordset_cPtr, $this->_position, $this->_fieldsBase_p_p);
+		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+		return $this->_record;
+	}
+}
+
+class Recordset implements \ArrayAccess, \Countable, \IteratorAggregate {
+	private $_fieldsBase_p_p = null;
+	private $_record = null;
+
+	function __destruct() {
+		transactd::delete_fieldsBase_p_p($this->_fieldsBase_p_p);
+	}
+
+	// IteratorAggregate
+	public function getIterator() {
+		return new RecordsetIterator($this->_cPtr, $this->fieldDefs());
+	}
+
+	// ArrayAccess
+	public function offsetExists($offset) {
+		return \gettype($offset) !== 'integer' && $offset >= 0 && $offset < $this->count();
+	}
+
+	public function offsetGet($offset) {
+		Recordset_getRow($this->_cPtr, $offset, $this->_fieldsBase_p_p);
+		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
+		return $this->_record;
+	}
+
+	public function offsetSet($offset, $value) {
+		throw new \BadMethodCallException();
+	}
+
+	public function offsetUnset($offset) {
+		throw new \BadMethodCallException();
+	}
+
+	// random access
+	function first() {
+		if ($this->count() <= 0) {
+			throw new \OutOfBoundsException('no records in recordset');
+		}
+		return $this->offsetGet(0);
+	}
+
+	function last() {
+		if ($this->count() <= 0) {
+			throw new \OutOfBoundsException('no records in recordset');
+		}
+		return $this->offsetGet($this->count() - 1);
+	}
+
+	// Emulation of Generator with Iterator
+	function range($start = null, $end = null) {
+		$count = $this->count();
+		if ((! is_numeric($start)) || $start < 0) {
+			$start = 0;
+		}
+		if ((! is_numeric($end)) || $end < 0 || $end >= $count) {
+			$end = $count - 1;
+		}
+		$start = (int) $start;
+		$end = (int) $end;
+		return new RecordsetRecordIterator($start, $end, $this->_cPtr, $this->fieldDefs());
+	}
+
 	public $_cPtr=null;
 	protected $_pData=array();
 
@@ -3550,11 +3767,12 @@ class Recordset {
 	function __clone() {
 		$r=Recordset___clone($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new Recordset($r);
+			$this->_cPtr = $r;
+		} else {
+			$this->_cPtr = $r->_cPtr;
 		}
-		return $r;
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
 	}
 
 	function getRecord($index) {
@@ -3578,8 +3796,6 @@ class Recordset {
 	function fieldDefs() {
 		$r=Recordset_fieldDefs($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new fielddefs($r);
 		}
 		return $r;
@@ -3592,8 +3808,6 @@ class Recordset {
 	function top($c_,$n) {
 		$r=Recordset_top($this->_cPtr,$c_,$n);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new Recordset($r);
 		}
 		return $r;
@@ -3616,51 +3830,24 @@ class Recordset {
 	}
 
 	function matchBy($rq) {
-		$r=Recordset_matchBy($this->_cPtr,$rq);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new Recordset($r);
-		}
-		return $r;
+		Recordset_matchBy($this->_cPtr,$rq);
+		return $this;
 	}
 
 	function groupBy($gq) {
-		$r=Recordset_groupBy($this->_cPtr,$gq);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new Recordset($r);
-		}
-		return $r;
+		Recordset_groupBy($this->_cPtr,$gq);
+		return $this;
 	}
 
 	function orderBy($name1_or_orders,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
-		switch (func_num_args()) {
-		case 1: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders); break;
-		case 2: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2); break;
-		case 3: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3); break;
-		case 4: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4); break;
-		case 5: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5); break;
-		case 6: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5,$name6); break;
-		case 7: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5,$name6,$name7); break;
-		default: $r=Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
-		}
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__recordset': return new Recordset($r);
-		default: return new Recordset($r);
-		}
+		if (Recordset_size($this->_cPtr) < 2) return $this;
+		Recordset_orderBy($this->_cPtr,$name1_or_orders,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
+		return $this;
 	}
 
 	function reverse() {
-		$r=Recordset_reverse($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new Recordset($r);
-		}
-		return $r;
+		Recordset_reverse($this->_cPtr);
+		return $this;
 	}
 
 	function appendField($name,$type,$len) {
@@ -3668,13 +3855,8 @@ class Recordset {
 	}
 
 	function unionRecordset($r_) {
-		$r=Recordset_unionRecordset($this->_cPtr,$r_);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new Recordset($r);
-		}
-		return $r;
+		Recordset_unionRecordset($this->_cPtr,$r_);
+		return $this;
 	}
 
 	function getRow($index,$return_record) {
@@ -3684,9 +3866,13 @@ class Recordset {
 	function __construct($res=null) {
 		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordset') {
 			$this->_cPtr=$res;
+			$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+			$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
 			return;
 		}
 		$this->_cPtr=new_Recordset();
+		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
+		$this->_record = new Record(memoryRecord_createRecord($this->fieldDefs()));
 	}
 }
 
@@ -3754,92 +3940,60 @@ class activeTable {
 	}
 
 	function alias($src,$dst) {
-		$r=activeTable_alias($this->_cPtr,$src,$dst);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new activeTable($r);
-		}
-		return $r;
+		activeTable_alias($this->_cPtr,$src,$dst);
+		return $this;
 	}
 
 	function resetAlias() {
-		$r=activeTable_resetAlias($this->_cPtr);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new activeTable($r);
-		}
-		return $r;
+		activeTable_resetAlias($this->_cPtr);
+		return $this;
 	}
 
 	function getWritableRecord() {
 		$r=activeTable_getWritableRecord($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new writableRecord($r);
 		}
 		return $r;
 	}
 
 	function index($v) {
-		$r=activeTable_index($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new activeTable($r);
-		}
-		return $r;
+		activeTable_index($this->_cPtr,$v);
+		return $this;
 	}
 
 	function option($v) {
-		$r=activeTable_option($this->_cPtr,$v);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new activeTable($r);
-		}
-		return $r;
+		activeTable_option($this->_cPtr,$v);
+		return $this;
 	}
 
 	function read($q) {
 		$r=activeTable_read($this->_cPtr,$q);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__recordset': return new Recordset($r);
-		default: return new Recordset($r);
+		if (is_resource($r)) {
+			return new Recordset($r);
 		}
+		return $r;
 	}
 
 	function prepare($q,$serverPrepare=false) {
 		$r=activeTable_prepare($this->_cPtr,$q,$serverPrepare);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__preparedQuery': return new preparedQuery($r);
-		default: return new preparedQuery($r);
+		if (is_resource($r)) {
+			return new preparedQuery($r);
 		}
+		return $r;
 	}
 
-	function join($mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8) {
-		$r=activeTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__activeTable': return new activeTable($r);
-		default: return new activeTable($r);
-		}
+	function join($mdls,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
+		activeTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
+		return $this;
 	}
 
-	function outerJoin($mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8) {
-		$r=activeTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
-		if (!is_resource($r)) return $r;
-		switch (get_resource_type($r)) {
-		case '_p_bzs__db__protocol__tdap__client__activeTable': return new activeTable($r);
-		default: return new activeTable($r);
-		}
+	function outerJoin($mdls,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
+		activeTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
+		return $this;
 	}
 
-	function __construct($mgr_or_db,$tableName) {
+	function __construct($mgr_or_db,$tableName=null) {
 		if (is_resource($mgr_or_db) && get_resource_type($mgr_or_db) === '_p_bzs__db__protocol__tdap__client__activeTable') {
 			$this->_cPtr=$mgr_or_db;
 			return;
@@ -3854,21 +4008,14 @@ class activeTable {
 	function table() {
 		$r=activeTable_table($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new table($r);
 		}
 		return $r;
 	}
 
-	function keyValue($kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7) {
-		$r=activeTable_keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
-		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
-			return new activeTable($r);
-		}
-		return $r;
+	function keyValue($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
+		activeTable_keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
+		return $this;
 	}
 }
 
@@ -3916,8 +4063,6 @@ class pooledDbManager extends idatabaseManager {
 	function db() {
 		$r=pooledDbManager_db($this->_cPtr);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new database($r);
 		}
 		return $r;
@@ -3990,8 +4135,6 @@ class pooledDbManager extends idatabaseManager {
 	function table($name) {
 		$r=pooledDbManager_table($this->_cPtr,$name);
 		if (is_resource($r)) {
-			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
-			if (class_exists($c)) return new $c($r);
 			return new table($r);
 		}
 		return $r;
