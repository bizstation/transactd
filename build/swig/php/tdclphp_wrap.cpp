/* =================================================================
 Copyright (C) 2014 BizStation Corp All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 02111-1307, USA.
 ================================================================= */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }
 
   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
  delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;     /* mangled name of this type */
  const char             *str;      /* human readable name of this type */
  swig_dycast_func        dcast;    /* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;     /* linked list of types that can cast into this type */
  void                   *clientdata;   /* language specific type data */
  int                    owndata;   /* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;     /* pointer to type that is equivalent to this type */
  swig_converter_func     converter;    /* function to cast the void pointers */
  struct swig_cast_info  *next;     /* pointer to next cast in linked list */
  struct swig_cast_info  *prev;     /* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;   /* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;            /* Number of types in this module */
  struct swig_module_info *next;    /* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;  /* Array of initially generated type structures */
  swig_cast_info         **cast_initial;  /* Array of initially generated casting structures */
  void                    *clientdata;    /* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
      const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
  SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
                const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
  /* since l+r >= 0, we can (>> 1) instead (/ 2) */
  size_t i = (l + r) >> 1;
  const char *iname = iter->types[i]->name;
  if (iname) {
    int compare = strcmp(name, iname);
    if (compare == 0) {
      return iter->types[i];
    } else if (compare < 0) {
      if (i) {
        r = i - 1;
      } else {
        break;
      }
    } else if (compare > 0) {
      l = i + 1;
    }
  } else {
    break; /* should never happen */
  }
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
         const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
  if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
    return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if (type==-1) return NULL;
  if (flags & SWIG_POINTER_DISOWN) {
    value->newobject = 0;
  }
  p = value->ptr;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
  if ((*_cPtr)->type==IS_RESOURCE) {
    *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
    return (*ptr == NULL ? -1 : 0);
  }
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;
  TSRMLS_FETCH();

  MAKE_STD_ZVAL(pointer);

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError         -1
#define  SWIG_IOError            -2
#define  SWIG_RuntimeError       -3
#define  SWIG_IndexError         -4
#define  SWIG_TypeError          -5
#define  SWIG_DivisionByZero     -6
#define  SWIG_OverflowError      -7
#define  SWIG_SyntaxError        -8
#define  SWIG_ValueError         -9
#define  SWIG_SystemError        -10
#define  SWIG_AttributeError     -11
#define  SWIG_MemoryError        -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_bool swig_types[0]
#define SWIGTYPE_int swig_types[1]
#define SWIGTYPE_p_HWND swig_types[2]
#define SWIGTYPE_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t swig_types[7]
#define SWIGTYPE_p_boost__timer swig_types[8]
#define SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS swig_types[9]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrDate swig_types[10]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime swig_types[11]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrTime swig_types[12]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp swig_types[13]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion swig_types[14]
#define SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions swig_types[15]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable swig_types[16]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__autoMemory swig_types[17]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__avg swig_types[18]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams swig_types[19]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__count swig_types[20]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__database swig_types[21]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef swig_types[22]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__field swig_types[23]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames swig_types[24]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldShare swig_types[25]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs swig_types[26]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__fields swig_types[27]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase swig_types[28]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t swig_types[29]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t swig_types[30]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t swig_types[31]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t swig_types[32]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t swig_types[33]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t swig_types[34]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase swig_types[35]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery swig_types[36]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__idatabaseManager swig_types[37]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__max swig_types[38]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord swig_types[39]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__min swig_types[40]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase swig_types[41]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable swig_types[42]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager swig_types[43]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery swig_types[44]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__query swig_types[45]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase swig_types[46]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset swig_types[47]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery swig_types[48]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__refarymem swig_types[49]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t swig_types[50]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t swig_types[51]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields swig_types[52]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__sum swig_types[53]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__table swig_types[54]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t swig_types[55]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t swig_types[56]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t swig_types[57]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t swig_types[58]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t swig_types[59]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t swig_types[60]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t swig_types[61]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t swig_types[62]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord swig_types[63]
#define SWIGTYPE_p_bzs__db__protocol__tdap__fielddef swig_types[64]
#define SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_20_t swig_types[65]
#define SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t swig_types[66]
#define SWIGTYPE_p_bzs__db__protocol__tdap__keySegment swig_types[67]
#define SWIGTYPE_p_bzs__db__protocol__tdap__keydef swig_types[68]
#define SWIGTYPE_p_bzs__db__protocol__tdap__tabledef swig_types[69]
#define SWIGTYPE_p_bzs__rtl__benchmark swig_types[70]
#define SWIGTYPE_p_char swig_types[71]
#define SWIGTYPE_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short swig_types[72]
#define SWIGTYPE_p_int swig_types[73]
#define SWIGTYPE_p_iterator swig_types[74]
#define SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fields swig_types[75]
#define SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase swig_types[76]
#define SWIGTYPE_p_p_bzs__db__protocol__tdap__client__memoryRecord swig_types[77]
#define SWIGTYPE_p_p_bzs__db__protocol__tdap__client__writableRecord swig_types[78]
#define SWIGTYPE_p_p_bzs__db__protocol__tdap__tabledef swig_types[79]
#define SWIGTYPE_p_p_char swig_types[80]
#define SWIGTYPE_p_p_void swig_types[81]
#define SWIGTYPE_p_preparedQuery swig_types[82]
#define SWIGTYPE_p_short swig_types[83]
#define SWIGTYPE_p_std___tstring swig_types[84]
#define SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator swig_types[85]
#define SWIGTYPE_p_trdVersiton swig_types[86]
#define SWIGTYPE_p_unsigned_char swig_types[87]
#define SWIGTYPE_p_unsigned_int swig_types[88]
#define SWIGTYPE_p_unsigned_short swig_types[89]
#define SWIGTYPE_p_void swig_types[90]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__first swig_types[91]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__last swig_types[92]
#define SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField swig_types[93]
#define SWIGTYPE_p_BOOKMARK swig_types[94]

static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 95, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(transactd)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(transactd)
ZEND_DECLARE_MODULE_GLOBALS(transactd)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(transactd_globals_id, zend_transactd_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(transactd_globals_id, zend_transactd_globals *, error_code )
#else
#define SWIG_ErrorMsg() (transactd_globals.error_msg)
#define SWIG_ErrorCode() (transactd_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL(TSRMLS_D) __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL(TSRMLS_D) {
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void transactd_init_globals(zend_transactd_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void transactd_destroy_globals(zend_transactd_globals * globals) { (void)globals; }

static void SWIG_ResetError(TSRMLS_D) {
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_transactd_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_transactd_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "transactd"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_transactd.h"
#ifdef __cplusplus
}
#endif


#ifdef SWIGPHP
#undef realloc
#endif


#if _MSC_VER
#define strtoll _strtoi64
#define strtoull _strtoui64
#endif

// ---- patch begin ---
#ifdef _WIN32
  #define TRANSACTD_PHP_REQUIRED_MODULE_PREFIX ""
#else
  #define TRANSACTD_PHP_REQUIRED_MODULE_PREFIX "lib"
#endif
// ---- patch end ---

#include "zend_exceptions.h"
#define SWIG_exception(code, msg) zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC)


#include <stdexcept>


#include <string>


#include <build/swig/validatablepointer.h>
validatablePointerList g_vPtrList;


#include <bzs/env/crosscompile.h>
#include <bzs/env/compiler.h>
#include <bzs/db/protocol/tdap/client/export.h>
#include <bzs/db/protocol/tdap/btrDate.h>
#include <bzs/db/blobStructs.h>
#include <bzs/db/protocol/tdap/mysql/characterset.h>
#include <bzs/db/transactd/connectionRecord.h>

#ifdef LINUX
#include <linux/linuxTypes.h>
#include <linux/charsetConvert.h>
#include <bzs/env/mbcswchrLinux.h>
#endif

#include <bzs/env/tstring.h>
#include <bzs/rtl/benchmark.h>
#include <bzs/rtl/datetime.h>
#include <bzs/rtl/stringBuffers.h>
#include <bzs/rtl/strtrim.h>
#include <bzs/db/protocol/tdap/btrDate.h>
#include <bzs/db/protocol/tdap/myDateTime.cpp>
#include <bzs/db/protocol/tdap/client/sharedData.h>
#include <bzs/db/protocol/tdap/tdapcapi.h>
#include <bzs/db/protocol/tdap/tdapSchema.h>
#include <bzs/db/protocol/tdap/client/nsTable.h>
#include <bzs/db/protocol/tdap/client/connMgr.h>
#include <bzs/db/protocol/tdap/client/bulkInsert.h>
#include <bzs/db/protocol/tdap/client/dbDef.h>
#include <bzs/db/protocol/tdap/client/table.h>
#include <bzs/db/protocol/tdap/client/nsDatabase.h>
#include <bzs/db/protocol/tdap/client/database.h>
#include <bzs/db/protocol/tdap/mysql/characterset.h>
#include <bzs/db/protocol/tdap/client/field.h>
#include <bzs/db/protocol/tdap/client/fields.h>
#include <bzs/db/protocol/tdap/client/memRecord.h>
#include <bzs/db/protocol/tdap/client/recordset.h>
#include <bzs/db/protocol/tdap/client/activeTable.h>
#include <bzs/db/protocol/tdap/client/groupQuery.h>
#include <bzs/db/protocol/tdap/client/pooledDatabaseManager.h>

using namespace bzs::db::protocol::tdap;
using namespace bzs::db::protocol::tdap::client;

SWIGINTERN bzs::db::protocol::tdap::keySegment *bzs_db_protocol_tdap_keydef_segment(bzs::db::protocol::tdap::keydef *self,int const index){
    return &(self->segments[index]);
  }
SWIGINTERN char const *bzs_db_protocol_tdap_fielddef_name(bzs::db::protocol::tdap::fielddef const *self){
     return self->name();
  }
SWIGINTERN bzs::db::protocol::tdap::fielddef *bzs_db_protocol_tdap_tabledef_fieldDef(bzs::db::protocol::tdap::tabledef *self,int const index){
    return &(self->fieldDefs[index]);
  }
SWIGINTERN bzs::db::protocol::tdap::keydef *bzs_db_protocol_tdap_tabledef_keyDef(bzs::db::protocol::tdap::tabledef *self,int const index){
    return &(self->keyDefs[index]);
  }
SWIGINTERN bzs::db::protocol::tdap::btrVersion *bzs_db_protocol_tdap_btrVersions_version(bzs::db::protocol::tdap::btrVersions *self,int const index){
    return &(self->versions[index]);
  }
SWIGINTERN void *bzs_db_protocol_tdap_client_table_getFVbin__SWIG_0(bzs::db::protocol::tdap::client::table *self,short index,uint_td &table_getFVbin_size){
    return self->getFVbin(index, table_getFVbin_size);
  }
SWIGINTERN void *bzs_db_protocol_tdap_client_table_getFVbin__SWIG_1(bzs::db::protocol::tdap::client::table *self,_TCHAR const *fieldName,uint_td &table_getFVbin_size){
    return self->getFVbin(fieldName, table_getFVbin_size);
  }
SWIGINTERN _TCHAR const *bzs_db_protocol_tdap_client_table_keyValueDescription(bzs::db::protocol::tdap::client::table *self,_TCHAR *keyValueDescription_buf){
    self->keyValueDescription(keyValueDescription_buf, 1024 * 8);
    return keyValueDescription_buf;
  }
SWIGINTERN preparedQuery *bzs_db_protocol_tdap_client_table_prepare__SWIG_0(bzs::db::protocol::tdap::client::table *self,bzs::db::protocol::tdap::client::queryBase const *q,bool serverPrepare=false){
    preparedQuery* p = new preparedQuery(self->setQuery(q, serverPrepare));
    return p;
  }
SWIGINTERN preparedQuery *bzs_db_protocol_tdap_client_table_setQuery__SWIG_0(bzs::db::protocol::tdap::client::table *self,bzs::db::protocol::tdap::client::queryBase const *q,bool serverPrepare=false){
    preparedQuery* p = new preparedQuery(self->setQuery(q, serverPrepare));
    return p;
  }
SWIGINTERN void bzs_db_protocol_tdap_client_table_setPrepare(bzs::db::protocol::tdap::client::table *self,preparedQuery *q){
    self->setPrepare(q->getFilter());
  }
SWIGINTERN void bzs_db_protocol_tdap_client_table_release(bzs::db::protocol::tdap::client::table *self){
    if (bzs::db::protocol::tdap::client::nsdatabase::testTablePtr(self))
      self->release();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_table(bzs::db::protocol::tdap::client::table *self){
    if (!g_vPtrList.remove(self))
    {
      if (bzs::db::protocol::tdap::client::nsdatabase::testTablePtr(self))
        self->release();
    }
  }
SWIGINTERN bzs::db::protocol::tdap::client::query *new_bzs_db_protocol_tdap_client_query(){
    return bzs::db::protocol::tdap::client::query::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_query(bzs::db::protocol::tdap::client::query *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::database *new_bzs_db_protocol_tdap_client_database(){
    bzs::db::protocol::tdap::client::nsdatabase::setExecCodePage(CP_UTF8);
    return bzs::db::protocol::tdap::client::database::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_database(bzs::db::protocol::tdap::client::database *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::table *bzs_db_protocol_tdap_client_database_openTable__SWIG_0(bzs::db::protocol::tdap::client::database *self,_TCHAR const *tableName,short mode=0,bool autoCreate=true,_TCHAR const *ownerName=NULL,_TCHAR const *uri=NULL){
    bzs::db::protocol::tdap::client::table* tb =
      self->openTable(tableName, mode, autoCreate, ownerName, uri);
    g_vPtrList.add(tb);
    return tb;
  }
SWIGINTERN bzs::db::protocol::tdap::client::table *bzs_db_protocol_tdap_client_database_openTable__SWIG_5(bzs::db::protocol::tdap::client::database *self,short fileNum,short mode=TD_OPEN_NORMAL,bool autoCreate=true,_TCHAR const *ownerName=NULL,_TCHAR const *uri=NULL){
    bzs::db::protocol::tdap::client::table* tb =
      self->openTable(fileNum, mode, autoCreate, ownerName, uri);
    g_vPtrList.add(tb);
    return tb;
  }
SWIGINTERN bzs::db::protocol::tdap::client::fielddefs *new_bzs_db_protocol_tdap_client_fielddefs(){
    return bzs::db::protocol::tdap::client::fielddefs::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_fielddefs(bzs::db::protocol::tdap::client::fielddefs *self){
    self->release();
  }
SWIGINTERN void bzs_db_protocol_tdap_client_fieldsBase_getFieldByIndexRef(bzs::db::protocol::tdap::client::fieldsBase const *self,short index,bzs::db::protocol::tdap::client::field &return_field){
    return_field = self->operator[](index);
  }
SWIGINTERN void bzs_db_protocol_tdap_client_fieldsBase_getFieldByNameRef(bzs::db::protocol::tdap::client::fieldsBase const *self,_TCHAR const *name,bzs::db::protocol::tdap::client::field &return_field){
    return_field = self->operator[](name);
  }
SWIGINTERN bzs::db::protocol::tdap::client::memoryRecord *new_bzs_db_protocol_tdap_client_memoryRecord(bzs::db::protocol::tdap::client::fielddefs &fds){
    return bzs::db::protocol::tdap::client::memoryRecord::create(fds);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_memoryRecord(bzs::db::protocol::tdap::client::memoryRecord *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::fieldNames *new_bzs_db_protocol_tdap_client_fieldNames(){
    return bzs::db::protocol::tdap::client::fieldNames::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_fieldNames(bzs::db::protocol::tdap::client::fieldNames *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::recordsetQuery *new_bzs_db_protocol_tdap_client_recordsetQuery(){
    return bzs::db::protocol::tdap::client::recordsetQuery::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_recordsetQuery(bzs::db::protocol::tdap::client::recordsetQuery *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::groupQuery *new_bzs_db_protocol_tdap_client_groupQuery(){
    return bzs::db::protocol::tdap::client::groupQuery::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_groupQuery(bzs::db::protocol::tdap::client::groupQuery *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::sum *new_bzs_db_protocol_tdap_client_sum__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::sum::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_sum(bzs::db::protocol::tdap::client::sum *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::first *new_bzs_db_protocol_tdap_client_first__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::first::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_first(bzs::db::protocol::tdap::client::first *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::last *new_bzs_db_protocol_tdap_client_last__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::last::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_last(bzs::db::protocol::tdap::client::last *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::count *new_bzs_db_protocol_tdap_client_count(_TCHAR const *resultName){
    return bzs::db::protocol::tdap::client::count::create(resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_count(bzs::db::protocol::tdap::client::count *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::avg *new_bzs_db_protocol_tdap_client_avg__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::avg::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_avg(bzs::db::protocol::tdap::client::avg *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::min *new_bzs_db_protocol_tdap_client_min__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::min::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_min(bzs::db::protocol::tdap::client::min *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::max *new_bzs_db_protocol_tdap_client_max__SWIG_0(bzs::db::protocol::tdap::client::fieldNames const &targetNames,_TCHAR const *resultName=NULL){
    return bzs::db::protocol::tdap::client::max::create(targetNames, resultName);
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_max(bzs::db::protocol::tdap::client::max *self){
    self->release();
  }
SWIGINTERN void bzs_db_protocol_tdap_client_recordset_getRow(bzs::db::protocol::tdap::client::recordset *self,size_t index,bzs::db::protocol::tdap::client::fieldsBase **return_record){
    *return_record = &(self->operator[](index));
  }
SWIGINTERN bzs::db::protocol::tdap::client::recordset *new_bzs_db_protocol_tdap_client_recordset(){
    return bzs::db::protocol::tdap::client::recordset::create();
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_recordset(bzs::db::protocol::tdap::client::recordset *self){
    self->release();
  }
SWIGINTERN bzs::db::protocol::tdap::client::recordset *bzs_db_protocol_tdap_client_activeTable_read__SWIG_0(bzs::db::protocol::tdap::client::activeTable *self,bzs::db::protocol::tdap::client::queryBase &q){
    recordset* rs = recordset::create();
    self->read(*rs, q);
    return rs;
  }
SWIGINTERN bzs::db::protocol::tdap::client::recordset *bzs_db_protocol_tdap_client_activeTable_read__SWIG_1(bzs::db::protocol::tdap::client::activeTable *self,bzs::db::protocol::tdap::client::preparedQuery *q){
    recordset* rs = recordset::create();
    self->read(*rs, q->getFilter());
    return rs;
  }
SWIGINTERN bzs::db::protocol::tdap::client::preparedQuery *bzs_db_protocol_tdap_client_activeTable_prepare__SWIG_0(bzs::db::protocol::tdap::client::activeTable *self,bzs::db::protocol::tdap::client::queryBase &q,bool serverPrepare=false){
    preparedQuery* p = new preparedQuery(self->prepare(q, serverPrepare));
    return p;
  }
SWIGINTERN bzs::db::protocol::tdap::client::activeTable *new_bzs_db_protocol_tdap_client_activeTable__SWIG_0(bzs::db::protocol::tdap::client::idatabaseManager *mgr,_TCHAR const *tableName){
    bzs::db::protocol::tdap::client::activeTable* p =
      bzs::db::protocol::tdap::client::activeTable::create(mgr, tableName);
    g_vPtrList.add(p->table().get());
    return p;
  }
SWIGINTERN bzs::db::protocol::tdap::client::activeTable *new_bzs_db_protocol_tdap_client_activeTable__SWIG_1(bzs::db::protocol::tdap::client::database *db,_TCHAR const *tableName){
    bzs::db::protocol::tdap::client::activeTable* p =
      bzs::db::protocol::tdap::client::activeTable::create(db, tableName);
    g_vPtrList.add(p->table().get());
    return p;
  }
SWIGINTERN void delete_bzs_db_protocol_tdap_client_activeTable(bzs::db::protocol::tdap::client::activeTable *self){
    if (g_vPtrList.remove(self->table().get()))
    {
      if (nsdatabase::testTablePtr(self->table().get()))
        self->table()->nsdb()->setTestPtrIgnore(true);
    }
    self->release();
  }
SWIGINTERN void bzs_db_protocol_tdap_client_activeTable_release(bzs::db::protocol::tdap::client::activeTable *self){
    self->releaseTable();
  }
SWIGINTERN bzs::db::protocol::tdap::client::table *bzs_db_protocol_tdap_client_activeTable_table(bzs::db::protocol::tdap::client::activeTable *self){
    return self->table().get();
  }
SWIGINTERN bzs::db::protocol::tdap::client::table *bzs_db_protocol_tdap_client_pooledDbManager_table(bzs::db::protocol::tdap::client::pooledDbManager *self,_TCHAR const *name){
    return self->table(name).get();
  }

static bzs::db::protocol::tdap::client::fieldsBase* *new_fieldsBase_p_p() { 
  return new bzs::db::protocol::tdap::client::fieldsBase*(); 
}

static bzs::db::protocol::tdap::client::fieldsBase* *copy_fieldsBase_p_p(bzs::db::protocol::tdap::client::fieldsBase* value) { 
  return new bzs::db::protocol::tdap::client::fieldsBase*(value); 
}

static void delete_fieldsBase_p_p(bzs::db::protocol::tdap::client::fieldsBase* *obj) { 
  if (obj) delete obj; 
}

static void fieldsBase_p_p_assign(bzs::db::protocol::tdap::client::fieldsBase* *obj, bzs::db::protocol::tdap::client::fieldsBase* value) {
  *obj = value;
}

static bzs::db::protocol::tdap::client::fieldsBase* fieldsBase_p_p_value(bzs::db::protocol::tdap::client::fieldsBase* *obj) {
  return *obj;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_bzs__db__protocol__tdap__client__recordsetQueryTo_p_bzs__db__protocol__tdap__client__query(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::query *)  ((bzs::db::protocol::tdap::client::recordsetQuery *) x));
}
static void *_p_bzs__db__protocol__tdap__client__databaseTo_p_bzs__db__protocol__tdap__client__nsdatabase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::nsdatabase *)  ((bzs::db::protocol::tdap::client::database *) x));
}
static void *_p_bzs__db__protocol__tdap__fielddefTo_p_bzs__db__protocol__tdap__fielddef_tT_64_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::fielddef_t< 64 > *)  ((bzs::db::protocol::tdap::fielddef *) x));
}
static void *_p_bzs__db__protocol__tdap__client__fielddefsTo_p_bzs__db__protocol__tdap__client__fieldShare(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldShare *)  ((bzs::db::protocol::tdap::client::fielddefs *) x));
}
static void *_p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__sum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::sum *)  ((bzs::db::protocol::tdap::client::max *) x));
}
static void *_p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__sum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::sum *)  ((bzs::db::protocol::tdap::client::avg *) x));
}
static void *_p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__sum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::sum *)  ((bzs::db::protocol::tdap::client::min *) x));
}
static void *_p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *) (bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::max *) x));
}
static void *_p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *) (bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::avg *) x));
}
static void *_p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *) (bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::min *) x));
}
static void *_p_bzs__db__protocol__tdap__client__sumTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *)  ((bzs::db::protocol::tdap::client::sum *) x));
}
static void *_p_bzs__db__protocol__tdap__client__countTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *)  ((bzs::db::protocol::tdap::client::count *) x));
}
static void *_p_bzs__db__protocol__tdap__client__firstTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *)  ((bzs::db::protocol::tdap::client::first *) x));
}
static void *_p_bzs__db__protocol__tdap__client__lastTo_p_bzs__db__protocol__tdap__client__groupFuncBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::groupFuncBase *)  ((bzs::db::protocol::tdap::client::last *) x));
}
static void *_p_bzs__db__protocol__tdap__client__memoryRecordTo_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase *)  ((bzs::db::protocol::tdap::client::memoryRecord *) x));
}
static void *_p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase *) (bzs::db::protocol::tdap::client::memoryRecord *) ((bzs::db::protocol::tdap::client::writableRecord *) x));
}
static void *_p_bzs__db__protocol__tdap__client__fieldsTo_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase *)  ((bzs::db::protocol::tdap::client::fields *) x));
}
static void *_p_p_bzs__db__protocol__tdap__client__memoryRecordTo_p_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase **)  ((bzs::db::protocol::tdap::client::memoryRecord **) x));
}
static void *_p_p_bzs__db__protocol__tdap__client__writableRecordTo_p_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase **) (bzs::db::protocol::tdap::client::memoryRecord *) ((bzs::db::protocol::tdap::client::writableRecord **) x));
}
static void *_p_p_bzs__db__protocol__tdap__client__fieldsTo_p_p_bzs__db__protocol__tdap__client__fieldsBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::fieldsBase **)  ((bzs::db::protocol::tdap::client::fields **) x));
}
static void *_p_bzs__db__protocol__tdap__client__queryTo_p_bzs__db__protocol__tdap__client__queryBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::queryBase *)  ((bzs::db::protocol::tdap::client::query *) x));
}
static void *_p_bzs__db__protocol__tdap__client__fieldsBaseTo_p_bzs__db__protocol__tdap__client__refarymem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::refarymem *)  ((bzs::db::protocol::tdap::client::fieldsBase *) x));
}
static void *_p_bzs__db__protocol__tdap__client__autoMemoryTo_p_bzs__db__protocol__tdap__client__refarymem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::refarymem *)  ((bzs::db::protocol::tdap::client::autoMemory *) x));
}
static void *_p_bzs__db__protocol__tdap__client__memoryRecordTo_p_bzs__db__protocol__tdap__client__refarymem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::refarymem *) (bzs::db::protocol::tdap::client::fieldsBase *) ((bzs::db::protocol::tdap::client::memoryRecord *) x));
}
static void *_p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__refarymem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::refarymem *) (bzs::db::protocol::tdap::client::fieldsBase *)(bzs::db::protocol::tdap::client::memoryRecord *) ((bzs::db::protocol::tdap::client::writableRecord *) x));
}
static void *_p_bzs__db__protocol__tdap__client__fieldsTo_p_bzs__db__protocol__tdap__client__refarymem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::refarymem *) (bzs::db::protocol::tdap::client::fieldsBase *) ((bzs::db::protocol::tdap::client::fields *) x));
}
static void *_p_bzs__db__protocol__tdap__client__dbdefTo_p_bzs__db__protocol__tdap__client__nstable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::nstable *)  ((bzs::db::protocol::tdap::client::dbdef *) x));
}
static void *_p_bzs__db__protocol__tdap__client__tableTo_p_bzs__db__protocol__tdap__client__nstable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::nstable *)  ((bzs::db::protocol::tdap::client::table *) x));
}
static void *_p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__memoryRecord(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::memoryRecord *)  ((bzs::db::protocol::tdap::client::writableRecord *) x));
}
static void *_p_bzs__db__protocol__tdap__client__pooledDbManagerTo_p_bzs__db__protocol__tdap__client__idatabaseManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::idatabaseManager *)  ((bzs::db::protocol::tdap::client::pooledDbManager *) x));
}
static void *_p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *)(bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::max *) x));
}
static void *_p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *)(bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::avg *) x));
}
static void *_p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *)(bzs::db::protocol::tdap::client::sum *) ((bzs::db::protocol::tdap::client::min *) x));
}
static void *_p_bzs__db__protocol__tdap__client__sumTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *) ((bzs::db::protocol::tdap::client::sum *) x));
}
static void *_p_bzs__db__protocol__tdap__client__groupFuncBaseTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *)  ((bzs::db::protocol::tdap::client::groupFuncBase *) x));
}
static void *_p_bzs__db__protocol__tdap__client__countTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *) ((bzs::db::protocol::tdap::client::count *) x));
}
static void *_p_bzs__db__protocol__tdap__client__firstTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *) ((bzs::db::protocol::tdap::client::first *) x));
}
static void *_p_bzs__db__protocol__tdap__client__lastTo_p_bzs__db__protocol__tdap__client__recordsetQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bzs::db::protocol::tdap::client::recordsetQuery *) (bzs::db::protocol::tdap::client::groupFuncBase *) ((bzs::db::protocol::tdap::client::last *) x));
}

static swig_type_info _swigt__bool = {"_bool", "bool", 0, 0, (void*)0, 0};
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HWND = {"_p_HWND", "HWND *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t = {"_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t", "boost::function< int (bzs::db::protocol::tdap::client::fields const &) > *|bzs::db::protocol::tdap::client::validationFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t = {"_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t", "boost::shared_ptr< bzs::db::protocol::tdap::client::database > *|bzs::db::protocol::tdap::client::database_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t = {"_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t", "boost::shared_ptr< bzs::db::protocol::tdap::client::filter > *|bzs::db::protocol::tdap::client::pq_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t = {"_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t", "boost::shared_ptr< bzs::db::protocol::tdap::client::idatabaseManager > *|bzs::db::protocol::tdap::client::dbmanager_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t = {"_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t", "boost::shared_ptr< bzs::db::protocol::tdap::client::table > *|bzs::db::protocol::tdap::client::table_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__timer = {"_p_boost__timer", "boost::timer *|boost_timer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__FLAGS = {"_p_bzs__db__protocol__tdap__FLAGS", "bzs::db::protocol::tdap::FLAGS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrDate = {"_p_bzs__db__protocol__tdap__btrDate", "bzs::db::protocol::tdap::btrDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrDateTime = {"_p_bzs__db__protocol__tdap__btrDateTime", "bzs::db::protocol::tdap::btrDateTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrTime = {"_p_bzs__db__protocol__tdap__btrTime", "bzs::db::protocol::tdap::btrTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrTimeStamp = {"_p_bzs__db__protocol__tdap__btrTimeStamp", "bzs::db::protocol::tdap::btrTimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrVersion = {"_p_bzs__db__protocol__tdap__btrVersion", "bzs::db::protocol::tdap::btrVersion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__btrVersions = {"_p_bzs__db__protocol__tdap__btrVersions", "bzs::db::protocol::tdap::btrVersions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__activeTable = {"_p_bzs__db__protocol__tdap__client__activeTable", "bzs::db::protocol::tdap::client::activeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__avg = {"_p_bzs__db__protocol__tdap__client__avg", "bzs::db::protocol::tdap::client::avg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__connectParams = {"_p_bzs__db__protocol__tdap__client__connectParams", "bzs::db::protocol::tdap::client::connectParams *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__count = {"_p_bzs__db__protocol__tdap__client__count", "bzs::db::protocol::tdap::client::count *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__database = {"_p_bzs__db__protocol__tdap__client__database", "bzs::db::protocol::tdap::client::database *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__dbdef = {"_p_bzs__db__protocol__tdap__client__dbdef", "bzs::db::protocol::tdap::client::dbdef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__field = {"_p_bzs__db__protocol__tdap__client__field", "bzs::db::protocol::tdap::client::field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__fieldNames = {"_p_bzs__db__protocol__tdap__client__fieldNames", "bzs::db::protocol::tdap::client::fieldNames *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__fieldShare = {"_p_bzs__db__protocol__tdap__client__fieldShare", "bzs::db::protocol::tdap::client::fieldShare *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__fielddefs = {"_p_bzs__db__protocol__tdap__client__fielddefs", "bzs::db::protocol::tdap::client::fielddefs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__fields = {"_p_bzs__db__protocol__tdap__client__fields", "bzs::db::protocol::tdap::client::fields *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__fieldsBase = {"_p_bzs__db__protocol__tdap__client__fieldsBase", "bzs::db::protocol::tdap::client::fieldsBase *|bzs::db::protocol::tdap::client::row *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< indexFindNavi > > *|bzs::db::protocol::tdap::client::filterdFindIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< indexNavi > > *|bzs::db::protocol::tdap::client::filterdIndexIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< indexRvFindNavi > > *|bzs::db::protocol::tdap::client::filterdFindRvIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< indexRvNavi > > *|bzs::db::protocol::tdap::client::filterdIndexRvIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< stepNavi > > *|bzs::db::protocol::tdap::client::filterdStepIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t = {"_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t", "bzs::db::protocol::tdap::client::filterdIterator< bzs::db::protocol::tdap::client::tableIterator< stepRvNavi > > *|bzs::db::protocol::tdap::client::filterdStepRvIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__first = {"_p_bzs__db__protocol__tdap__client__first", "bzs::db::protocol::tdap::client::first *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__groupFuncBase = {"_p_bzs__db__protocol__tdap__client__groupFuncBase", "bzs::db::protocol::tdap::client::groupFuncBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__groupQuery = {"_p_bzs__db__protocol__tdap__client__groupQuery", "bzs::db::protocol::tdap::client::groupQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__idatabaseManager = {"_p_bzs__db__protocol__tdap__client__idatabaseManager", "bzs::db::protocol::tdap::client::idatabaseManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__last = {"_p_bzs__db__protocol__tdap__client__last", "bzs::db::protocol::tdap::client::last *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__max = {"_p_bzs__db__protocol__tdap__client__max", "bzs::db::protocol::tdap::client::max *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__memoryRecord = {"_p_bzs__db__protocol__tdap__client__memoryRecord", "bzs::db::protocol::tdap::client::memoryRecord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__min = {"_p_bzs__db__protocol__tdap__client__min", "bzs::db::protocol::tdap::client::min *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__nsdatabase = {"_p_bzs__db__protocol__tdap__client__nsdatabase", "bzs::db::protocol::tdap::client::nsdatabase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__nstable = {"_p_bzs__db__protocol__tdap__client__nstable", "bzs::db::protocol::tdap::client::nstable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__pooledDbManager = {"_p_bzs__db__protocol__tdap__client__pooledDbManager", "bzs::db::protocol::tdap::client::pooledDbManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__preparedQuery = {"_p_bzs__db__protocol__tdap__client__preparedQuery", "bzs::db::protocol::tdap::client::preparedQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__query = {"_p_bzs__db__protocol__tdap__client__query", "bzs::db::protocol::tdap::client::query *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__queryBase = {"_p_bzs__db__protocol__tdap__client__queryBase", "bzs::db::protocol::tdap::client::queryBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__recordset = {"_p_bzs__db__protocol__tdap__client__recordset", "bzs::db::protocol::tdap::client::recordset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__recordsetQuery = {"_p_bzs__db__protocol__tdap__client__recordsetQuery", "bzs::db::protocol::tdap::client::recordsetQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__refarymem = {"_p_bzs__db__protocol__tdap__client__refarymem", "bzs::db::protocol::tdap::client::refarymem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__autoMemory = {"_p_bzs__db__protocol__tdap__client__autoMemory", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t = {"_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t", "bzs::db::protocol::tdap::client::dbSnapshot *|bzs::db::protocol::tdap::client::snapshot< boost::shared_ptr< bzs::db::protocol::tdap::client::database > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t = {"_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t", "bzs::db::protocol::tdap::client::snapshot< bzs::db::protocol::tdap::client::idatabaseManager * > *|bzs::db::protocol::tdap::client::dbmSnapshot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__sortField = {"_p_bzs__db__protocol__tdap__client__sortField", "bzs::db::protocol::tdap::client::sortField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__sortFields = {"_p_bzs__db__protocol__tdap__client__sortFields", "bzs::db::protocol::tdap::client::sortFields *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__sum = {"_p_bzs__db__protocol__tdap__client__sum", "bzs::db::protocol::tdap::client::sum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__table = {"_p_bzs__db__protocol__tdap__client__table", "bzs::db::protocol::tdap::client::table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t", "bzs::db::protocol::tdap::client::tableIterator< indexFindNavi > *|bzs::db::protocol::tdap::client::findIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t", "bzs::db::protocol::tdap::client::tableIterator< indexNavi > *|bzs::db::protocol::tdap::client::indexIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t", "bzs::db::protocol::tdap::client::tableIterator< indexRvFindNavi > *|bzs::db::protocol::tdap::client::findRvIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t", "bzs::db::protocol::tdap::client::tableIterator< indexRvNavi > *|bzs::db::protocol::tdap::client::indexRvIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t", "bzs::db::protocol::tdap::client::stepIterator *|bzs::db::protocol::tdap::client::tableIterator< stepNavi > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t = {"_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t", "bzs::db::protocol::tdap::client::stepRvIterator *|bzs::db::protocol::tdap::client::tableIterator< stepRvNavi > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t = {"_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t", "bzs::db::protocol::tdap::client::transaction< boost::shared_ptr< bzs::db::protocol::tdap::client::database > > *|bzs::db::protocol::tdap::client::dbTransaction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t = {"_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t", "bzs::db::protocol::tdap::client::transaction< boost::shared_ptr< bzs::db::protocol::tdap::client::idatabaseManager > > *|bzs::db::protocol::tdap::client::dbmTransaction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__client__writableRecord = {"_p_bzs__db__protocol__tdap__client__writableRecord", "bzs::db::protocol::tdap::client::writableRecord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__fielddef = {"_p_bzs__db__protocol__tdap__fielddef", "bzs::db::protocol::tdap::fielddef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__fielddef_tT_20_t = {"_p_bzs__db__protocol__tdap__fielddef_tT_20_t", "bzs::db::protocol::tdap::fielddef_t_pv *|bzs::db::protocol::tdap::fielddef_t< 20 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__fielddef_tT_64_t = {"_p_bzs__db__protocol__tdap__fielddef_tT_64_t", "bzs::db::protocol::tdap::fielddef_t_my *|bzs::db::protocol::tdap::fielddef_t< 64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__keySegment = {"_p_bzs__db__protocol__tdap__keySegment", "bzs::db::protocol::tdap::keySegment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__keydef = {"_p_bzs__db__protocol__tdap__keydef", "bzs::db::protocol::tdap::keydef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__db__protocol__tdap__tabledef = {"_p_bzs__db__protocol__tdap__tabledef", "bzs::db::protocol::tdap::tabledef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bzs__rtl__benchmark = {"_p_bzs__rtl__benchmark", "bzs::rtl::benchmark *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "_TCHAR *|char *|char_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short = {"_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short", "BTRCALLID_PTR|short (*)(unsigned short,void *,void *,unsigned int *,void *,unsigned short,char,unsigned char *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|percentage_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_bzs__db__protocol__tdap__client__fieldsBase = {"_p_p_bzs__db__protocol__tdap__client__fieldsBase", "bzs::db::protocol::tdap::client::fieldsBase **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_bzs__db__protocol__tdap__client__memoryRecord = {"_p_p_bzs__db__protocol__tdap__client__memoryRecord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_bzs__db__protocol__tdap__client__writableRecord = {"_p_p_bzs__db__protocol__tdap__client__writableRecord", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_bzs__db__protocol__tdap__client__fields = {"_p_p_bzs__db__protocol__tdap__client__fields", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_bzs__db__protocol__tdap__tabledef = {"_p_p_bzs__db__protocol__tdap__tabledef", "bzs::db::protocol::tdap::tabledef **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **|_TCHAR **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_preparedQuery = {"_p_preparedQuery", "preparedQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|short_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std___tstring = {"_p_std___tstring", "std::_tstring *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator = {"_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator", "bzs::db::protocol::tdap::client::recordset::iterator *|std::vector< bzs::db::protocol::tdap::client::fieldsBase * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_trdVersiton = {"_p_trdVersiton", "trdVersiton *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uchar_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "bookmark_td *|unsigned int *|uint_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|ushort_td *|keylen_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *|void_td *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BOOKMARK = { "_p_BOOKMARK", "bookmark_td *|BOOKMARK *", 0, 0, (void*)0, 0 };

static swig_type_info *swig_type_initial[] = {
  &_swigt__bool,
  &_swigt__int,
  &_swigt__p_HWND,
  &_swigt__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t,
  &_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t,
  &_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t,
  &_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t,
  &_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t,
  &_swigt__p_boost__timer,
  &_swigt__p_bzs__db__protocol__tdap__FLAGS,
  &_swigt__p_bzs__db__protocol__tdap__btrDate,
  &_swigt__p_bzs__db__protocol__tdap__btrDateTime,
  &_swigt__p_bzs__db__protocol__tdap__btrTime,
  &_swigt__p_bzs__db__protocol__tdap__btrTimeStamp,
  &_swigt__p_bzs__db__protocol__tdap__btrVersion,
  &_swigt__p_bzs__db__protocol__tdap__btrVersions,
  &_swigt__p_bzs__db__protocol__tdap__client__activeTable,
  &_swigt__p_bzs__db__protocol__tdap__client__autoMemory,
  &_swigt__p_bzs__db__protocol__tdap__client__avg,
  &_swigt__p_bzs__db__protocol__tdap__client__connectParams,
  &_swigt__p_bzs__db__protocol__tdap__client__count,
  &_swigt__p_bzs__db__protocol__tdap__client__database,
  &_swigt__p_bzs__db__protocol__tdap__client__dbdef,
  &_swigt__p_bzs__db__protocol__tdap__client__field,
  &_swigt__p_bzs__db__protocol__tdap__client__fieldNames,
  &_swigt__p_bzs__db__protocol__tdap__client__fieldShare,
  &_swigt__p_bzs__db__protocol__tdap__client__fielddefs,
  &_swigt__p_bzs__db__protocol__tdap__client__fields,
  &_swigt__p_bzs__db__protocol__tdap__client__fieldsBase,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__groupFuncBase,
  &_swigt__p_bzs__db__protocol__tdap__client__groupQuery,
  &_swigt__p_bzs__db__protocol__tdap__client__idatabaseManager,
  &_swigt__p_bzs__db__protocol__tdap__client__max,
  &_swigt__p_bzs__db__protocol__tdap__client__memoryRecord,
  &_swigt__p_bzs__db__protocol__tdap__client__min,
  &_swigt__p_bzs__db__protocol__tdap__client__nsdatabase,
  &_swigt__p_bzs__db__protocol__tdap__client__nstable,
  &_swigt__p_bzs__db__protocol__tdap__client__pooledDbManager,
  &_swigt__p_bzs__db__protocol__tdap__client__preparedQuery,
  &_swigt__p_bzs__db__protocol__tdap__client__query,
  &_swigt__p_bzs__db__protocol__tdap__client__queryBase,
  &_swigt__p_bzs__db__protocol__tdap__client__recordset,
  &_swigt__p_bzs__db__protocol__tdap__client__recordsetQuery,
  &_swigt__p_bzs__db__protocol__tdap__client__refarymem,
  &_swigt__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t,
  &_swigt__p_bzs__db__protocol__tdap__client__sortFields,
  &_swigt__p_bzs__db__protocol__tdap__client__sum,
  &_swigt__p_bzs__db__protocol__tdap__client__table,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t,
  &_swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t,
  &_swigt__p_bzs__db__protocol__tdap__client__writableRecord,
  &_swigt__p_bzs__db__protocol__tdap__fielddef,
  &_swigt__p_bzs__db__protocol__tdap__fielddef_tT_20_t,
  &_swigt__p_bzs__db__protocol__tdap__fielddef_tT_64_t,
  &_swigt__p_bzs__db__protocol__tdap__keySegment,
  &_swigt__p_bzs__db__protocol__tdap__keydef,
  &_swigt__p_bzs__db__protocol__tdap__tabledef,
  &_swigt__p_bzs__rtl__benchmark,
  &_swigt__p_char,
  &_swigt__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_p_bzs__db__protocol__tdap__client__fields,
  &_swigt__p_p_bzs__db__protocol__tdap__client__fieldsBase,
  &_swigt__p_p_bzs__db__protocol__tdap__client__memoryRecord,
  &_swigt__p_p_bzs__db__protocol__tdap__client__writableRecord,
  &_swigt__p_p_bzs__db__protocol__tdap__tabledef,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_preparedQuery,
  &_swigt__p_short,
  &_swigt__p_std___tstring,
  &_swigt__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator,
  &_swigt__p_trdVersiton,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__p_bzs__db__protocol__tdap__client__first,
  &_swigt__p_bzs__db__protocol__tdap__client__last,
  &_swigt__p_bzs__db__protocol__tdap__client__sortField,
  &_swigt__p_BOOKMARK,
};

static swig_cast_info _swigc__bool[] = {  {&_swigt__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HWND[] = {  {&_swigt__p_HWND, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t[] = {  {&_swigt__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t[] = {  {&_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t[] = {  {&_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t[] = {  {&_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t[] = {  {&_swigt__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__timer[] = {  {&_swigt__p_boost__timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__FLAGS[] = {  {&_swigt__p_bzs__db__protocol__tdap__FLAGS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrDate[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrDateTime[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrDateTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrTime[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrTimeStamp[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrTimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrVersion[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrVersion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__btrVersions[] = {  {&_swigt__p_bzs__db__protocol__tdap__btrVersions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__activeTable[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__activeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__avg[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__avg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__connectParams[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__connectParams, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__count[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__count, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__database[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__database, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__dbdef[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__dbdef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__field[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__fieldNames[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__fieldNames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__fieldShare[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__fielddefs, _p_bzs__db__protocol__tdap__client__fielddefsTo_p_bzs__db__protocol__tdap__client__fieldShare, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__fieldShare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__fielddefs[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__fielddefs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__fields[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__fields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__fieldsBase[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__memoryRecord, _p_bzs__db__protocol__tdap__client__memoryRecordTo_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__writableRecord, _p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__fields, _p_bzs__db__protocol__tdap__client__fieldsTo_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__groupFuncBase[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__sum, _p_bzs__db__protocol__tdap__client__sumTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__count, _p_bzs__db__protocol__tdap__client__countTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__first, _p_bzs__db__protocol__tdap__client__firstTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},{&_swigt__p_bzs__db__protocol__tdap__client__last, _p_bzs__db__protocol__tdap__client__lastTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0}, {&_swigt__p_bzs__db__protocol__tdap__client__max, _p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__avg, _p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__min, _p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__groupQuery[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__groupQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__idatabaseManager[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__idatabaseManager, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__pooledDbManager, _p_bzs__db__protocol__tdap__client__pooledDbManagerTo_p_bzs__db__protocol__tdap__client__idatabaseManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__max[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__max, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__memoryRecord[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__memoryRecord, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__writableRecord, _p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__memoryRecord, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__min[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__min, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__nsdatabase[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__nsdatabase, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__database, _p_bzs__db__protocol__tdap__client__databaseTo_p_bzs__db__protocol__tdap__client__nsdatabase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__nstable[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__table, _p_bzs__db__protocol__tdap__client__tableTo_p_bzs__db__protocol__tdap__client__nstable, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__dbdef, _p_bzs__db__protocol__tdap__client__dbdefTo_p_bzs__db__protocol__tdap__client__nstable, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__nstable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__pooledDbManager[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__pooledDbManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__preparedQuery[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__preparedQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__query[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__recordsetQuery, _p_bzs__db__protocol__tdap__client__recordsetQueryTo_p_bzs__db__protocol__tdap__client__query, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__sum, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__first, 0, 0, 0},{&_swigt__p_bzs__db__protocol__tdap__client__last, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__count, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__query, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__max, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__avg, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__min, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__queryBase[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__sum, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__first, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__last, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__count, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__query, _p_bzs__db__protocol__tdap__client__queryTo_p_bzs__db__protocol__tdap__client__queryBase, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__max, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__queryBase, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__avg, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__min, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__groupFuncBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__recordset[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__recordset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__recordsetQuery[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__sum, _p_bzs__db__protocol__tdap__client__sumTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__first, _p_bzs__db__protocol__tdap__client__firstTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__last, _p_bzs__db__protocol__tdap__client__lastTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__count, _p_bzs__db__protocol__tdap__client__countTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__max, _p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__avg, _p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__min, _p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__groupFuncBase, _p_bzs__db__protocol__tdap__client__groupFuncBaseTo_p_bzs__db__protocol__tdap__client__recordsetQuery, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__autoMemory[] = {{&_swigt__p_bzs__db__protocol__tdap__client__autoMemory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__refarymem[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__refarymem, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__fieldsBase, _p_bzs__db__protocol__tdap__client__fieldsBaseTo_p_bzs__db__protocol__tdap__client__refarymem, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__memoryRecord, _p_bzs__db__protocol__tdap__client__memoryRecordTo_p_bzs__db__protocol__tdap__client__refarymem, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__writableRecord, _p_bzs__db__protocol__tdap__client__writableRecordTo_p_bzs__db__protocol__tdap__client__refarymem, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__autoMemory, _p_bzs__db__protocol__tdap__client__autoMemoryTo_p_bzs__db__protocol__tdap__client__refarymem, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__fields, _p_bzs__db__protocol__tdap__client__fieldsTo_p_bzs__db__protocol__tdap__client__refarymem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__sortField[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__sortField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__sortFields[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__sortFields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__sum[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__sum, 0, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__max, _p_bzs__db__protocol__tdap__client__maxTo_p_bzs__db__protocol__tdap__client__sum, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__avg, _p_bzs__db__protocol__tdap__client__avgTo_p_bzs__db__protocol__tdap__client__sum, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__client__min, _p_bzs__db__protocol__tdap__client__minTo_p_bzs__db__protocol__tdap__client__sum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__table[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__writableRecord[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__writableRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__fielddef[] = {  {&_swigt__p_bzs__db__protocol__tdap__fielddef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__fielddef_tT_20_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__fielddef_tT_20_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__fielddef_tT_64_t[] = {  {&_swigt__p_bzs__db__protocol__tdap__fielddef, _p_bzs__db__protocol__tdap__fielddefTo_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0, 0},  {&_swigt__p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__keySegment[] = {  {&_swigt__p_bzs__db__protocol__tdap__keySegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__keydef[] = {  {&_swigt__p_bzs__db__protocol__tdap__keydef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__tabledef[] = {  {&_swigt__p_bzs__db__protocol__tdap__tabledef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__rtl__benchmark[] = {  {&_swigt__p_bzs__rtl__benchmark, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short[] = {  {&_swigt__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_bzs__db__protocol__tdap__client__memoryRecord[] = {{&_swigt__p_p_bzs__db__protocol__tdap__client__memoryRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_bzs__db__protocol__tdap__client__writableRecord[] = {{&_swigt__p_p_bzs__db__protocol__tdap__client__writableRecord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_bzs__db__protocol__tdap__client__fields[] = {{&_swigt__p_p_bzs__db__protocol__tdap__client__fields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_bzs__db__protocol__tdap__client__fieldsBase[] = {  {&_swigt__p_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0, 0},  {&_swigt__p_p_bzs__db__protocol__tdap__client__memoryRecord, _p_p_bzs__db__protocol__tdap__client__memoryRecordTo_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},  {&_swigt__p_p_bzs__db__protocol__tdap__client__writableRecord, _p_p_bzs__db__protocol__tdap__client__writableRecordTo_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},  {&_swigt__p_p_bzs__db__protocol__tdap__client__fields, _p_p_bzs__db__protocol__tdap__client__fieldsTo_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_bzs__db__protocol__tdap__tabledef[] = {  {&_swigt__p_p_bzs__db__protocol__tdap__tabledef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_preparedQuery[] = {  {&_swigt__p_preparedQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std___tstring[] = {  {&_swigt__p_std___tstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator[] = {  {&_swigt__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_trdVersiton[] = {  {&_swigt__p_trdVersiton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__first[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__first, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bzs__db__protocol__tdap__client__last[] = {  {&_swigt__p_bzs__db__protocol__tdap__client__last, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BOOKMARK[] = { { &_swigt__p_BOOKMARK, 0, 0, 0 }, { 0, 0, 0, 0 } };

static swig_cast_info *swig_cast_initial[] = {
  _swigc__bool,
  _swigc__int,
  _swigc__p_HWND,
  _swigc__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t,
  _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t,
  _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t,
  _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t,
  _swigc__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t,
  _swigc__p_boost__timer,
  _swigc__p_bzs__db__protocol__tdap__FLAGS,
  _swigc__p_bzs__db__protocol__tdap__btrDate,
  _swigc__p_bzs__db__protocol__tdap__btrDateTime,
  _swigc__p_bzs__db__protocol__tdap__btrTime,
  _swigc__p_bzs__db__protocol__tdap__btrTimeStamp,
  _swigc__p_bzs__db__protocol__tdap__btrVersion,
  _swigc__p_bzs__db__protocol__tdap__btrVersions,
  _swigc__p_bzs__db__protocol__tdap__client__activeTable,
  _swigc__p_bzs__db__protocol__tdap__client__autoMemory,
  _swigc__p_bzs__db__protocol__tdap__client__avg,
  _swigc__p_bzs__db__protocol__tdap__client__connectParams,
  _swigc__p_bzs__db__protocol__tdap__client__count,
  _swigc__p_bzs__db__protocol__tdap__client__database,
  _swigc__p_bzs__db__protocol__tdap__client__dbdef,
  _swigc__p_bzs__db__protocol__tdap__client__field,
  _swigc__p_bzs__db__protocol__tdap__client__fieldNames,
  _swigc__p_bzs__db__protocol__tdap__client__fieldShare,
  _swigc__p_bzs__db__protocol__tdap__client__fielddefs,
  _swigc__p_bzs__db__protocol__tdap__client__fields,
  _swigc__p_bzs__db__protocol__tdap__client__fieldsBase,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__groupFuncBase,
  _swigc__p_bzs__db__protocol__tdap__client__groupQuery,
  _swigc__p_bzs__db__protocol__tdap__client__idatabaseManager,
  _swigc__p_bzs__db__protocol__tdap__client__max,
  _swigc__p_bzs__db__protocol__tdap__client__memoryRecord,
  _swigc__p_bzs__db__protocol__tdap__client__min,
  _swigc__p_bzs__db__protocol__tdap__client__nsdatabase,
  _swigc__p_bzs__db__protocol__tdap__client__nstable,
  _swigc__p_bzs__db__protocol__tdap__client__pooledDbManager,
  _swigc__p_bzs__db__protocol__tdap__client__preparedQuery,
  _swigc__p_bzs__db__protocol__tdap__client__query,
  _swigc__p_bzs__db__protocol__tdap__client__queryBase,
  _swigc__p_bzs__db__protocol__tdap__client__recordset,
  _swigc__p_bzs__db__protocol__tdap__client__recordsetQuery,
  _swigc__p_bzs__db__protocol__tdap__client__refarymem,
  _swigc__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t,
  _swigc__p_bzs__db__protocol__tdap__client__sortFields,
  _swigc__p_bzs__db__protocol__tdap__client__sum,
  _swigc__p_bzs__db__protocol__tdap__client__table,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t,
  _swigc__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t,
  _swigc__p_bzs__db__protocol__tdap__client__writableRecord,
  _swigc__p_bzs__db__protocol__tdap__fielddef,
  _swigc__p_bzs__db__protocol__tdap__fielddef_tT_20_t,
  _swigc__p_bzs__db__protocol__tdap__fielddef_tT_64_t,
  _swigc__p_bzs__db__protocol__tdap__keySegment,
  _swigc__p_bzs__db__protocol__tdap__keydef,
  _swigc__p_bzs__db__protocol__tdap__tabledef,
  _swigc__p_bzs__rtl__benchmark,
  _swigc__p_char,
  _swigc__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_p_bzs__db__protocol__tdap__client__fields,
  _swigc__p_p_bzs__db__protocol__tdap__client__fieldsBase,
  _swigc__p_p_bzs__db__protocol__tdap__client__memoryRecord,
  _swigc__p_p_bzs__db__protocol__tdap__client__writableRecord,
  _swigc__p_p_bzs__db__protocol__tdap__tabledef,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_preparedQuery,
  _swigc__p_short,
  _swigc__p_std___tstring,
  _swigc__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator,
  _swigc__p_trdVersiton,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__p_bzs__db__protocol__tdap__client__first,
  _swigc__p_bzs__db__protocol__tdap__client__last,
  _swigc__p_bzs__db__protocol__tdap__client__sortField,
  _swigc__p_BOOKMARK,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_bzs__db__protocol__tdap__client__table=0; /* handle for table */
static int le_swig__p_iterator=0; /* handle for _p_iterator */
static int le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t=0; /* handle for _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t */
static int le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t=0; /* handle for _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t */
static int le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t=0; /* handle for _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t */
static int le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t=0; /* handle for _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t */
static int le_swig__p_bzs__db__protocol__tdap__client__database=0; /* handle for database */
static int le_swig__p_bzs__db__protocol__tdap__client__nsdatabase=0; /* handle for nsdatabase */
static int le_swig__p_bzs__db__protocol__tdap__client__dbdef=0; /* handle for dbdef */
static int le_swig__p_bzs__db__protocol__tdap__fielddef_tT_64_t=0; /* handle for fielddef_t_my */
static int le_swig__p_bzs__db__protocol__tdap__client__fieldShare=0; /* handle for _p_bzs__db__protocol__tdap__client__fieldShare */
static int le_swig__p_bzs__db__protocol__tdap__client__pooledDbManager=0; /* handle for pooledDbManager */
static int le_swig__p_bzs__db__protocol__tdap__fielddef_tT_20_t=0; /* handle for _p_bzs__db__protocol__tdap__fielddef_tT_20_t */
static int le_swig__p_bzs__db__protocol__tdap__client__sortField=0; /* handle for sortField */
static int le_swig__p_unsigned_short=0; /* handle for _p_unsigned_short */
static int le_swig__p_short=0; /* handle for _p_short */
static int le_swig__p_bzs__db__protocol__tdap__client__recordset=0; /* handle for Recordset */
static int le_swig__p_boost__timer=0; /* handle for _p_boost__timer */
static int le_swig__p_bzs__db__protocol__tdap__client__groupQuery=0; /* handle for groupQuery */
static int le_swig__p_p_bzs__db__protocol__tdap__tabledef=0; /* handle for _p_p_bzs__db__protocol__tdap__tabledef */
static int le_swig__p_bzs__db__protocol__tdap__tabledef=0; /* handle for tabledef */
static int le_swig__p_bzs__db__protocol__tdap__client__groupFuncBase=0; /* handle for groupFuncBase */
static int le_swig__p_bzs__db__protocol__tdap__client__fieldsBase=0; /* handle for Record */
static int le_swig__p_bzs__db__protocol__tdap__FLAGS=0; /* handle for FLAGS */
static int le_swig__p_p_bzs__db__protocol__tdap__client__fieldsBase=0; /* handle for _p_p_bzs__db__protocol__tdap__client__fieldsBase */
static int le_swig__p_bzs__db__protocol__tdap__client__count=0; /* handle for count */
static int le_swig__p_void=0; /* handle for _p_void */
static int le_swig__p_p_void=0; /* handle for _p_p_void */
static int le_swig__p_bzs__db__protocol__tdap__client__sum=0; /* handle for sum */
static int le_swig__p_bzs__db__protocol__tdap__client__first=0; /* handle for first */
static int le_swig__p_bzs__db__protocol__tdap__client__last=0; /* handle for last */
static int le_swig__p_int=0; /* handle for _p_int */
static int le_swig__p_bzs__db__protocol__tdap__client__avg=0; /* handle for avg */
static int le_swig__p_bzs__db__protocol__tdap__client__queryBase=0; /* handle for queryBase */
static int le_swig__p_bzs__db__protocol__tdap__fielddef=0; /* handle for fielddef */
static int le_swig__p_std___tstring=0; /* handle for _p_std___tstring */
static int le_swig__p_bzs__db__protocol__tdap__client__fieldNames=0; /* handle for fieldNames */
static int le_swig__p_bzs__db__protocol__tdap__btrVersion=0; /* handle for btrVersion */
static int le_swig__p_bzs__db__protocol__tdap__btrDate=0; /* handle for btrDate */
static int le_swig__p_preparedQuery=0; /* handle for _p_preparedQuery */
static int le_swig__p_bzs__db__protocol__tdap__client__preparedQuery=0; /* handle for preparedQuery */
static int le_swig__p_bzs__db__protocol__tdap__client__fielddefs=0; /* handle for fielddefs */
static int le_swig__p_bzs__db__protocol__tdap__client__field=0; /* handle for field */
static int le_swig__p_bzs__db__protocol__tdap__client__nstable=0; /* handle for nstable */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_bzs__db__protocol__tdap__btrTimeStamp=0; /* handle for btrTimeStamp */
static int le_swig__p_bzs__db__protocol__tdap__client__max=0; /* handle for max */
static int le_swig__p_p_char=0; /* handle for _p_p_char */
static int le_swig__p_char=0; /* handle for _p_char */
static int le_swig__p_bzs__db__protocol__tdap__keySegment=0; /* handle for keySegment */
static int le_swig__p_bzs__db__protocol__tdap__client__writableRecord=0; /* handle for writableRecord */
static int le_swig__p_bzs__db__protocol__tdap__client__memoryRecord=0; /* handle for memoryRecord */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t=0; /* handle for _p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t */
static int le_swig__p_bzs__db__protocol__tdap__client__min=0; /* handle for min */
static int le_swig__p_bzs__db__protocol__tdap__client__connectParams=0; /* handle for connectParams */
static int le_swig__p_bzs__db__protocol__tdap__btrDateTime=0; /* handle for btrDateTime */
static int le_swig__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t=0; /* handle for _p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t */
static int le_swig__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short=0; /* handle for _p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short */
static int le_swig__p_HWND=0; /* handle for _p_HWND */
static int le_swig__p_bzs__db__protocol__tdap__client__recordsetQuery=0; /* handle for recordsetQuery */
static int le_swig__p_bzs__rtl__benchmark=0; /* handle for benchmark */
static int le_swig__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t */
static int le_swig__bool=0; /* handle for _bool */
static int le_swig__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t=0; /* handle for _p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t */
static int le_swig__p_unsigned_int=0; /* handle for _p_unsigned_int */
static int le_swig__p_unsigned_char=0; /* handle for _p_unsigned_char */
static int le_swig__p_bzs__db__protocol__tdap__client__activeTable=0; /* handle for activeTable */
static int le_swig__p_bzs__db__protocol__tdap__btrTime=0; /* handle for btrTime */
static int le_swig__p_bzs__db__protocol__tdap__btrVersions=0; /* handle for btrVersions */
static int le_swig__p_bzs__db__protocol__tdap__client__query=0; /* handle for query */
static int le_swig__p_bzs__db__protocol__tdap__client__fields=0; /* handle for _p_bzs__db__protocol__tdap__client__fields */
static int le_swig__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator=0; /* handle for _p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator */
static int le_swig__p_bzs__db__protocol__tdap__client__sortFields=0; /* handle for sortFields */
static int le_swig__p_bzs__db__protocol__tdap__keydef=0; /* handle for keydef */
static int le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t */
static int le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t=0; /* handle for _p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t */
static int le_swig__p_BOOKMARK = 0; /* handle for BOOKMARK */
/* end vdecl subsection */
/* wrapper section */


ZEND_NAMED_FUNCTION(_wrap_new_BOOKMARK) {
	BOOKMARK *result = 0;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 0) {
		WRONG_PARAM_COUNT;
	}

	{
		try {
			result = (BOOKMARK *)new BOOKMARK();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_BOOKMARK, 1);

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_BOOKMARK_isEmpty) {
	BOOKMARK *arg1 = (BOOKMARK *)0;
	zval **args[1];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_BOOKMARK, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BOOKMARK_isEmpty. Expected SWIGTYPE_p_BOOKMARK");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			result = (bool)(arg1)->isEmpty();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_BOOKMARK(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
	swig_object_wrapper *value = (swig_object_wrapper *)rsrc->ptr;
	void *ptr = value->ptr;
	int newobject = value->newobject;
	BOOKMARK *arg1 = (BOOKMARK *)0;

	efree(value);
	if (!newobject) return; /* can't delete it! */
	arg1 = (BOOKMARK *)SWIG_ZTS_ConvertResourceData(ptr, type_name, SWIGTYPE_p_BOOKMARK TSRMLS_CC);
	if (!arg1) zend_error(E_ERROR, "BOOKMARK resource already free'd");
	{
		try {
			delete arg1;
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_canRecoverNetError) {
	short arg1;
	zval **args[1];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}


	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,7,CONVERT_INT_IN@*/
	convert_to_long_ex(args[0]);
	arg1 = (short)Z_LVAL_PP(args[0]);
	/*@SWIG@*/;

	{
		try {
			result = (bool)canRecoverNetError(arg1);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_all_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_all_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->all = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_all_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_all_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->all);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit0_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit0_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit0 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit0_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit0_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit0);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit1_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit1_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit1 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit1_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit1_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit2_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit2_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit2 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit2_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit2_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit3_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit3_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit3 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit3_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit3_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit4_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit4_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit4 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit4_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit4_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit5_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit5_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit5 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit5_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit5_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit6_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit6_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit6 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit6_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit6_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit6);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit7_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit7_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit7 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit7_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit7_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit7);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit8_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit8_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit8 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit8_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit8_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit8);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit9_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit9_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bit9 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bit9_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bit9_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bit9);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitA_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitA_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitA = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitA_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitA_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitA);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitB_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitB_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitB = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitB_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitB_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitB);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitC_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitC_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitC = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitC_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitC_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitC);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitD_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitD_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitD = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitD_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitD_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitD);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitE_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitE_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitE = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitE_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitE_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitE);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitF_set) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  unsigned short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitF_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->bitF = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FLAGS_bitF_get) {
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FLAGS_bitF_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned short) ((arg1)->bitF);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_FLAGS) {
  bzs::db::protocol::tdap::FLAGS *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::FLAGS *)new bzs::db::protocol::tdap::FLAGS();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_FLAGS(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::FLAGS *arg1 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::FLAGS *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::FLAGS resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keySegment_fieldNum_set) {
  bzs::db::protocol::tdap::keySegment *arg1 = (bzs::db::protocol::tdap::keySegment *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keySegment_fieldNum_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keySegment");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->fieldNum = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keySegment_fieldNum_get) {
  bzs::db::protocol::tdap::keySegment *arg1 = (bzs::db::protocol::tdap::keySegment *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keySegment_fieldNum_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keySegment");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->fieldNum);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keySegment_flags_set) {
  bzs::db::protocol::tdap::keySegment *arg1 = (bzs::db::protocol::tdap::keySegment *) 0 ;
  bzs::db::protocol::tdap::FLAGS *arg2 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keySegment_flags_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keySegment");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of keySegment_flags_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if (arg1) (arg1)->flags = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keySegment_flags_get) {
  bzs::db::protocol::tdap::keySegment *arg1 = (bzs::db::protocol::tdap::keySegment *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::FLAGS *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keySegment_flags_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keySegment");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::FLAGS *)& ((arg1)->flags);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_keySegment) {
  bzs::db::protocol::tdap::keySegment *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::keySegment *)new bzs::db::protocol::tdap::keySegment();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_keySegment(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::keySegment *arg1 = (bzs::db::protocol::tdap::keySegment *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::keySegment *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__keySegment TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::keySegment resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_segmentCount_set) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_segmentCount_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->segmentCount = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_segmentCount_get) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_segmentCount_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->segmentCount);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_segments_set) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  bzs::db::protocol::tdap::keySegment *arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_segments_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of keydef_segments_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keySegment");
    }
  }
  {
    size_t ii;
    bzs::db::protocol::tdap::keySegment *b = (bzs::db::protocol::tdap::keySegment *) arg1->segments;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((bzs::db::protocol::tdap::keySegment *) arg2 + ii);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_segments_get) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::keySegment *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_segments_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::keySegment *)(bzs::db::protocol::tdap::keySegment *) ((arg1)->segments);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_keyNumber_set) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_keyNumber_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->keyNumber = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_keyNumber_get) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_keyNumber_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->keyNumber);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_keydef_segment) {
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::keySegment *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of keydef_segment. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::keySegment *)bzs_db_protocol_tdap_keydef_segment(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_keydef) {
  bzs::db::protocol::tdap::keydef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::keydef *)new bzs::db::protocol::tdap::keydef();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_keydef(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::keydef *arg1 = (bzs::db::protocol::tdap::keydef *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::keydef *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__keydef TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::keydef resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MYSQL_FDNAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::MYSQL_FDNAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_MYSQL_TBNAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::MYSQL_TBNAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_PERVASIVE_FDNAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::PERVASIVE_FDNAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FIELD_NAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::FIELD_NAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TABLE_NAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::TABLE_NAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_FILE_NAME_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::FILE_NAME_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_TABLEDEF_FILLER_SIZE_get) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)(int)bzs::db::protocol::tdap::TABLEDEF_FILLER_SIZE;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_getTypeName) {
  short arg1 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (short) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::getTypeName(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_getTypeAlign) {
  short arg1 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (short) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (int)bzs::db::protocol::tdap::getTypeAlign(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_lenByCharnum) {
  uchar_td arg1 ;
  uchar_td arg2 ;
  ushort_td arg3 ;
  zval **args[3];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (uchar_td) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ushort_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (ushort_td)bzs::db::protocol::tdap::lenByCharnum(arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_isStringType) {
  uchar_td arg1 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (uchar_td) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)bzs::db::protocol::tdap::isStringType(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_type_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_type_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->type = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_type_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_type_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->type);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_len_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_len_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->len = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_len_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_len_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->len);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_decimals_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_decimals_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->decimals = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_decimals_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_decimals_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->decimals);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_max_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_max_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->max = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_max_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_max_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->max);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_min_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_min_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->min = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_min_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_min_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->min);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_pos_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_pos_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->pos = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_pos_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_pos_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->pos);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_ddfid_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_ddfid_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->ddfid = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_ddfid_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_ddfid_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->ddfid);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_nullValue_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_nullValue_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->nullValue = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_nullValue_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_nullValue_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->nullValue);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_keylen_set) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_keylen_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->keylen = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_t_my_keylen_get) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_t_my_keylen_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->keylen);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_fielddef_t_my) {
  bzs::db::protocol::tdap::fielddef_t< 64 > *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef_t< 64 > *)new bzs::db::protocol::tdap::fielddef_t< 64 >();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_fielddef_t_my(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::fielddef_t< 64 > *arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::fielddef_t< 64 > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::fielddef_t<(64)> resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_setName) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_setName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_typeName) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_typeName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::fielddef const *)arg1)->typeName();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_align) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_align. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::fielddef const *)arg1)->align();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_setLenByCharnum) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_setLenByCharnum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setLenByCharnum(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_codePage) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_codePage. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (unsigned int)((bzs::db::protocol::tdap::fielddef const *)arg1)->codePage();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_varLenBytes) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_varLenBytes. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::fielddef const *)arg1)->varLenBytes();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_blobLenBytes) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_blobLenBytes. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uint_td)((bzs::db::protocol::tdap::fielddef const *)arg1)->blobLenBytes();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_isStringType) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_isStringType. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::fielddef const *)arg1)->isStringType();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_isNumericType) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_isNumericType. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::fielddef const *)arg1)->isNumericType();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_charNum) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_charNum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (unsigned int)((bzs::db::protocol::tdap::fielddef const *)arg1)->charNum();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_setCharsetIndex) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_setCharsetIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setCharsetIndex(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_charsetIndex) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_charsetIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uchar_td)((bzs::db::protocol::tdap::fielddef const *)arg1)->charsetIndex();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_name) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_name. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char *)bzs_db_protocol_tdap_fielddef_name((bzs::db::protocol::tdap::fielddef const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_trimPadChar) {
  bzs::db::protocol::tdap::fielddef *arg1 = 0;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_trimPadChar. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::fielddef const *)arg1)->trimPadChar();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_usePadChar) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_usePadChar. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::fielddef const *)arg1)->usePadChar();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddef_setPadCharSettings) {
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  bool arg2 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddef_setUsePadChar. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setPadCharSettings(arg2, arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_fielddef) {
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef *)new bzs::db::protocol::tdap::fielddef();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_fielddef(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::fielddef *arg1 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::fielddef *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__fielddef TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::fielddef resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_tabledef) {
  bzs::db::protocol::tdap::tabledef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::tabledef *)new bzs::db::protocol::tdap::tabledef();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_cleanup) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_cleanup. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->cleanup();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fileName) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fileName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char *)((bzs::db::protocol::tdap::tabledef const *)arg1)->fileName();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_tableName) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_tableName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char *)((bzs::db::protocol::tdap::tabledef const *)arg1)->tableName();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_setFileName) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_setFileName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setFileName((char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_setTableName) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_setTableName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setTableName((char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_toChar) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_toChar. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)(arg1)->toChar(arg2,(char const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_id_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_id_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->id = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_id_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_id_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->id);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_pageSize_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_pageSize_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->pageSize = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_pageSize_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_pageSize_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->pageSize);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_varSize_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_varSize_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->varSize = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_varSize_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_varSize_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->varSize);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_preAlloc_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_preAlloc_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->preAlloc = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_preAlloc_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_preAlloc_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->preAlloc);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fieldCount_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fieldCount_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->fieldCount = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fieldCount_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fieldCount_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->fieldCount);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_keyCount_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_keyCount_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->keyCount = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_keyCount_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_keyCount_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->keyCount);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_version_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_version_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->version = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_version_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_version_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (short) ((arg1)->version);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_charsetIndex_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_charsetIndex_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->charsetIndex = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_charsetIndex_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_charsetIndex_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->charsetIndex);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_flags_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  bzs::db::protocol::tdap::FLAGS *arg2 = (bzs::db::protocol::tdap::FLAGS *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_flags_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of tabledef_flags_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS");
    }
  }
  if (arg1) (arg1)->flags = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_flags_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::FLAGS *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_flags_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::FLAGS *)& ((arg1)->flags);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_primaryKeyNum_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  uchar_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_primaryKeyNum_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uchar_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->primaryKeyNum = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_primaryKeyNum_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_primaryKeyNum_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uchar_td) ((arg1)->primaryKeyNum);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_maxRecordLen_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_maxRecordLen_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->maxRecordLen = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_maxRecordLen_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_maxRecordLen_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->maxRecordLen);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_ddfid_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_ddfid_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->ddfid = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_ddfid_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_ddfid_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->ddfid);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fixedRecordLen_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fixedRecordLen_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->fixedRecordLen = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fixedRecordLen_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fixedRecordLen_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->fixedRecordLen);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_schemaCodePage_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  uint_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_schemaCodePage_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (uint_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->schemaCodePage = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_schemaCodePage_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_schemaCodePage_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint_td) ((arg1)->schemaCodePage);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_parent_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  bzs::db::protocol::tdap::client::dbdef *arg2 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_parent_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of tabledef_parent_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if (arg1) (arg1)->parent = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_parent_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::dbdef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_parent_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::client::dbdef *) ((arg1)->parent);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fieldDefs_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  bzs::db::protocol::tdap::fielddef *arg2 = (bzs::db::protocol::tdap::fielddef *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fieldDefs_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of tabledef_fieldDefs_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  if (arg1) (arg1)->fieldDefs = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fieldDefs_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fieldDefs_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::fielddef *) ((arg1)->fieldDefs);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_keyDefs_set) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  bzs::db::protocol::tdap::keydef *arg2 = (bzs::db::protocol::tdap::keydef *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_keyDefs_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of tabledef_keyDefs_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__keydef");
    }
  }
  if (arg1) (arg1)->keyDefs = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_keyDefs_get) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::keydef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_keyDefs_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::keydef *) ((arg1)->keyDefs);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_fieldDef) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_fieldDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef *)bzs_db_protocol_tdap_tabledef_fieldDef(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_tabledef_keyDef) {
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::keydef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of tabledef_keyDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::keydef *)bzs_db_protocol_tdap_tabledef_keyDef(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_tabledef(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::tabledef *arg1 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::tabledef *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__tabledef TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::tabledef resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_majorVersion_set) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_majorVersion_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->majorVersion = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_majorVersion_get) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_majorVersion_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->majorVersion);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_minorVersion_set) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_minorVersion_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->minorVersion = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_minorVersion_get) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_minorVersion_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (ushort_td) ((arg1)->minorVersion);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_type_set) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  unsigned char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_type_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned char) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->type = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_type_get) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  zval **args[1];
  unsigned char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_type_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (unsigned char) ((arg1)->type);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_moduleVersionShortString) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_moduleVersionShortString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)(arg1)->moduleVersionShortString(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersion_moduleTypeString) {
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersion_moduleTypeString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)(arg1)->moduleTypeString();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrVersion) {
  bzs::db::protocol::tdap::btrVersion *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrVersion *)new bzs::db::protocol::tdap::btrVersion();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrVersion(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrVersion *arg1 = (bzs::db::protocol::tdap::btrVersion *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrVersion *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrVersion resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersions_versions_set) {
  bzs::db::protocol::tdap::btrVersions *arg1 = (bzs::db::protocol::tdap::btrVersions *) 0 ;
  bzs::db::protocol::tdap::btrVersion *arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersions_versions_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of btrVersions_versions_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion");
    }
  }
  {
    size_t ii;
    bzs::db::protocol::tdap::btrVersion *b = (bzs::db::protocol::tdap::btrVersion *) arg1->versions;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((bzs::db::protocol::tdap::btrVersion *) arg2 + ii);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersions_versions_get) {
  bzs::db::protocol::tdap::btrVersions *arg1 = (bzs::db::protocol::tdap::btrVersions *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrVersion *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersions_versions_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::btrVersion *)(bzs::db::protocol::tdap::btrVersion *) ((arg1)->versions);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrVersions_version) {
  bzs::db::protocol::tdap::btrVersions *arg1 = (bzs::db::protocol::tdap::btrVersions *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::btrVersion *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrVersions_version. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrVersion *)bzs_db_protocol_tdap_btrVersions_version(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrVersions) {
  bzs::db::protocol::tdap::btrVersions *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrVersions *)new bzs::db::protocol::tdap::btrVersions();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrVersions(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrVersions *arg1 = (bzs::db::protocol::tdap::btrVersions *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrVersions *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrVersions resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_getFilterLogicTypeCode) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  zval **args[1];
  uchar_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    try {
      result = (uchar_td)bzs::db::protocol::tdap::getFilterLogicTypeCode((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_nsdb) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::nsdatabase *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_nsdb. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::nsdatabase *)((bzs::db::protocol::tdap::client::nstable const *)arg1)->nsdb();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tableid) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tableid. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::nstable const *)arg1)->tableid();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setTableid) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_setTableid. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setTableid(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_isOpen) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_isOpen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->isOpen();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_isUseTransactd) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_isUseTransactd. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->isUseTransactd();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setAccessRights) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  unsigned char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_setAccessRights. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (unsigned char) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setAccessRights(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_datalen) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_datalen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uint_td)((bzs::db::protocol::tdap::client::nstable const *)arg1)->datalen();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stat) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stat. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)((bzs::db::protocol::tdap::client::nstable const *)arg1)->stat();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_keyNum) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_keyNum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::nstable const *)arg1)->keyNum();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setKeyNum) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  char_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_setKeyNum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (char_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setKeyNum(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_canRead) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_canRead. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->canRead();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_canWrite) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_canWrite. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->canWrite();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_canInsert) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_canInsert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->canInsert();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_canDelete) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_canDelete. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nstable const *)arg1)->canDelete();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_getWriteImageLen) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_getWriteImageLen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uint_td)(arg1)->getWriteImageLen();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_close) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_close. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->close();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_update__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bzs::db::protocol::tdap::client::nstable::eUpdateType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_update. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (bzs::db::protocol::tdap::client::nstable::eUpdateType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->update(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_update__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_update. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->update();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_update) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_update__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_update__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_update'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_del__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_del. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->del(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_del__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_del. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->del();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_del) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_del__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_del__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_del'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_insert__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_insert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (ushort_td)(arg1)->insert(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_insert__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_insert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (ushort_td)(arg1)->insert();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_insert) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_insert__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_insert__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_insert'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_createIndex__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_createIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->createIndex(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_createIndex__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_createIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->createIndex();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_createIndex) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_createIndex__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_createIndex__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_createIndex'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_dropIndex__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_dropIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->dropIndex(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_dropIndex__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_dropIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->dropIndex();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_dropIndex) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_dropIndex__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_dropIndex__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_dropIndex'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_recordCount__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  bool arg3 ;
  zval **args[3];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_recordCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (uint_td)(arg1)->recordCount(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_recordCount__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_recordCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (uint_td)(arg1)->recordCount(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_recordCount__SWIG_2) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_recordCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uint_td)(arg1)->recordCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_recordCount) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_recordCount__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_recordCount__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_nstable_recordCount__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_recordCount'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapLastErr) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  HWND arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  HWND *tmp2 ;
  zval **args[3];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tdapLastErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_tdapLastErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapErr__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  HWND arg2 ;
  HWND *tmp2 ;
  zval **args[2];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tdapErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_beginBulkInsert) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_beginBulkInsert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->beginBulkInsert(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_abortBulkInsert) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_abortBulkInsert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->abortBulkInsert();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_commitBulkInsert__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  zval **args[2];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_commitBulkInsert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (ushort_td)(arg1)->commitBulkInsert(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_commitBulkInsert__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_commitBulkInsert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (ushort_td)(arg1)->commitBulkInsert();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_commitBulkInsert) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_commitBulkInsert__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_nstable_commitBulkInsert__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_commitBulkInsert'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekFirst__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekFirst. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seekFirst(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekFirst__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekFirst. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seekFirst();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekFirst) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seekFirst__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seekFirst__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekFirst'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekLast__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekLast. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seekLast(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekLast__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekLast. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seekLast();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekLast) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seekLast__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seekLast__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekLast'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekPrev__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seekPrev(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekPrev__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seekPrev();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekPrev) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seekPrev__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seekPrev__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekPrev'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekNext__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seekNext(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekNext__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seekNext();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekNext) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seekNext__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seekNext__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekNext'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seek__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seek. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seek(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seek__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seek. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seek();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seek) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seek__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seek__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seek'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekGreater) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  bool arg2 ;
  ushort_td arg3 = LOCK_BIAS_DEFAULT;
  zval **args[3];
  int argc = ZEND_NUM_ARGS();
   
  SWIG_ResetError(TSRMLS_C);
  if((argc > 3 || argc < 2) || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekGreater. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  
  if (argc == 3)
  {
    convert_to_long_ex(args[2]);
    arg3 = (ushort_td) Z_LVAL_PP(args[2]);
  }

  
  {
    try {
      (arg1)->seekGreater(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekLessThan) {
  bzs::db::protocol::tdap::client::nstable *arg1 = 0 ;
  bool arg2 ;
  ushort_td arg3 = LOCK_BIAS_DEFAULT;
  zval **args[3];
  int argc = ZEND_NUM_ARGS();
  
  SWIG_ResetError(TSRMLS_C);
  if((argc > 3 || argc < 2) || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekLessThan. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  
  if (argc == 3)
  {
    convert_to_long_ex(args[2]);
    arg3 = (ushort_td) Z_LVAL_PP(args[2]);
  }
  
  {
    try {
      (arg1)->seekLessThan(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepFirst__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepFirst. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stepFirst(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepFirst__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepFirst. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->stepFirst();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepFirst) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_stepFirst__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_stepFirst__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_stepFirst'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepLast__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepLast. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stepLast(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepLast__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepLast. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->stepLast();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepLast) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_stepLast__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_stepLast__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_stepLast'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepPrev__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stepPrev(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepPrev__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->stepPrev();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepPrev) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_stepPrev__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_stepPrev__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_stepPrev'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepNext__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  ushort_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (ushort_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stepNext(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepNext__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stepNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->stepNext();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stepNext) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_stepNext__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_stepNext__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_stepNext'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_bookmarkLen) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	zval **args[1];
	ushort_td result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_bookmarkLen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			result = (ushort_td)((bzs::db::protocol::tdap::client::nstable const *)arg1)->bookmarkLen();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_LONG(return_value, result);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_bookmark) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  bookmark_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_bookmark. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bookmark_td)(arg1)->bookmark();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
	  bookmark_td * resultobj = new bookmark_td((const bookmark_td &)result);
	  SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_BOOKMARK, 1);
  }

  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByBookmark__SWIG_2) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	bookmark_td *arg2 = 0;
	ushort_td arg3;
	zval **args[3];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekByBookmark. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		if (SWIG_ConvertPtr(*args[1], (void **)&arg2, SWIGTYPE_p_BOOKMARK, 0) < 0 || arg2 == NULL) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_seekByBookmark. Expected SWIGTYPE_p_BOOKMARK");
		}
	}

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,7,CONVERT_INT_IN@*/
	convert_to_long_ex(args[2]);
	arg3 = (ushort_td)Z_LVAL_PP(args[2]);
	/*@SWIG@*/;

	{
		try {
			(arg1)->seekByBookmark(*arg2, arg3);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByBookmark__SWIG_3) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	bookmark_td *arg2 = 0;
	zval **args[2];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekByBookmark. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		if (SWIG_ConvertPtr(*args[1], (void **)&arg2, SWIGTYPE_p_BOOKMARK, 0) < 0 || arg2 == NULL) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_seekByBookmark. Expected SWIGTYPE_p_BOOKMARK");
		}
	}
	{
		try {
			(arg1)->seekByBookmark(*arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByBookmark__SWIG_4) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	zval **args[1];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekByBookmark. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			(arg1)->seekByBookmark();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByBookmark) {
	int argc;
	zval **argv[3];

	argc = ZEND_NUM_ARGS();
	zend_get_parameters_array_ex(argc, argv);
	if (argc == 1) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			_wrap_nstable_seekByBookmark__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			{
				void *tmp;
				_v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_BOOKMARK, 0) >= 0);
			}
			if (_v) {
				_wrap_nstable_seekByBookmark__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}
	if (argc == 3) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			{
				void *tmp;
				_v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_BOOKMARK, 0) >= 0);
			}
			if (_v) {
				_v = (Z_TYPE_PP(argv[2]) == IS_LONG);
				if (_v) {
					_wrap_nstable_seekByBookmark__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
				}
			}
		}
	}

	SWIG_ErrorCode() = E_ERROR;
	SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekByBookmark'";
	SWIG_FAIL(TSRMLS_C);
}



ZEND_NAMED_FUNCTION(_wrap_nstable_getPercentage__SWIG_0) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	zval **args[1];
	percentage_td result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_getPercentage. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			result = (percentage_td)(arg1)->getPercentage();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_LONG(return_value, result);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_getPercentage__SWIG_1) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	bookmark_td *arg2 = 0;
	zval **args[2];
	percentage_td result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_getPercentage. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		if (SWIG_ConvertPtr(*args[1], (void **)&arg2, SWIGTYPE_p_BOOKMARK, 0) < 0 || arg2 == NULL) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_getPercentage. Expected SWIGTYPE_p_BOOKMARK");
		}
	}
	{
		try {
			result = (percentage_td)(arg1)->getPercentage(*arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_LONG(return_value, result);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_getPercentage) {
	int argc;
	zval **argv[2];

	argc = ZEND_NUM_ARGS();
	zend_get_parameters_array_ex(argc, argv);
	if (argc == 1) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			_wrap_nstable_getPercentage__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			{
				void *tmp;
				_v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_BOOKMARK, 0) >= 0);
			}
			if (_v) {
				_wrap_nstable_getPercentage__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}

	SWIG_ErrorCode() = E_ERROR;
	SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_getPercentage'";
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByPercentage__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekByPercentage. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->seekByPercentage();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByPercentage__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  percentage_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_seekByPercentage. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (percentage_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->seekByPercentage(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_seekByPercentage) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _wrap_nstable_seekByPercentage__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_seekByPercentage__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_seekByPercentage'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setOwnerName__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  char_td arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_setOwnerName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (char_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setOwnerName((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setOwnerName__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_setOwnerName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->setOwnerName((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_setOwnerName) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_nstable_setOwnerName__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_nstable_setOwnerName__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_setOwnerName'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_clearOwnerName) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_clearOwnerName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clearOwnerName();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_recordLength) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_recordLength. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (ushort_td)(arg1)->recordLength();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stats__SWIG_0) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  void *arg2 = (void *) 0 ;
  uint_td arg3 ;
  bool arg4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stats. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_stats. Expected SWIGTYPE_p_p_void");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stats(arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stats__SWIG_1) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  void *arg2 = (void *) 0 ;
  uint_td arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_stats. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_stats. Expected SWIGTYPE_p_p_void");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->stats(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_stats) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, 0, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_nstable_stats__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, 0, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _wrap_nstable_stats__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_stats'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_unlock__SWIG_0) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	bookmark_td *arg2 = 0;
	zval **args[2];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_unlock. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		if (SWIG_ConvertPtr(*args[1], (void **)&arg2, SWIGTYPE_p_BOOKMARK, 0) < 0 || arg2 == NULL) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nstable_unlock. Expected SWIGTYPE_p_BOOKMARK");
		}
	}
	{
		try {
			(arg1)->unlock(*arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_unlock__SWIG_1) {
	bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0;
	zval **args[1];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_unlock. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			(arg1)->unlock();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_unlock) {
	int argc;
	zval **argv[2];

	argc = ZEND_NUM_ARGS();
	zend_get_parameters_array_ex(argc, argv);
	if (argc == 1) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			_wrap_nstable_unlock__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
		}
		if (_v) {
			{
				void *tmp;
				_v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_BOOKMARK, 0) >= 0);
			}
			if (_v) {
				_wrap_nstable_unlock__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}

	SWIG_ErrorCode() = E_ERROR;
	SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_unlock'";
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_mode) {
  bzs::db::protocol::tdap::client::nstable *arg1 = (bzs::db::protocol::tdap::client::nstable *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::nstable const *)arg1)->mode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_getFileName) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::client::nstable::getFileName((char const *)arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapErr__SWIG_1) {
  HWND arg1 ;
  short_td arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  _TCHAR *arg4 = (_TCHAR *) 0 ;
  HWND *tmp1 ;
  zval **args[4];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_HWND, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg1 = *tmp1;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (short_td)bzs::db::protocol::tdap::client::nstable::tdapErr(arg1,arg2,(char const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapErr__SWIG_2) {
  HWND arg1 ;
  short_td arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  HWND *tmp1 ;
  zval **args[3];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_HWND, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg1 = *tmp1;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      result = (short_td)bzs::db::protocol::tdap::client::nstable::tdapErr(arg1,arg2,(char const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapErr__SWIG_3) {
  HWND arg1 ;
  short_td arg2 ;
  HWND *tmp1 ;
  zval **args[2];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_HWND, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nstable_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg1 = *tmp1;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short_td)bzs::db::protocol::tdap::client::nstable::tdapErr(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_tdapErr) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
      }
      if (_v) {
        _wrap_nstable_tdapErr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nstable_tdapErr__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          _v = 1;
        }
        if (_v) {
          _wrap_nstable_tdapErr__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          _v = 1;
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_STRING); 
          if (_v) {
            _wrap_nstable_tdapErr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nstable_tdapErr'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_getDirURI) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::client::nstable::getDirURI((char const *)arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nstable_existsFile) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    try {
      result = (bool)bzs::db::protocol::tdap::client::nstable::existsFile((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tableCount) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tableCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::dbdef const *)arg1)->tableCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_openMode) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_openMode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::dbdef const *)arg1)->openMode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tableDefs) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::tabledef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tableDefs. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::tabledef *)(arg1)->tableDefs(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tableDefPtr) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::tabledef **result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tableDefPtr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::tabledef **)(arg1)->tableDefPtr(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_bzs__db__protocol__tdap__tabledef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_setVersion) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_setVersion. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setVersion(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_version) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_version. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::dbdef const *)arg1)->version();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_stat) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_stat. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)((bzs::db::protocol::tdap::client::dbdef const *)arg1)->stat();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_validateTableDef) {
	bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0;
	short arg2;
	zval **args[2];
	short result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_validateTableDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,7,CONVERT_INT_IN@*/
	convert_to_long_ex(args[1]);
	arg2 = (short)Z_LVAL_PP(args[1]);
	/*@SWIG@*/;

	{
		try {
			result = (short)(arg1)->validateTableDef(arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_LONG(return_value, result);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_updateTableDef__SWIG_0) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_updateTableDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->updateTableDef(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_updateTableDef__SWIG_1) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_updateTableDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->updateTableDef(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_updateTableDef) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_dbdef_updateTableDef__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_dbdef_updateTableDef__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'dbdef_updateTableDef'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_insertField) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_insertField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef *)(arg1)->insertField(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_deleteField) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_deleteField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->deleteField(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_insertKey) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::keydef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_insertKey. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::keydef *)(arg1)->insertKey(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__keydef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_deleteKey) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_deleteKey. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->deleteKey(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_insertTable) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  bzs::db::protocol::tdap::tabledef *arg2 = (bzs::db::protocol::tdap::tabledef *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_insertTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of dbdef_insertTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__tabledef");
    }
  }
  {
    try {
      (arg1)->insertTable(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_deleteTable) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_deleteTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->deleteTable(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_renumberTable) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_renumberTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->renumberTable(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tableNumByName) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tableNumByName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (short)(arg1)->tableNumByName((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_getRecordLen) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  zval **args[2];
  ushort_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_getRecordLen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (ushort_td)(arg1)->getRecordLen(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_findKeynumByFieldNum) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_findKeynumByFieldNum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->findKeynumByFieldNum(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_fieldNumByName) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  short arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_fieldNumByName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      result = (short)(arg1)->fieldNumByName(arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_fieldValidLength) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  bzs::db::protocol::tdap::client::eFieldQuery arg2 ;
  uchar_td arg3 ;
  zval **args[3];
  uint_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_fieldValidLength. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (bzs::db::protocol::tdap::client::eFieldQuery) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uchar_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (uint_td)(arg1)->fieldValidLength(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tdapErr__SWIG_0) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  HWND arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  HWND *tmp2 ;
  zval **args[3];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tdapErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of dbdef_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tdapErr__SWIG_1) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  HWND arg2 ;
  HWND *tmp2 ;
  zval **args[2];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_tdapErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of dbdef_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_tdapErr) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
      }
      if (_v) {
        _wrap_dbdef_tdapErr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_dbdef_tdapErr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'dbdef_tdapErr'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_reopen__SWIG_0) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  char_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_reopen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (char_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->reopen(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_reopen__SWIG_1) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_reopen. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->reopen();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_reopen) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      _wrap_dbdef_reopen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_dbdef_reopen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'dbdef_reopen'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_dbdef_mode) {
  bzs::db::protocol::tdap::client::dbdef *arg1 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of dbdef_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::dbdef const *)arg1)->mode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_tableDef) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::tabledef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_tableDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::tabledef *)((bzs::db::protocol::tdap::client::table const *)arg1)->tableDef();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_tableDefPtr) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::tabledef **result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_tableDefPtr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::tabledef **)((bzs::db::protocol::tdap::client::table const *)arg1)->tableDefPtr();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_bzs__db__protocol__tdap__tabledef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_valiableFormatType) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_valiableFormatType. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::table const *)arg1)->valiableFormatType();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_blobFieldUsed) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_blobFieldUsed. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::table const *)arg1)->blobFieldUsed();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_logicalToString) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_logicalToString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::table const *)arg1)->logicalToString();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setLogicalToString) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setLogicalToString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setLogicalToString(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_optionalData) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  void *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_optionalData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (void *)((bzs::db::protocol::tdap::client::table const *)arg1)->optionalData();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setOptionalData) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  void *arg2 = (void *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setOptionalData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_setOptionalData. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    try {
      (arg1)->setOptionalData(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_myDateTimeValueByBtrv) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_myDateTimeValueByBtrv. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::table const *)arg1)->myDateTimeValueByBtrv();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_bookmarksCount) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_bookmarksCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::table const *)arg1)->bookmarksCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_moveBookmarks) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_moveBookmarks. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->moveBookmarks(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_bookmarks) {
	bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0;
	unsigned int arg2;
	zval **args[2];
	bookmark_td result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_bookmarks. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,7,CONVERT_INT_IN@*/
	convert_to_long_ex(args[1]);
	arg2 = (unsigned int)Z_LVAL_PP(args[1]);
	/*@SWIG@*/;

	{
		try {
			result = ((bzs::db::protocol::tdap::client::table const *)arg1)->bookmarks(arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		bookmark_td * resultobj = new bookmark_td((const bookmark_td &)result);
		SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_BOOKMARK, 1);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_clearBuffer) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_clearBuffer. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clearBuffer();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getRecordHash) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getRecordHash. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (unsigned int)(arg1)->getRecordHash();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_smartUpdate) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_smartUpdate. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->smartUpdate();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_find__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::table::eFindType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_find. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (bzs::db::protocol::tdap::client::table::eFindType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->find(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_find__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_find. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->find();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_find) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _wrap_table_find__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_find__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_find'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findFirst) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findFirst. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->findFirst();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findLast) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findLast. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->findLast();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findNext__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->findNext(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findNext__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findNext. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->findNext();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findNext) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _wrap_table_findNext__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_table_findNext__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_findNext'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findPrev__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->findPrev(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findPrev__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_findPrev. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->findPrev();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_findPrev) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _wrap_table_findPrev__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_table_findPrev__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_findPrev'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_statReasonOfFind) {
  bzs::db::protocol::tdap::client::table *arg1 = 0 ;
  zval **args[1];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_statReasonOfFind. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)((bzs::db::protocol::tdap::client::table const *)arg1)->statReasonOfFind();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_lastFindDirection) {
  bzs::db::protocol::tdap::client::table *arg1 = 0 ;
  zval **args[1];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_lastFindDirection. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)((bzs::db::protocol::tdap::client::table const *)arg1)->lastFindDirection();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_bookmarkFindCurrent) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bookmark_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_bookmarkFindCurrent. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bookmark_td)((bzs::db::protocol::tdap::client::table const *)arg1)->bookmarkFindCurrent();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
	  bookmark_td * resultobj = new bookmark_td((const bookmark_td &)result);
	  SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_BOOKMARK, 1);
  }

  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setFilter__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  ushort_td arg3 ;
  ushort_td arg4 ;
  bool arg5 ;
  zval **args[5];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setFilter. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ushort_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ushort_td) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[4]);
  arg5 = (bool) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setFilter((_TCHAR const *)arg2,arg3,arg4,arg5);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setFilter__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  ushort_td arg3 ;
  ushort_td arg4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setFilter. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (ushort_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (ushort_td) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setFilter((_TCHAR const *)arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setFilter) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_table_setFilter__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_BOOL); 
            if (_v) {
              _wrap_table_setFilter__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_setFilter'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_fieldNumByName) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_fieldNumByName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (short)(arg1)->fieldNumByName((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbyt__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  unsigned char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVbyt. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (unsigned char)(arg1)->getFVbyt(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVsht__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVsht. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->getFVsht(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVint__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVint. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (int)(arg1)->getFVint(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVlng__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVlng. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (int)(arg1)->getFVlng(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFV64__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFV64. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (arg1)->getFV64(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  if ((long long)LONG_MIN <= result && result <= (long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%lld", (long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVflt__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVflt. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (float)(arg1)->getFVflt(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVdbl__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVdbl. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (double)(arg1)->getFVdbl(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbyt__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  unsigned char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVbyt. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (unsigned char)(arg1)->getFVbyt((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbyt) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVbyt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVbyt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVbyt'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVsht__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVsht. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (short)(arg1)->getFVsht((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVsht) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVsht__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVsht__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVsht'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVint__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVint. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (int)(arg1)->getFVint((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVint) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVint__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVint__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVint'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVlng__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVlng. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (int)(arg1)->getFVlng((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVlng) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVlng__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVlng__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVlng'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFV64__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFV64. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (arg1)->getFV64((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  if ((long long)LONG_MIN <= result && result <= (long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%lld", (long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFV64) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFV64__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFV64__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFV64'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVflt__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVflt. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (float)(arg1)->getFVflt((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVflt) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVflt__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVflt__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVflt'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVdbl__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVdbl. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (double)(arg1)->getFVdbl((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVdbl) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVdbl__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVdbl__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVdbl'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVstr__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVstr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)(arg1)->getFVstr(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVstr__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVstr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)(arg1)->getFVstr((char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVstr) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVstr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_STRING); 
      if (_v) {
        _wrap_table_getFVstr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVstr'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_fields) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fields *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_fields. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fields *) &(arg1)->fields();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fields, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}



ZEND_NAMED_FUNCTION(_wrap_table_setFV) {
  bzs::db::protocol::tdap::client::table *tb =  0x00;
  short index = -1;
  int argc = ZEND_NUM_ARGS();
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(argc > 4 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tb, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setFV. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  
  if(!tb) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    int type = (*args[1])->type;
     if(type == IS_LONG) {
      convert_to_long_ex(args[1]);
      index = (short) Z_LVAL_PP(args[1]);
    }else if (type == IS_STRING) {
      convert_to_string_ex(args[1]);
      index = tb->fieldNumByName((const _TCHAR *) Z_STRVAL_PP(args[1])); 
    }else {
      SWIG_ErrorCode() = E_ERROR;
      SWIG_ErrorMsg() = "No matching function for overloaded 'table_setFV'";
      SWIG_FAIL(TSRMLS_C);
      return;
    }
    if (index == -1)
    {
      tb->setStat(STATUS_INVARID_FIELD_IDX);//Invalid field name;
      return;
    }
    if(argc  == 3){
      type = (*args[2])->type;
      if (type == IS_LONG){
        convert_to_long_ex(args[2]);
        __int64 v = (__int64) (*(args[2]))->value.lval;
        tb->setFV(index, v);
      }
      else if (type == IS_STRING){
        convert_to_string_ex(args[2]);
        char* v  =(char *) Z_STRVAL_PP(args[2]);
        tb->setFV(index, v);
      }
      else if (type == IS_DOUBLE){
        convert_to_double_ex(args[2]);
        double v  = (double) Z_DVAL_PP(args[2]);
        tb->setFV(index, v);
      }
      else
        tb->setFV(index, (int)0);
     }
     if(argc  == 4){
       type = (*args[2])->type;
       convert_to_long_ex(args[3]);
       uint_td size = (uint_td) Z_LVAL_PP(args[3]);

       if (type != IS_NULL){
         convert_to_string_ex(args[2]);
         char* v  =(char *) Z_STRVAL_PP(args[2]);
         tb->setFV(index, v, size);
       }
       else
         ;// NULL pointer no effect
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);

}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbin__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  short arg2 ;
  uint_td *arg3 = 0 ;
  uint_td temp3 ;
  zval **args[2];
  void *result = 0 ;
  
  {
    arg3 = &temp3;
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVbin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (void *)bzs_db_protocol_tdap_client_table_getFVbin__SWIG_0(arg1,arg2,*arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  {
    ZVAL_STRINGL(return_value, (char *)result, *arg3, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbin__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  uint_td *arg3 = 0 ;
  uint_td temp3 ;
  zval **args[2];
  void *result = 0 ;
  
  {
    arg3 = &temp3;
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_getFVbin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (void *)bzs_db_protocol_tdap_client_table_getFVbin__SWIG_1(arg1,(char const *)arg2,*arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  {
    ZVAL_STRINGL(return_value, (char *)result, *arg3, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_getFVbin) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_table_getFVbin__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_table_getFVbin__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_getFVbin'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_keyValueDescription) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR tmpbuf2[1024*8] ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  {
    arg2 = tmpbuf2;
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_keyValueDescription. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)bzs_db_protocol_tdap_client_table_keyValueDescription(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_prepare__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bool arg3 ;
  zval **args[3];
  preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (preparedQuery *)bzs_db_protocol_tdap_client_table_prepare__SWIG_0(arg1,(bzs::db::protocol::tdap::client::queryBase const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_prepare__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[2];
  preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  {
    try {
      result = (preparedQuery *)bzs_db_protocol_tdap_client_table_prepare__SWIG_0(arg1,(bzs::db::protocol::tdap::client::queryBase const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_prepare) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _wrap_table_prepare__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_table_prepare__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_prepare'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setQuery__SWIG_0) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bool arg3 ;
  zval **args[3];
  preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setQuery. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_setQuery. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (preparedQuery *)bzs_db_protocol_tdap_client_table_setQuery__SWIG_0(arg1,(bzs::db::protocol::tdap::client::queryBase const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setQuery__SWIG_1) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[2];
  preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setQuery. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_setQuery. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  {
    try {
      result = (preparedQuery *)bzs_db_protocol_tdap_client_table_setQuery__SWIG_0(arg1,(bzs::db::protocol::tdap::client::queryBase const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setQuery) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _wrap_table_setQuery__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_table_setQuery__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'table_setQuery'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_setPrepare) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  preparedQuery *arg2 = (preparedQuery *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_setPrepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of table_setPrepare. Expected SWIGTYPE_p_preparedQuery");
    }
  }
  {
    try {
      bzs_db_protocol_tdap_client_table_setPrepare(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_table_release) {
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of table_release. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      bzs_db_protocol_tdap_client_table_release(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_table(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::table *arg1 = (bzs::db::protocol::tdap::client::table *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::table *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__table TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::table resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_table(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_clearSeekKeyValues) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_clearSeekKeyValues. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clearSeekKeyValues();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_clearSelectFields) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_clearSelectFields. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clearSelectFields();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_addSeekKeyValue__SWIG_0) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_addSeekKeyValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->addSeekKeyValue((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_addSeekKeyValue__SWIG_1) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_addSeekKeyValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->addSeekKeyValue((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_addSeekKeyValue) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_queryBase_addSeekKeyValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_queryBase_addSeekKeyValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'queryBase_addSeekKeyValue'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_reserveSeekKeyValueSize) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  size_t arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_reserveSeekKeyValueSize. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->reserveSeekKeyValueSize(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_queryString__SWIG_0) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_queryString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->queryString((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_queryString__SWIG_1) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_queryString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      arg1->queryString((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_queryString) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_queryBase_queryString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_queryBase_queryString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'queryBase_queryString'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_reject) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_reject. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->reject(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_limit) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_limit. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->limit(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_direction) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bzs::db::protocol::tdap::client::table::eFindType arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_direction. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (bzs::db::protocol::tdap::client::table::eFindType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->direction(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_all) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_all. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->all();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_optimize) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bzs::db::protocol::tdap::client::queryBase::eOptimize arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_optimize. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (bzs::db::protocol::tdap::client::queryBase::eOptimize) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->optimize(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_bookmarkAlso) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_bookmarkAlso. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->bookmarkAlso(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_toString) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_toString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->toString();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getDirection) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::table::eFindType result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getDirection. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::table::eFindType)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getDirection();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getReject) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getReject. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getReject();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getLimit) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getLimit. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getLimit();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_isAll) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_isAll. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->isAll();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getJoinKeySize) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getJoinKeySize. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getJoinKeySize();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getOptimize) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::queryBase::eOptimize result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getOptimize. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::queryBase::eOptimize)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getOptimize();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value, (long)result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_isBookmarkAlso) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_isBookmarkAlso. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->isBookmarkAlso();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}

ZEND_NAMED_FUNCTION(_wrap_queryBase_seekByBookmarks) {
	bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0;
	bool arg2;
	zval **args[2];
	bzs::db::protocol::tdap::client::queryBase *result = 0;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_seekByBookmarks. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
	convert_to_boolean_ex(args[1]);
	arg2 = (bool)Z_LVAL_PP(args[1]);
	/*@SWIG@*/;

	{
		try {
			result = (bzs::db::protocol::tdap::client::queryBase *) &(arg1)->seekByBookmarks(arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0);

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_isSeekByBookmarks) {
	bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0;
	zval **args[1];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_isSeekByBookmarks. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			result = (bool)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->isSeekByBookmarks();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}



ZEND_NAMED_FUNCTION(_wrap_queryBase_selectCount) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_selectCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->selectCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getSelect) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  short arg2 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getSelect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getSelect(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_whereTokens) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_whereTokens. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->whereTokens();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_getWhereToken) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  short arg2 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_getWhereToken. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->getWhereToken(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_setWhereToken) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  short arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_setWhereToken. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      (arg1)->setWhereToken(arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_reverseAliasName) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_reverseAliasName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      (arg1)->reverseAliasName((_TCHAR const *)arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_stopAtLimit) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_stopAtLimit. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->stopAtLimit(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_queryBase_isStopAtLimit) {
  bzs::db::protocol::tdap::client::queryBase *arg1 = (bzs::db::protocol::tdap::client::queryBase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of queryBase_isStopAtLimit. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::queryBase const *)arg1)->isStopAtLimit();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_reset) {
  bzs::db::protocol::tdap::client::query *arg1 = (bzs::db::protocol::tdap::client::query *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__query");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->reset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_select) {
  bzs::db::protocol::tdap::client::query *arg1 = 0x00 ;
  _TCHAR *arg2 = 0x00;
  _TCHAR *arg3 = 0x00;
  _TCHAR *arg4 = 0x00;
  _TCHAR *arg5 = 0x00;
  _TCHAR *arg6 = 0x00;
  _TCHAR *arg7 = 0x00;
  _TCHAR *arg8 = 0x00;
  _TCHAR *arg9 = 0x00;
  _TCHAR *arg10 = 0x00;
  _TCHAR *arg11 = 0x00;
  _TCHAR *arg12 = 0x00;

  int argc = ZEND_NUM_ARGS();
  zval **args[12];
  
  SWIG_ResetError(TSRMLS_C);
  if(argc > 12 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_select. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__query");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    {
      if ((*args[1])->type == IS_NULL) {
        SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
      }
    }
    {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
      if ((*args[2])->type != IS_NULL) {
        convert_to_string_ex(args[2]);
        arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
        if ((*args[3])->type != IS_NULL) {
          convert_to_string_ex(args[3]);
          arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
          if ((*args[4])->type != IS_NULL) {
            convert_to_string_ex(args[4]);
            arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                    if ((*args[9])->type != IS_NULL) {
                      convert_to_string_ex(args[9]);
                      arg10 = (_TCHAR *) Z_STRVAL_PP(args[9]);
                      if ((*args[10])->type != IS_NULL) {
                        convert_to_string_ex(args[10]);
                        arg11 = (_TCHAR *) Z_STRVAL_PP(args[10]);
                        if ((*args[11])->type != IS_NULL) {
                          convert_to_string_ex(args[11]);
                          arg12 = (_TCHAR *) Z_STRVAL_PP(args[11]);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      try {
        arg1->select(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_query) {
  bzs::db::protocol::tdap::client::query *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::query *)new_bzs_db_protocol_tdap_client_query();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_query(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::query *arg1 = (bzs::db::protocol::tdap::client::query *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::query *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__query TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::query resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_query(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_where) {
  bzs::db::protocol::tdap::client::query *arg1 = (bzs::db::protocol::tdap::client::query *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_where. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__query");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR where< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_and_) {
  bzs::db::protocol::tdap::client::query *arg1 = (bzs::db::protocol::tdap::client::query *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_and_. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__query");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR and_< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_or_) {
  bzs::db::protocol::tdap::client::query *arg1 = (bzs::db::protocol::tdap::client::query *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_or_. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__query");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR or_< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_query_in) {
  bzs::db::protocol::tdap::client::query *arg1 = 0x00 ;
  zval **args[9];
  
  SWIG_ResetError(TSRMLS_C);
  int argc = ZEND_NUM_ARGS();
  if (argc <  2 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
     WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__query, 0) < 0) {
       SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of query_in. Expected query");
    }
    
    for (int i = 1; i < argc; ++i){
      int type = (*args[i])->type;
      if (type == IS_LONG){
        convert_to_long_ex(args[i]);
        __int64 v = (__int64) (*(args[i]))->value.lval;
        arg1->addSeekKeyValue(lexical_cast(v).c_str());
      }
      else if (type == IS_DOUBLE){
        convert_to_double_ex(args[i]);
        double v  = (double) Z_DVAL_PP(args[i]);
        arg1->addSeekKeyValue(lexical_cast(v).c_str());
      }
      else if (type == IS_NULL)
        break;
      else {//if (type == IS_STRING)
        convert_to_string_ex(args[i]);
        char* v  =(char *) Z_STRVAL_PP(args[i]);
        arg1->addSeekKeyValue(v);
      }  
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_nsdatabase) {
  bzs::db::protocol::tdap::client::nsdatabase *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::nsdatabase *)new bzs::db::protocol::tdap::client::nsdatabase();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_enableTrn) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_enableTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->enableTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_stat) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_stat. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->stat();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_clientID) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  uchar_td *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_clientID. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uchar_td *)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->clientID();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_unsigned_char, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_openTableCount) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_openTableCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->openTableCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_uri) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_uri. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->uri();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_uriMode) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_uriMode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->uriMode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_lockWaitCount) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_lockWaitCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->lockWaitCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_lockWaitTime) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_lockWaitTime. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::nsdatabase const *)arg1)->lockWaitTime();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setLockWaitCount) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_setLockWaitCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setLockWaitCount(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setLockWaitTime) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_setLockWaitTime. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setLockWaitTime(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setLocalSharing) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_setLocalSharing. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setLocalSharing(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_dropTable) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_dropTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->dropTable((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_rename) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_rename. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      (arg1)->rename((_TCHAR const *)arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_swapTablename) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_swapTablename. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      (arg1)->swapTablename((_TCHAR const *)arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_beginTrn__SWIG_0) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_beginTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->beginTrn(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_beginTrn__SWIG_1) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_beginTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->beginTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_beginTrn) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      _wrap_nsdatabase_beginTrn__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_nsdatabase_beginTrn__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nsdatabase_beginTrn'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_endTrn) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_endTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->endTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_abortTrn) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_abortTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->abortTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_beginSnapshot) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = 0 ;
  short arg2 = CONSISTENT_READ;
  zval **args[2];
  int argc = ZEND_NUM_ARGS();
  SWIG_ResetError(TSRMLS_C);

  if(argc > 2 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_beginSnapshot. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  
  if (argc == 2)
  {
    convert_to_long_ex(args[1]);
    arg2 = (short) Z_LVAL_PP(args[1]);
  }
  
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->beginSnapshot(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_endSnapshot) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_endSnapshot. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->endSnapshot();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_trxIsolationServer) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_trxIsolationServer. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = arg1->trxIsolationServer();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_trxLockWaitTimeoutServer) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_trxLockWaitTimeoutServer. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = arg1->trxLockWaitTimeoutServer();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_tdapErr__SWIG_0) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  HWND arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  HWND *tmp2 ;
  zval **args[3];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_tdapErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nsdatabase_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_tdapErr__SWIG_1) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  HWND arg2 ;
  HWND *tmp2 ;
  zval **args[2];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_tdapErr. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_HWND, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of nsdatabase_tdapErr. Expected SWIGTYPE_p_HWND");
    }
    arg2 = *tmp2;
  }
  {
    try {
      result = (short_td)(arg1)->tdapErr(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_tdapErr) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
      }
      if (_v) {
        _wrap_nsdatabase_tdapErr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_HWND, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_nsdatabase_tdapErr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nsdatabase_tdapErr'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_useLongFilename) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_useLongFilename. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)(arg1)->useLongFilename();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setUseLongFilename) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_setUseLongFilename. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setUseLongFilename(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setUseTransactd) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_setUseTransactd. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)(arg1)->setUseTransactd();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_isTransactdUri) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_isTransactdUri. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bool)(arg1)->isTransactdUri((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_isUseTransactd) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_isUseTransactd. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)(arg1)->isUseTransactd();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_readDatabaseDirectory) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  uchar_td arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_readDatabaseDirectory. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uchar_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->readDatabaseDirectory(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_connect__SWIG_0) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bool arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_connect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)(arg1)->connect((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_connect__SWIG_1) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_connect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bool)(arg1)->connect((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_connect) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_nsdatabase_connect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_nsdatabase_connect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nsdatabase_connect'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_disconnect__SWIG_0) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_disconnect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bool)(arg1)->disconnect((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_disconnect__SWIG_1) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = (bzs::db::protocol::tdap::client::nsdatabase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_disconnect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)(arg1)->disconnect();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_disconnect) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      _wrap_nsdatabase_disconnect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_nsdatabase_disconnect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'nsdatabase_disconnect'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_disconnectForReconnectTest) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_disconnectForReconnectTest. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = arg1->disconnectForReconnectTest();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value, result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_reconnect) {
  bzs::db::protocol::tdap::client::nsdatabase *arg1 = 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of nsdatabase_reconnect. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = arg1->reconnect();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value, result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_trnsactionFlushWaitStatus) {
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bool)bzs::db::protocol::tdap::client::nsdatabase::trnsactionFlushWaitStatus();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setExecCodePage) {
  unsigned int arg1 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (unsigned int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      bzs::db::protocol::tdap::client::nsdatabase::setExecCodePage(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_execCodePage) {
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (unsigned int)bzs::db::protocol::tdap::client::nsdatabase::execCodePage();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_nsdatabase_setCheckTablePtr) {
  bool arg1 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[0]);
  arg1 = (bool) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      bzs::db::protocol::tdap::client::nsdatabase::setCheckTablePtr(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_dbDef) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::dbdef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_dbDef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::dbdef *)((bzs::db::protocol::tdap::client::database const *)arg1)->dbDef();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_rootDir) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_rootDir. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::database const *)arg1)->rootDir();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_setRootDir) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_setRootDir. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->setRootDir((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_optionalData) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  void *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_optionalData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (void *)((bzs::db::protocol::tdap::client::database const *)arg1)->optionalData();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_setOptionalData) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  void *arg2 = (void *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_setOptionalData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_setOptionalData. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    try {
      (arg1)->setOptionalData(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_tableReadOnly) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_tableReadOnly. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::database const *)arg1)->tableReadOnly();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_setTableReadOnly) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_setTableReadOnly. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setTableReadOnly(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  short arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_open. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (short) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    if ((*args[5])->type != IS_NULL) {
      convert_to_string_ex(args[5]);
      arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
    }
  }
  {
    try {
      result = (bool)(arg1)->open((_TCHAR const *)arg2,arg3,arg4,(_TCHAR const *)arg5,(_TCHAR const *)arg6);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  short arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_open. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (short) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    try {
      result = (bool)(arg1)->open((_TCHAR const *)arg2,arg3,arg4,(_TCHAR const *)arg5);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open__SWIG_2) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  short arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_open. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (short) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)(arg1)->open((_TCHAR const *)arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open__SWIG_3) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_open. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)(arg1)->open((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open__SWIG_4) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_open. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bool)(arg1)->open((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_open) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_database_open__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_database_open__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_database_open__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              _wrap_database_open__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              {
                _v = 1;
              }
              if (_v) {
                _wrap_database_open__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_open'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database___clone) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::database *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database___clone. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::database *)(arg1)->clone();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_create__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_create. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->create((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_create__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_create. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->create((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_create) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_database_create__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_database_create__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_create'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_drop) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_drop. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->drop();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_dropTable) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_dropTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->dropTable((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_close__SWIG_0) {
	bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0;
	bool arg2;
	zval **args[2];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_close. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
	convert_to_boolean_ex(args[1]);
	arg2 = (bool)Z_LVAL_PP(args[1]);
	/*@SWIG@*/;

	{
		try {
			(arg1)->close(arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_close__SWIG_1) {
	bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0;
	zval **args[1];

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_close. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			(arg1)->close();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}

	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_close) {
	int argc;
	zval **argv[2];

	argc = ZEND_NUM_ARGS();
	zend_get_parameters_array_ex(argc, argv);
	if (argc == 1) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
		}
		if (_v) {
			_wrap_database_close__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
		}
		if (_v) {
			_v = (Z_TYPE_PP(argv[1]) == IS_BOOL);
			if (_v) {
				_wrap_database_close__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}

	SWIG_ErrorCode() = E_ERROR;
	SWIG_ErrorMsg() = "No matching function for overloaded 'database_close'";
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_aclReload) {
  bzs::db::protocol::tdap::client::database *arg1 = 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)arg1->aclReload();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_continuous__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  char_td arg2 ;
  bool arg3 ;
  zval **args[3];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_continuous. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (char_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->continuous(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_continuous__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  char_td arg2 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_continuous. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (char_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->continuous(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_continuous__SWIG_2) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_continuous. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)(arg1)->continuous();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_continuous) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _wrap_database_continuous__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_database_continuous__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_database_continuous__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_continuous'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_assignSchemaData) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::client::dbdef *arg2 = (bzs::db::protocol::tdap::client::dbdef *) 0 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_assignSchemaData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_assignSchemaData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef");
    }
  }
  {
    try {
      result = (short)(arg1)->assignSchemaData(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_copyTableData__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::client::table *arg2 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::table *arg3 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg4 ;
  int arg5 ;
  short arg6 ;
  int arg7 ;
  zval **args[7];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (short) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (int) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->copyTableData(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_copyTableData__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::client::table *arg2 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::table *arg3 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg4 ;
  int arg5 ;
  short arg6 ;
  zval **args[6];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (short) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->copyTableData(arg2,arg3,arg4,arg5,arg6);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_copyTableData__SWIG_2) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::client::table *arg2 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::table *arg3 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg4 ;
  int arg5 ;
  zval **args[5];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->copyTableData(arg2,arg3,arg4,arg5);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_copyTableData__SWIG_3) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::client::table *arg2 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bzs::db::protocol::tdap::client::table *arg3 = (bzs::db::protocol::tdap::client::table *) 0 ;
  bool arg4 ;
  zval **args[4];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of database_copyTableData. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__table");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      result = (short)(arg1)->copyTableData(arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_copyTableData) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _wrap_database_copyTableData__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_database_copyTableData__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_database_copyTableData__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0) >= 0);
        }
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  _wrap_database_copyTableData__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_copyTableData'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_convertTable__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  bool arg3 ;
  _TCHAR *arg4 = (_TCHAR *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_convertTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if ((*args[3])->type != IS_NULL) {
      convert_to_string_ex(args[3]);
      arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
    }
  }
  {
    try {
      (arg1)->convertTable(arg2,arg3,(_TCHAR const *)arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_convertTable__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_convertTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->convertTable(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_convertTable) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_database_convertTable__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          {
            _v = 1;
          }
          if (_v) {
            _wrap_database_convertTable__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_convertTable'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_existsTableFile__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_existsTableFile. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      result = (bool)(arg1)->existsTableFile(arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_existsTableFile__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_existsTableFile. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)(arg1)->existsTableFile(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_existsTableFile) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_database_existsTableFile__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          _v = 1;
        }
        if (_v) {
          _wrap_database_existsTableFile__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_existsTableFile'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_getTableUri) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  zval **args[3];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_getTableUri. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (_TCHAR *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)(arg1)->getTableUri(arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_getBtrVersion) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  bzs::db::protocol::tdap::btrVersions *arg2 = (bzs::db::protocol::tdap::btrVersions *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_getBtrVersion. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of database_getBtrVersion. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions");
    }
  }
  {
    try {
      (arg1)->getBtrVersion(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_isOpened) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_isOpened. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::database const *)arg1)->isOpened();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_mode) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::database const *)arg1)->mode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_database) {
  bzs::db::protocol::tdap::client::database *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::database *)new_bzs_db_protocol_tdap_client_database();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_database(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::database *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__database TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::database resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_database(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_0) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  bool arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  zval **args[6];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    if ((*args[5])->type != IS_NULL) {
      convert_to_string_ex(args[5]);
      arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_0(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  bool arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  zval **args[5];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_0(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_2) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  bool arg4 ;
  zval **args[4];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_0(arg1,(char const *)arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_3) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  short arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_0(arg1,(char const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_4) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_0(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_5) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  short arg3 ;
  bool arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  zval **args[6];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    if ((*args[5])->type != IS_NULL) {
      convert_to_string_ex(args[5]);
      arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_5(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_6) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  short arg3 ;
  bool arg4 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  zval **args[5];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    if ((*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_5(arg1,arg2,arg3,arg4,(char const *)arg5);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_7) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  short arg3 ;
  bool arg4 ;
  zval **args[4];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_5(arg1,arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_8) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  short arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (short) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_5(arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable__SWIG_9) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  short arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of database_openTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_database_openTable__SWIG_5(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_database_openTable) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_database_openTable__SWIG_9(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_database_openTable__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_database_openTable__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_database_openTable__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _wrap_database_openTable__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _wrap_database_openTable__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              _wrap_database_openTable__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              _wrap_database_openTable__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              {
                _v = 1;
              }
              if (_v) {
                _wrap_database_openTable__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            {
              _v = 1;
            }
            if (_v) {
              {
                _v = 1;
              }
              if (_v) {
                _wrap_database_openTable__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'database_openTable'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_benchmark_start) {
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      bzs::rtl::benchmark::start();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_benchmark_stop) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (int)bzs::rtl::benchmark::stop();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_benchmark_showTimes) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      bzs::rtl::benchmark::showTimes(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_benchmark_showTimeSec) {
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[0]);
  arg1 = (bool) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      bzs::rtl::benchmark::showTimeSec(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_benchmark) {
  bzs::rtl::benchmark *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::rtl::benchmark *)new bzs::rtl::benchmark();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__rtl__benchmark, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_benchmark(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::rtl::benchmark *arg1 = (bzs::rtl::benchmark *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::rtl::benchmark *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__rtl__benchmark TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::rtl::benchmark resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_charsize) {
  int arg1 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (unsigned int)bzs::db::protocol::tdap::mysql::charsize(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_charsetName) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::mysql::charsetName(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_charsetIndex__SWIG_0) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (unsigned int)bzs::db::protocol::tdap::mysql::charsetIndex((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_charsetIndex__SWIG_1) {
  unsigned short arg1 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (unsigned short) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (unsigned int)bzs::db::protocol::tdap::mysql::charsetIndex(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_charsetIndex) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_charsetIndex__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_STRING); 
    if (_v) {
      _wrap_charsetIndex__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'charsetIndex'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_codePage) {
  unsigned short arg1 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (unsigned short) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (unsigned int)bzs::db::protocol::tdap::mysql::codePage(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_dd_set) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_dd_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->dd = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_dd_get) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_dd_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->dd);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_mm_set) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_mm_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->mm = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_mm_get) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_mm_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->mm);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_yy_set) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_yy_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->yy = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_yy_get) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_yy_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (short) ((arg1)->yy);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_i_set) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_i_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->i = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDate_i_get) {
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDate_i_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->i);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrDate) {
  bzs::db::protocol::tdap::btrDate *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrDate *)new bzs::db::protocol::tdap::btrDate();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrDate(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrDate *arg1 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrDate *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrDate TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrDate resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_uu_set) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_uu_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->uu = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_uu_get) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_uu_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->uu);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_ss_set) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_ss_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->ss = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_ss_get) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_ss_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->ss);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_nn_set) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_nn_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->nn = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_nn_get) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_nn_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->nn);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_hh_set) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  char arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_hh_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  arg2 = (char) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->hh = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_hh_get) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_hh_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char) ((arg1)->hh);
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_i_set) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_i_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->i = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTime_i_get) {
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTime_i_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->i);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrTime) {
  bzs::db::protocol::tdap::btrTime *result = 0 ;
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrTime *)new bzs::db::protocol::tdap::btrTime();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrTime(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrTime *arg1 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrTime *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrTime TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrTime resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_time_set) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  bzs::db::protocol::tdap::btrTime *arg2 = (bzs::db::protocol::tdap::btrTime *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_time_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of btrDateTime_time_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  if (arg1) (arg1)->time = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_time_get) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrTime *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_time_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::btrTime *)& ((arg1)->time);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_date_set) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  bzs::db::protocol::tdap::btrDate *arg2 = (bzs::db::protocol::tdap::btrDate *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_date_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of btrDateTime_date_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  if (arg1) (arg1)->date = *arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_date_get) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrDate *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_date_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bzs::db::protocol::tdap::btrDate *)& ((arg1)->date);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_i64_set) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  __int64 arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_i64_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,12,CONVERT_LONG_LONG_IN@*/
  switch ((*(args[1]))->type) {
  case IS_DOUBLE:
    arg2 = (__int64) (*(args[1]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg2 = (__int64) strtoll((*(args[1]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[1]);
    arg2 = (__int64) (*(args[1]))->value.lval;
  }
  /*@SWIG@*/;
  
  if (arg1) (arg1)->i64 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrDateTime_i64_get) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  zval **args[1];
  __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrDateTime_i64_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->i64);
  
  if ((long long)LONG_MIN <= result && result <= (long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%lld", (long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrDateTime) {
  bzs::db::protocol::tdap::btrDateTime *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrDateTime *)new bzs::db::protocol::tdap::btrDateTime();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrDateTime(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrDateTime *arg1 = (bzs::db::protocol::tdap::btrDateTime *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrDateTime *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrDateTime resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTimeStamp_i64_set) {
  bzs::db::protocol::tdap::btrTimeStamp *arg1 = (bzs::db::protocol::tdap::btrTimeStamp *) 0 ;
  unsigned __int64 arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTimeStamp_i64_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,30,CONVERT_UNSIGNED_LONG_LONG_IN@*/
  switch ((*(args[1]))->type) {
  case IS_DOUBLE:
    arg2 = (unsigned __int64) (*(args[1]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg2 = (unsigned __int64) strtoull((*(args[1]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[1]);
    arg2 = (unsigned __int64) (*(args[1]))->value.lval;
  }
  /*@SWIG@*/;
  
  if (arg1) (arg1)->i64 = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTimeStamp_i64_get) {
  bzs::db::protocol::tdap::btrTimeStamp *arg1 = (bzs::db::protocol::tdap::btrTimeStamp *) 0 ;
  zval **args[1];
  unsigned __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTimeStamp_i64_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->i64);
  
  if (result <= (unsigned long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%llu", (unsigned long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrTimeStamp__SWIG_0) {
  unsigned __int64 arg1 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrTimeStamp *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,30,CONVERT_UNSIGNED_LONG_LONG_IN@*/
  switch ((*(args[0]))->type) {
  case IS_DOUBLE:
    arg1 = (unsigned __int64) (*(args[0]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg1 = (unsigned __int64) strtoull((*(args[0]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[0]);
    arg1 = (unsigned __int64) (*(args[0]))->value.lval;
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrTimeStamp *)new bzs::db::protocol::tdap::btrTimeStamp(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrTimeStamp__SWIG_1) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrTimeStamp *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::btrTimeStamp *)new bzs::db::protocol::tdap::btrTimeStamp((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrTimeStamp__SWIG_2) {
  bzs::db::protocol::tdap::btrDate arg1 ;
  bzs::db::protocol::tdap::btrTime arg2 ;
  bzs::db::protocol::tdap::btrDate *tmp1 ;
  bzs::db::protocol::tdap::btrTime *tmp2 ;
  zval **args[2];
  bzs::db::protocol::tdap::btrTimeStamp *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_btrTimeStamp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
    arg1 = *tmp1;
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_btrTimeStamp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
    arg2 = *tmp2;
  }
  {
    try {
      result = (bzs::db::protocol::tdap::btrTimeStamp *)new bzs::db::protocol::tdap::btrTimeStamp(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_btrTimeStamp) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_btrTimeStamp__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_STRING); 
    if (_v) {
      _wrap_new_btrTimeStamp__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) >= 0);
      }
      if (_v) {
        _wrap_new_btrTimeStamp__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_btrTimeStamp'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTimeStamp_toString) {
  bzs::db::protocol::tdap::btrTimeStamp *arg1 = (bzs::db::protocol::tdap::btrTimeStamp *) 0 ;
  char *arg2 = (char *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTimeStamp_toString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char *)(arg1)->toString(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrTimeStamp_fromString) {
  bzs::db::protocol::tdap::btrTimeStamp *arg1 = (bzs::db::protocol::tdap::btrTimeStamp *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrTimeStamp_fromString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->fromString((char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_btrTimeStamp(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::btrTimeStamp *arg1 = (bzs::db::protocol::tdap::btrTimeStamp *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::btrTimeStamp *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::btrTimeStamp resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_atobtrd) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrDate result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = bzs::db::protocol::tdap::atobtrd((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::btrDate * resultobj = new bzs::db::protocol::tdap::btrDate((const bzs::db::protocol::tdap::btrDate &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrdtoa__SWIG_0) {
  bzs::db::protocol::tdap::btrDate *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char tmpbuf2[255] ;
  zval **args[2];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrdtoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg3 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrdtoa((bzs::db::protocol::tdap::btrDate const &)*arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrdtoa__SWIG_1) {
  bzs::db::protocol::tdap::btrDate *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrdtoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDate");
    }
  }
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrdtoa((bzs::db::protocol::tdap::btrDate const &)*arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrttoa__SWIG_0) {
  bzs::db::protocol::tdap::btrTime *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char tmpbuf2[255] ;
  zval **args[2];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrttoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg3 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrttoa((bzs::db::protocol::tdap::btrTime const &)*arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrttoa__SWIG_1) {
  bzs::db::protocol::tdap::btrTime *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrttoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrTime");
    }
  }
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrttoa((bzs::db::protocol::tdap::btrTime const &)*arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_atobtrt) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrTime result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    try {
      result = bzs::db::protocol::tdap::atobtrt((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::btrTime * resultobj = new bzs::db::protocol::tdap::btrTime((const bzs::db::protocol::tdap::btrTime &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrdtoa__SWIG_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char tmpbuf2[255] ;
  zval **args[2];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg3 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrdtoa(arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrdtoa__SWIG_3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrdtoa(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrdtoa) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) >= 0);
    }
    if (_v) {
      _wrap_btrdtoa__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_btrdtoa__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_btrdtoa__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_btrdtoa__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'btrdtoa'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrttoa__SWIG_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char tmpbuf2[255] ;
  zval **args[2];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg3 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrttoa(arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrttoa__SWIG_3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  char *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      result = (char *)bzs::db::protocol::tdap::btrttoa(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrttoa) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) >= 0);
    }
    if (_v) {
      _wrap_btrttoa__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_btrttoa__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_btrttoa__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_btrttoa__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'btrttoa'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrstoa__SWIG_0) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bool arg3 ;
  char tmpbuf2[255] ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrstoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg3 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::btrstoa((bzs::db::protocol::tdap::btrDateTime const &)*arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrstoa__SWIG_1) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  char tmpbuf2[255] ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  {
    arg2=tmpbuf2; 
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrstoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::btrstoa((bzs::db::protocol::tdap::btrDateTime const &)*arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrstoa__SWIG_2) {
  bzs::db::protocol::tdap::btrDateTime *arg1 = 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of btrstoa. Expected SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime");
    }
  }
  {
    try {
      result = (_TCHAR *)bzs::db::protocol::tdap::btrstoa((bzs::db::protocol::tdap::btrDateTime const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_btrstoa) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) >= 0);
    }
    if (_v) {
      _wrap_btrstoa__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) >= 0);
    }
    if (_v) {
      _wrap_btrstoa__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_btrstoa__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'btrstoa'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_atobtrs) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::btrDateTime result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    try {
      result = bzs::db::protocol::tdap::atobtrs((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::btrDateTime * resultobj = new bzs::db::protocol::tdap::btrDateTime((const bzs::db::protocol::tdap::btrDateTime &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_getNowDate) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (int)bzs::db::protocol::tdap::getNowDate();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_getNowTime) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (int)bzs::db::protocol::tdap::getNowTime();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs___clone) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fielddefs *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs___clone. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fielddefs *)((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->clone();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_indexByName) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  std::_tstring *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs_indexByName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std___tstring, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of fielddefs_indexByName. Expected SWIGTYPE_p_std___tstring");
    }
  }
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->indexByName((std::_tstring const &)*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_getFielddef__SWIG_0) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs_getFielddef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef *) &((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->operator [](arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_getFielddef__SWIG_1) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::fielddef *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs_getFielddef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::fielddef *) &((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->operator []((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_getFielddef) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_fielddefs_getFielddef__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_fielddefs_getFielddef__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'fielddefs_getFielddef'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_checkIndex) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs_checkIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->checkIndex(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fielddefs_size) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fielddefs_size. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::fielddefs const *)arg1)->size();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_fielddefs) {
  bzs::db::protocol::tdap::client::fielddefs *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::fielddefs *)new_bzs_db_protocol_tdap_client_fielddefs();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_fielddefs(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::fielddefs *arg1 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::fielddefs *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::fielddefs resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_fielddefs(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_field__SWIG_0) {
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *)new bzs::db::protocol::tdap::client::field();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_field__SWIG_1) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  bzs::db::protocol::tdap::fielddef *arg2 = 0 ;
  bzs::db::protocol::tdap::client::fielddefs *arg3 = (bzs::db::protocol::tdap::client::fielddefs *) 0 ;
  zval **args[3];
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_unsigned_char, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_field. Expected SWIGTYPE_p_unsigned_char");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_field. Expected SWIGTYPE_p_bzs__db__protocol__tdap__fielddef");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_field. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *)new bzs::db::protocol::tdap::client::field(arg1,(bzs::db::protocol::tdap::fielddef const &)*arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_field__SWIG_2) {
  bzs::db::protocol::tdap::client::field *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_field. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *)new bzs::db::protocol::tdap::client::field((bzs::db::protocol::tdap::client::field const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_field) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_field__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      _wrap_new_field__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_unsigned_char, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) >= 0);
        }
        if (_v) {
          _wrap_new_field__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_field'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_type) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  unsigned char result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_type. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (unsigned char)((bzs::db::protocol::tdap::client::field const *)arg1)->type();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_len) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_len. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (unsigned short)((bzs::db::protocol::tdap::client::field const *)arg1)->len();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_c_str) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_c_str. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::field const *)arg1)->c_str();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_a_str) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_a_str. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char *)((bzs::db::protocol::tdap::client::field const *)arg1)->a_str();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_i) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_i. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::field const *)arg1)->i();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_i8) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_i8. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::field const *)arg1)->i8();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_i16) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_i16. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::field const *)arg1)->i16();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_i64) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_i64. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::field const *)arg1)->i64();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  if ((long long)LONG_MIN <= result && result <= (long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%lld", (long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_f) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  float result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_f. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (float)((bzs::db::protocol::tdap::client::field const *)arg1)->f();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_d) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_d. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (double)((bzs::db::protocol::tdap::client::field const *)arg1)->d();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_setFV__SWIG_0) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_setFV. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *) &(arg1)->operator =((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_setFV__SWIG_1) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  __int64 arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_setFV. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,12,CONVERT_LONG_LONG_IN@*/
  switch ((*(args[1]))->type) {
  case IS_DOUBLE:
    arg2 = (__int64) (*(args[1]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg2 = (__int64) strtoll((*(args[1]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[1]);
    arg2 = (__int64) (*(args[1]))->value.lval;
  }
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *) &(arg1)->operator =(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_setFV__SWIG_2) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  double arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::field *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_setFV. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::field *) &(arg1)->operator =(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_setFV__SWIG_3) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  void *arg2 = (void *) 0 ;
  uint_td arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_setFV. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of field_setFV. Expected SWIGTYPE_p_p_void");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (uint_td) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setBin((void const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_setFV) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_field_setFV__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_field_setFV__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_field_setFV__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, 0, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_field_setFV__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'field_setFV'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_getBin) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  uint_td *arg2 = 0 ;
  uint_td temp2 ;
  zval **args[1];
  void *result = 0 ;
  
  {
    arg2 = &temp2;
  }
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_getBin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (void *)(arg1)->getBin(*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  {
    ZVAL_STRINGL(return_value, (char *)result, *arg2, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_comp__SWIG_0) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  bzs::db::protocol::tdap::client::field *arg2 = 0 ;
  char arg3 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_comp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of field_comp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[2]);
  arg3 = (char) *Z_STRVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::field const *)arg1)->comp((bzs::db::protocol::tdap::client::field const &)*arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_comp__SWIG_1) {
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  bzs::db::protocol::tdap::client::field *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of field_comp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of field_comp. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::field const *)arg1)->comp((bzs::db::protocol::tdap::client::field const &)*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_field_comp) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
      }
      if (_v) {
        _wrap_field_comp__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_STRING); 
        if (_v) {
          _wrap_field_comp__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'field_comp'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_field(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::field *arg1 = (bzs::db::protocol::tdap::client::field *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::field *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__field TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::field resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Record(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::fieldsBase *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::fieldsBase resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_isInvalidRecord) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_isInvalidRecord. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->isInvalidRecord();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_getField__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  short arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::field result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_getField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = ((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->operator [](arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::field * resultobj = new bzs::db::protocol::tdap::client::field((const bzs::db::protocol::tdap::client::field &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_getField__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::field result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_getField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = ((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->operator []((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::field * resultobj = new bzs::db::protocol::tdap::client::field((const bzs::db::protocol::tdap::client::field &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_getField) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Record_getField__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_Record_getField__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Record_getField'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_size) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_size. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->size();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_indexByName) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_indexByName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->indexByName((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_fieldDefs) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fielddefs *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_fieldDefs. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fielddefs *)((bzs::db::protocol::tdap::client::fieldsBase const *)arg1)->fieldDefs();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_clear) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_clear. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clear();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_getFieldByIndexRef) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  short arg2 ;
  bzs::db::protocol::tdap::client::field *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_getFieldByIndexRef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Record_getFieldByIndexRef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  {
    try {
      bzs_db_protocol_tdap_client_fieldsBase_getFieldByIndexRef((bzs::db::protocol::tdap::client::fieldsBase const *)arg1,arg2,*arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Record_getFieldByNameRef) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bzs::db::protocol::tdap::client::field *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Record_getFieldByNameRef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_bzs__db__protocol__tdap__client__field, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Record_getFieldByNameRef. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__field");
    }
  }
  {
    try {
      *arg3 = arg1->operator[]((const char*)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_memoryRecord_createRecord) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::memoryRecord *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of memoryRecord_createRecord. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::memoryRecord *)bzs::db::protocol::tdap::client::memoryRecord::create(*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_memoryRecord) {
  bzs::db::protocol::tdap::client::fielddefs *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::memoryRecord *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_memoryRecord. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::memoryRecord *)new_bzs_db_protocol_tdap_client_memoryRecord(*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */

static void __wrap_delete_memoryRecord(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::memoryRecord *arg1 = (bzs::db::protocol::tdap::client::memoryRecord *) 0 ;
  
  efree(value);
  if (! newobject) return; 
  arg1 = (bzs::db::protocol::tdap::client::memoryRecord *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::memoryRecord resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_memoryRecord(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_read__SWIG_0) {
	bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0;
	bool arg2;
	zval **args[2];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

	/*@SWIG:E:\bindings\swigwin-3.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
	convert_to_boolean_ex(args[1]);
	arg2 = (bool)Z_LVAL_PP(args[1]);
	/*@SWIG@*/;

	{
		try {
			result = (bool)(arg1)->read(arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_read__SWIG_1) {
	bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0;
	zval **args[1];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		try {
			result = (bool)(arg1)->read();
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_read__SWIG_2) {
	bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0;
	bookmark_td *arg2 = 0;
	zval **args[2];
	bool result;

	SWIG_ResetError(TSRMLS_C);
	if (ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
		WRONG_PARAM_COUNT;
	}

	{
		if (SWIG_ConvertPtr(*args[0], (void **)&arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
		}
	}
	if (!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
	{
		if (SWIG_ConvertPtr(*args[1], (void **)&arg2, SWIGTYPE_p_BOOKMARK, 0) < 0 || arg2 == NULL) {
			SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of writableRecord_read. Expected SWIGTYPE_p_BOOKMARK");
		}
	}
	{
		try {
			result = (bool)(arg1)->read(*arg2);
		}
		catch (bzs::rtl::exception& e) {
			SWIG_exception(SWIG_RuntimeError, (*bzs::rtl::getMsg(e)).c_str());
		}
		catch (std::exception &e) {
			SWIG_exception(SWIG_RuntimeError, e.what());
		}
	}
	{
		ZVAL_BOOL(return_value, (result) ? 1 : 0);
	}
	return;
fail:
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_read) {
	int argc;
	zval **argv[2];

	argc = ZEND_NUM_ARGS();
	zend_get_parameters_array_ex(argc, argv);
	if (argc == 1) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) >= 0);
		}
		if (_v) {
			_wrap_writableRecord_read__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) >= 0);
		}
		if (_v) {
			{
				void *tmp;
				_v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_BOOKMARK, 0) >= 0);
			}
			if (_v) {
				_wrap_writableRecord_read__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}
	if (argc == 2) {
		int _v;
		{
			void *tmp;
			_v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) >= 0);
		}
		if (_v) {
			_v = (Z_TYPE_PP(argv[1]) == IS_BOOL);
			if (_v) {
				_wrap_writableRecord_read__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
			}
		}
	}

	SWIG_ErrorCode() = E_ERROR;
	SWIG_ErrorMsg() = "No matching function for overloaded 'writableRecord_read'";
	SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_insert) {
  bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_insert. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->insert();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_del__SWIG_0) {
  bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_del. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->del(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_del__SWIG_1) {
  bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_del. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->del();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_del) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) >= 0);
    }
    if (_v) {
      _wrap_writableRecord_del__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_writableRecord_del__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'writableRecord_del'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_update) {
  bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_update. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->update();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_writableRecord_save) {
  bzs::db::protocol::tdap::client::writableRecord *arg1 = (bzs::db::protocol::tdap::client::writableRecord *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of writableRecord_save. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->save();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_connectParams__SWIG_0) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  _TCHAR *arg4 = (_TCHAR *) 0 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  zval **args[6];
  bzs::db::protocol::tdap::client::connectParams *result = 0 ;
  int argc = ZEND_NUM_ARGS();
  
  SWIG_ResetError(TSRMLS_C);
  if((argc < 4) || (argc > 6) || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    if ((*args[3])->type != IS_NULL) {
      convert_to_string_ex(args[3]);
      arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
    }
  }
  {
    if ((argc > 4) && (*args[4])->type != IS_NULL) {
      convert_to_string_ex(args[4]);
      arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
    }
  }
  {
    if ((argc > 5) &&(*args[5])->type != IS_NULL) {
      convert_to_string_ex(args[5]);
      arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::connectParams *)new bzs::db::protocol::tdap::client::connectParams((_TCHAR const *)arg1,(_TCHAR const *)arg2,(_TCHAR const *)arg3,(_TCHAR const *)arg4,
                (_TCHAR const *)arg5,(_TCHAR const *)arg6);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_connectParams__SWIG_1) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::connectParams *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::connectParams *)new bzs::db::protocol::tdap::client::connectParams((_TCHAR const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_connectParams) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    _wrap_new_connectParams__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if ((argc >= 4) && argc <= 6) {
    _wrap_new_connectParams__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_connectParams'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_connectParams_setMode) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  char_td arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of connectParams_setMode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (char_td) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setMode(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_connectParams_setType) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of connectParams_setType. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setType(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_connectParams_uri) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of connectParams_uri. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::connectParams const *)arg1)->uri();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_connectParams_mode) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of connectParams_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::connectParams const *)arg1)->mode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_connectParams_type) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of connectParams_type. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short)((bzs::db::protocol::tdap::client::connectParams const *)arg1)->type();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_connectParams(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::connectParams *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::connectParams resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_reset) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fieldNames *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldNames *) &(arg1)->reset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_keyField) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0x00 ;
  _TCHAR *arg2 = 0x00;
  _TCHAR *arg3 = 0x00;
  _TCHAR *arg4 = 0x00;
  _TCHAR *arg5 = 0x00;
  _TCHAR *arg6 = 0x00;
  _TCHAR *arg7 = 0x00;
  _TCHAR *arg8 = 0x00;
  _TCHAR *arg9 = 0x00;
  _TCHAR *arg10 = 0x00;
  _TCHAR *arg11 = 0x00;
  _TCHAR *arg12 = 0x00;

  int argc = ZEND_NUM_ARGS();
  zval **args[12];
  
  SWIG_ResetError(TSRMLS_C);
  if(argc > 12 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_keyField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    {
      if ((*args[1])->type == IS_NULL) {
        SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
      }
    }
    {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
      if ((*args[2])->type != IS_NULL) {
        convert_to_string_ex(args[2]);
        arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
        if ((*args[3])->type != IS_NULL) {
          convert_to_string_ex(args[3]);
          arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
          if ((*args[4])->type != IS_NULL) {
            convert_to_string_ex(args[4]);
            arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                    if ((*args[9])->type != IS_NULL) {
                      convert_to_string_ex(args[9]);
                      arg10 = (_TCHAR *) Z_STRVAL_PP(args[9]);
                      if ((*args[10])->type != IS_NULL) {
                        convert_to_string_ex(args[10]);
                        arg11 = (_TCHAR *) Z_STRVAL_PP(args[10]);
                        if ((*args[11])->type != IS_NULL) {
                          convert_to_string_ex(args[11]);
                          arg12 = (_TCHAR *) Z_STRVAL_PP(args[11]);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      try {
        arg1->keyField(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_count) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_count. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::fieldNames const *)arg1)->count();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_getFieldName) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  int arg2 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_getFieldName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::fieldNames const *)arg1)->operator [](arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_getValue) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  int arg2 ;
  zval **args[2];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_getValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::fieldNames const *)arg1)->getValue(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_addValue) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_addValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->addValue((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldNames_addValues) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldNames_addValues. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      (arg1)->addValues((_TCHAR const *)arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_fieldNames) {
  bzs::db::protocol::tdap::client::fieldNames *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldNames *)new_bzs_db_protocol_tdap_client_fieldNames();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_fieldNames(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::fieldNames *arg1 = (bzs::db::protocol::tdap::client::fieldNames *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::fieldNames *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::fieldNames resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_fieldNames(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortField_name_set) {
  bzs::db::protocol::tdap::client::sortField *arg1 = (bzs::db::protocol::tdap::client::sortField *) 0 ;
  std::_tstring arg2 ;
  std::_tstring *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortField_name_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std___tstring, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of sortField_name_set. Expected SWIGTYPE_p_std___tstring");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->name = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortField_name_get) {
  bzs::db::protocol::tdap::client::sortField *arg1 = (bzs::db::protocol::tdap::client::sortField *) 0 ;
  zval **args[1];
  std::_tstring result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortField_name_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->name);
  {
    std::_tstring * resultobj = new std::_tstring((const std::_tstring &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std___tstring, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortField_asc_set) {
  bzs::db::protocol::tdap::client::sortField *arg1 = (bzs::db::protocol::tdap::client::sortField *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortField_asc_set. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:C:\Program Files (x86)\swigwin-3.0.2\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->asc = arg2;
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortField_asc_get) {
  bzs::db::protocol::tdap::client::sortField *arg1 = (bzs::db::protocol::tdap::client::sortField *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortField_asc_get. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool) ((arg1)->asc);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_sortField) {
  bzs::db::protocol::tdap::client::sortField *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::sortField *)new bzs::db::protocol::tdap::client::sortField();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_sortField(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::sortField *arg1 = (bzs::db::protocol::tdap::client::sortField *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::sortField *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::sortField resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortFields_add) {
  bzs::db::protocol::tdap::client::sortFields *arg1 = (bzs::db::protocol::tdap::client::sortFields *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortFields_add. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->add((_TCHAR const *)arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortFields_size) {
  bzs::db::protocol::tdap::client::sortFields *arg1 = (bzs::db::protocol::tdap::client::sortFields *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortFields_size. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::sortFields const *)arg1)->size();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortFields_getSortField) {
  bzs::db::protocol::tdap::client::sortFields *arg1 = (bzs::db::protocol::tdap::client::sortFields *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::sortField *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortFields_getSortField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:C:\Program Files (x86)\swigwin-3.0.2\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::sortField *) &((bzs::db::protocol::tdap::client::sortFields const *)arg1)->operator [](arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_sortFields_clear) {
  bzs::db::protocol::tdap::client::sortFields *arg1 = (bzs::db::protocol::tdap::client::sortFields *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of sortFields_clear. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clear();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_sortFields) {
  bzs::db::protocol::tdap::client::sortFields *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::sortFields *)new bzs::db::protocol::tdap::client::sortFields();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_sortFields(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::sortFields *arg1 = (bzs::db::protocol::tdap::client::sortFields *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::sortFields *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::sortFields resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_recordsetQuery_reset) {
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  zval **args[1];
  //bzs::db::protocol::tdap::client::recordsetQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of recordsetQuery_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->reset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  //SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_recordsetQuery_toString) {
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of recordsetQuery_toString. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::recordsetQuery const *)arg1)->toString();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_recordsetQuery) {
  bzs::db::protocol::tdap::client::recordsetQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordsetQuery *)new_bzs_db_protocol_tdap_client_recordsetQuery();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_recordsetQuery(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::recordsetQuery resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_recordsetQuery(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_recordsetQuery_when) {
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of recordsetQuery_when. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR when< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_recordsetQuery_and_) {
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of recordsetQuery_and_. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR and_< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_recordsetQuery_or_) {
  bzs::db::protocol::tdap::client::recordsetQuery *arg1 = (bzs::db::protocol::tdap::client::recordsetQuery *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of recordsetQuery_or_. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  {
    try {
      arg1->SWIGTEMPLATEDISAMBIGUATOR or_< _TCHAR * >((_TCHAR const *)arg2,(_TCHAR const *)arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_groupFuncBase(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::groupFuncBase resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupFuncBase_targetNames) {
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fieldNames *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupFuncBase_targetNames. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldNames *) &((bzs::db::protocol::tdap::client::groupFuncBase const *)arg1)->targetNames();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupFuncBase_resultName) {
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupFuncBase_resultName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::groupFuncBase const *)arg1)->resultName();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupFuncBase_setResultName) {
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupFuncBase_setResultName. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      (arg1)->setResultName((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupFuncBase_resultKey) {
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupFuncBase_resultKey. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::groupFuncBase const *)arg1)->resultKey();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupFuncBase_reset) {
  bzs::db::protocol::tdap::client::groupFuncBase *arg1 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupFuncBase_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->reset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_reset) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupQuery_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->reset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  //SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_addFunction) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  bzs::db::protocol::tdap::client::groupFuncBase *arg2 = (bzs::db::protocol::tdap::client::groupFuncBase *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupQuery_addFunction. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of groupQuery_addFunction. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase");
    }
  }
  {
    try {
      arg1->addFunction(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_keyField) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = 0x00 ;
  _TCHAR *arg2 = 0x00;
  _TCHAR *arg3 = 0x00;
  _TCHAR *arg4 = 0x00;
  _TCHAR *arg5 = 0x00;
  _TCHAR *arg6 = 0x00;
  _TCHAR *arg7 = 0x00;
  _TCHAR *arg8 = 0x00;
  _TCHAR *arg9 = 0x00;
  _TCHAR *arg10 = 0x00;
  _TCHAR *arg11 = 0x00;
  _TCHAR *arg12 = 0x00;

  int argc = ZEND_NUM_ARGS();
  zval **args[12];
  
  SWIG_ResetError(TSRMLS_C);
  if(argc > 12 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of GroupQuery_keyField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }

  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    {
      if ((*args[1])->type == IS_NULL) {
        SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
      }
    }
    {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
      if ((*args[2])->type != IS_NULL) {
        convert_to_string_ex(args[2]);
        arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
        if ((*args[3])->type != IS_NULL) {
          convert_to_string_ex(args[3]);
          arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
          if ((*args[4])->type != IS_NULL) {
            convert_to_string_ex(args[4]);
            arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                    if ((*args[9])->type != IS_NULL) {
                      convert_to_string_ex(args[9]);
                      arg10 = (_TCHAR *) Z_STRVAL_PP(args[9]);
                      if ((*args[10])->type != IS_NULL) {
                        convert_to_string_ex(args[10]);
                        arg11 = (_TCHAR *) Z_STRVAL_PP(args[10]);
                        if ((*args[11])->type != IS_NULL) {
                          convert_to_string_ex(args[11]);
                          arg12 = (_TCHAR *) Z_STRVAL_PP(args[11]);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      try {
        arg1->keyField(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_getKeyFields) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fieldNames *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupQuery_getKeyFields. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldNames *) &((bzs::db::protocol::tdap::client::groupQuery const *)arg1)->getKeyFields();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_getFunction) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  int arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::groupFuncBase *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupQuery_getFunction. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::groupFuncBase *)((bzs::db::protocol::tdap::client::groupQuery const *)arg1)->getFunction(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_groupQuery_functionCount) {
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of groupQuery_functionCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)((bzs::db::protocol::tdap::client::groupQuery const *)arg1)->functionCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_groupQuery) {
  bzs::db::protocol::tdap::client::groupQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::groupQuery *)new_bzs_db_protocol_tdap_client_groupQuery();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_groupQuery(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::groupQuery *arg1 = (bzs::db::protocol::tdap::client::groupQuery *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::groupQuery *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::groupQuery resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_groupQuery(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_sum__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::sum *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_sum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::sum *)new_bzs_db_protocol_tdap_client_sum__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__sum, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_sum__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::sum *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_sum. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::sum *)new_bzs_db_protocol_tdap_client_sum__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__sum, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_sum) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_sum__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_sum__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_sum'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_sum(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::sum *arg1 = (bzs::db::protocol::tdap::client::sum *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::sum *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__sum TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::sum resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_sum(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_first__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::first *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_first. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::first *)new_bzs_db_protocol_tdap_client_first__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__first, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_first__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::first *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_first. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::first *)new_bzs_db_protocol_tdap_client_first__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__first, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_first) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_first__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_first__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_first'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_first(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::first *arg1 = (bzs::db::protocol::tdap::client::first *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::first *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__first TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::first resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_first(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_last__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::last *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_last. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::last *)new_bzs_db_protocol_tdap_client_last__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__last, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_last__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::last *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_last. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::last *)new_bzs_db_protocol_tdap_client_last__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__last, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_last) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_last__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_last__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_last'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_last(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::last *arg1 = (bzs::db::protocol::tdap::client::last *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::last *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__last TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::last resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_last(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_count) {
  _TCHAR *arg1 = (_TCHAR *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::count *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if ((*args[0])->type != IS_NULL) {
      convert_to_string_ex(args[0]);
      arg1 = (_TCHAR *) Z_STRVAL_PP(args[0]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::count *)new_bzs_db_protocol_tdap_client_count((char const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__count, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_count(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::count *arg1 = (bzs::db::protocol::tdap::client::count *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::count *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__count TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::count resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_count(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_avg__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::avg *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_avg. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::avg *)new_bzs_db_protocol_tdap_client_avg__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__avg, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_avg__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::avg *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_avg. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::avg *)new_bzs_db_protocol_tdap_client_avg__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__avg, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_avg) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_avg__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_avg__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_avg'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_avg(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::avg *arg1 = (bzs::db::protocol::tdap::client::avg *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::avg *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__avg TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::avg resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_avg(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_min__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::min *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_min. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::min *)new_bzs_db_protocol_tdap_client_min__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__min, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_min__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::min *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_min. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::min *)new_bzs_db_protocol_tdap_client_min__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__min, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_min) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_min__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_min__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_min'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_min(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::min *arg1 = (bzs::db::protocol::tdap::client::min *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::min *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__min TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::min resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_min(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_max__SWIG_0) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::max *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_max. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::max *)new_bzs_db_protocol_tdap_client_max__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__max, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_max__SWIG_1) {
  bzs::db::protocol::tdap::client::fieldNames *arg1 = 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::max *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_max. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::max *)new_bzs_db_protocol_tdap_client_max__SWIG_0((bzs::db::protocol::tdap::client::fieldNames const &)*arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__max, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_max) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      _wrap_new_max__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_max__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_max'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_max(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::max *arg1 = (bzs::db::protocol::tdap::client::max *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::max *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__max TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::max resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_max(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset___clone) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::recordset *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset___clone. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordset *)((bzs::db::protocol::tdap::client::recordset const *)arg1)->clone();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_getRecord) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::row *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_getRecord. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::row *) &((bzs::db::protocol::tdap::client::recordset const *)arg1)->operator [](arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_size) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_size. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::recordset const *)arg1)->size();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_count) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_count. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = ((bzs::db::protocol::tdap::client::recordset const *)arg1)->count();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_clearRecords) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_clearRecords. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clearRecords();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_fieldDefs) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fielddefs *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_fieldDefs. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::fielddefs *)((bzs::db::protocol::tdap::client::recordset const *)arg1)->fieldDefs();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_clear) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_clear. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->clear();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_top) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  bzs::db::protocol::tdap::client::recordset *arg2 = 0 ;
  int arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::client::recordset *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_top. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Recordset_top. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordset *) &((bzs::db::protocol::tdap::client::recordset const *)arg1)->top(*arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_begin) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  SwigValueWrapper< std::vector< bzs::db::protocol::tdap::client::fieldsBase * >::iterator > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_begin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (arg1)->begin();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::recordset::iterator * resultobj = new bzs::db::protocol::tdap::client::recordset::iterator((const bzs::db::protocol::tdap::client::recordset::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_end) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  SwigValueWrapper< std::vector< bzs::db::protocol::tdap::client::fieldsBase * >::iterator > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_end. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (arg1)->end();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::recordset::iterator * resultobj = new bzs::db::protocol::tdap::client::recordset::iterator((const bzs::db::protocol::tdap::client::recordset::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_erase__SWIG_0) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  size_t arg2 ;
  zval **args[2];
  SwigValueWrapper< std::vector< bzs::db::protocol::tdap::client::fieldsBase * >::iterator > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_erase. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::recordset::iterator * resultobj = new bzs::db::protocol::tdap::client::recordset::iterator((const bzs::db::protocol::tdap::client::recordset::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_erase__SWIG_1) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  bzs::db::protocol::tdap::client::recordset::iterator *arg2 = 0 ;
  zval **args[2];
  SwigValueWrapper< std::vector< bzs::db::protocol::tdap::client::fieldsBase * >::iterator > result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_erase. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Recordset_erase. Expected SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator");
    }
  }
  {
    try {
      result = (arg1)->erase((bzs::db::protocol::tdap::client::recordset::iterator const &)*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    bzs::db::protocol::tdap::client::recordset::iterator * resultobj = new bzs::db::protocol::tdap::client::recordset::iterator((const bzs::db::protocol::tdap::client::recordset::iterator &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 1);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_erase) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator, 0) >= 0);
      }
      if (_v) {
        _wrap_Recordset_erase__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Recordset_erase__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Recordset_erase'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_removeField) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_removeField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->removeField(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_matchBy) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  bzs::db::protocol::tdap::client::recordsetQuery *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_matchBy. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Recordset_matchBy. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery");
    }
  }
  {
    try {
      arg1->matchBy(*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_groupBy) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  bzs::db::protocol::tdap::client::groupQuery *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_groupBy. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Recordset_groupBy. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery");
    }
  }
  {
    try {
      arg1->groupBy(*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}

ZEND_NAMED_FUNCTION(_wrap_Recordset_orderBy) {
  bzs::db::protocol::tdap::client::recordset *arg1 = 0x00 ;
  bzs::db::protocol::tdap::client::sortFields *arg2s = 0x00 ;
  _TCHAR *arg2 = 0x00;
  _TCHAR *arg3 = 0x00;
  _TCHAR *arg4 = 0x00;
  _TCHAR *arg5 = 0x00;
  _TCHAR *arg6 = 0x00;
  _TCHAR *arg7 = 0x00;
  _TCHAR *arg8 = 0x00;
  _TCHAR *arg9 = 0x00;

  int argc = ZEND_NUM_ARGS();
  zval **args[9];
  
  SWIG_ResetError(TSRMLS_C);
  if(argc > 9 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_orderBy. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }

  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    {
      if ((*args[1])->type == IS_NULL) {
        SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
      }
    }
    int _v = SWIG_ConvertPtr(*args[1], (void **) &arg2s, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields, 0);
    if (_v >= 0) {
      try {
        arg1->orderBy((bzs::db::protocol::tdap::client::sortFields const &)*arg2s);
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    else{
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
      if ((*args[2])->type != IS_NULL) {
        convert_to_string_ex(args[2]);
        arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
        if ((*args[3])->type != IS_NULL) {
          convert_to_string_ex(args[3]);
          arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
          if ((*args[4])->type != IS_NULL) {
            convert_to_string_ex(args[4]);
            arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                  }
                }
              }
            }
          }
        }
      }
      try {
        arg1->orderBy(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_reverse) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_reverse. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->reverse();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_appendField) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  int arg3 ;
  short arg4 ;
  zval **args[4];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_appendField. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (short) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->appendField((_TCHAR const *)arg2,arg3,arg4);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_unionRecordset) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  bzs::db::protocol::tdap::client::recordset *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_unionRecordset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Recordset_unionRecordset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  {
    try {
      arg1->operator +=((bzs::db::protocol::tdap::client::recordset const &)*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_Recordset_getRow) {
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  size_t arg2 ;
  bzs::db::protocol::tdap::client::fieldsBase **arg3 = (bzs::db::protocol::tdap::client::fieldsBase **) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Recordset_getRow. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of Recordset_getRow. Expected SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    try {
      bzs_db_protocol_tdap_client_recordset_getRow(arg1,arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_Recordset) {
  bzs::db::protocol::tdap::client::recordset *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordset *)new_bzs_db_protocol_tdap_client_recordset();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Recordset(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::recordset *arg1 = (bzs::db::protocol::tdap::client::recordset *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::recordset *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::recordset resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_recordset(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_preparedQuery) {
  bzs::db::protocol::tdap::client::pq_handle arg1 ;
  bzs::db::protocol::tdap::client::pq_handle *tmp1 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_preparedQuery. Expected SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t");
    }
    arg1 = *tmp1;
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::preparedQuery *)new bzs::db::protocol::tdap::client::preparedQuery(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_supplyValue) {
  int argc;
  zval **args[3];
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  int arg2 ;
  double arg3d;
  __int64 arg3i;
  _TCHAR *arg3c = (_TCHAR *) 0 ;
  bool result;

  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,args);
  if (argc == 3) {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of preparedQuery::supplyValue. Expected preparedQuery");
    }
    if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
    if (Z_TYPE_PP(args[2]) == IS_LONG){
      convert_to_long_ex(args[1]);
      arg2 = (int) Z_LVAL_PP(args[1]);
    }
    else
       SWIG_PHP_Error(E_ERROR, "Type error in argument 2. Expected integer.");
    int type = 0;
    if (Z_TYPE_PP(args[2]) == IS_DOUBLE){ 
      convert_to_double_ex(args[2]);
      arg3d = (double) Z_DVAL_PP(args[2]);
      type = 1;
    }
    else if (Z_TYPE_PP(args[2]) == IS_LONG){ 
      convert_to_long_ex(args[2]);
      arg3i = (__int64) (*(args[2]))->value.lval;
      type = 2;
    }
    else if (Z_TYPE_PP(args[2]) != IS_NULL){ 
       convert_to_string_ex(args[2]);
      arg3c = (_TCHAR *) Z_STRVAL_PP(args[2]);
      type = 3;
    }
    if (type) {
      try {
        switch(type) {
          case 1: result = (bool)(arg1)->supplyValue(arg2,arg3d);break;
          case 2: result = (bool)(arg1)->supplyValue(arg2,arg3i);break;
          default:result = (bool)(arg1)->supplyValue(arg2,arg3c);break;
        }
      } catch (bzs::rtl::exception& e) {
        SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
      } catch (std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      ZVAL_BOOL(return_value,(result)?1:0);
      return;
    }
  }
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'preparedQuery::supplyValue'";
  SWIG_FAIL(TSRMLS_C);
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_addValue__SWIG_0) {
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of preparedQuery_addValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bool)(arg1)->addValue((_TCHAR const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_addValue__SWIG_1) {
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  __int64 arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of preparedQuery_addValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,12,CONVERT_LONG_LONG_IN@*/
  switch ((*(args[1]))->type) {
  case IS_DOUBLE:
    arg2 = (__int64) (*(args[1]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg2 = (__int64) strtoll((*(args[1]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[1]);
    arg2 = (__int64) (*(args[1]))->value.lval;
  }
  {
    try {
      result = (bool)(arg1)->addValue(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_addValue__SWIG_2) {
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  double arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of preparedQuery_addValue. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bool)(arg1)->addValue(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_addValue) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_preparedQuery_addValue__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_DOUBLE); 
      if (_v) {
        _wrap_preparedQuery_addValue__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_preparedQuery_addValue__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'preparedQuery_addValue'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_preparedQuery_resetAddIndex) {
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of preparedQuery_resetAddIndex. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->resetAddIndex();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_preparedQuery(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::preparedQuery *arg1 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::preparedQuery *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::preparedQuery resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_alias) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  _TCHAR *arg3 = (_TCHAR *) 0 ;
  zval **args[3];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_alias. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    if ((*args[2])->type != IS_NULL) {
      convert_to_string_ex(args[2]);
      arg3 = (_TCHAR *) Z_STRVAL_PP(args[2]);
    }
  }
  {
    try {
      arg1->alias((_TCHAR const *)arg2,(_TCHAR const *)arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_resetAlias) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_resetAlias. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      arg1->resetAlias();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_getWritableRecord) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::writableRecord *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_getWritableRecord. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::writableRecord *) &(arg1)->getWritableRecord();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_index) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_index. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->index(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_option) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_option. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      arg1->option(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_join) {
  int argc = ZEND_NUM_ARGS();
  zval **args[11];

  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::recordset *arg2 = 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg3q = 0 ;
  bzs::db::protocol::tdap::client::preparedQuery *arg3p = 0 ;
  _TCHAR *arg4 = (_TCHAR *) 0 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  _TCHAR *arg7 = (_TCHAR *) 0 ;
  _TCHAR *arg8 = (_TCHAR *) 0 ;
  _TCHAR *arg9 = (_TCHAR *) 0 ;
  _TCHAR *arg10 = (_TCHAR *) 0 ;
  _TCHAR *arg11 = (_TCHAR *) 0 ;

  SWIG_ResetError(TSRMLS_C);
  if(argc != 11 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
        SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_join. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
      if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0 || arg2 == NULL) {
        SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_join. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
      }
  }
  {
    if ((*args[3])->type != IS_NULL) {
      convert_to_string_ex(args[3]);
      arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
      if ((*args[4])->type != IS_NULL) {
        convert_to_string_ex(args[4]);
        arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
        if ((*args[5])->type != IS_NULL) {
          convert_to_string_ex(args[5]);
          arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
          if ((*args[5])->type != IS_NULL) {
            convert_to_string_ex(args[5]);
            arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                    if ((*args[9])->type != IS_NULL) {
                      convert_to_string_ex(args[9]);
                      arg10 = (_TCHAR *) Z_STRVAL_PP(args[9]);
                      if ((*args[10])->type != IS_NULL) {
                        convert_to_string_ex(args[10]);
                        arg11 = (_TCHAR *) Z_STRVAL_PP(args[10]);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    int _v;
    _v = (SWIG_ConvertPtr(*args[2], (void**)&arg3q, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    if (!_v)
    {
      arg3q = NULL;
      _v = (SWIG_ConvertPtr(*args[2], (void**)&arg3p, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
      if (!_v)
        SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of activeTable::join. Expected queryBase or preparedQuery");
    }
    try {
      if (arg3q)
        arg1->join(*arg2, *arg3q, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
      else
        arg1->join(*arg2, arg3p->getFilter(), arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}

ZEND_NAMED_FUNCTION(_wrap_activeTable_outerJoin) {
  int argc = ZEND_NUM_ARGS();
  zval **args[11];

  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::recordset *arg2 = 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg3q = 0 ;
  bzs::db::protocol::tdap::client::preparedQuery *arg3p = 0 ;
  _TCHAR *arg4 = (_TCHAR *) 0 ;
  _TCHAR *arg5 = (_TCHAR *) 0 ;
  _TCHAR *arg6 = (_TCHAR *) 0 ;
  _TCHAR *arg7 = (_TCHAR *) 0 ;
  _TCHAR *arg8 = (_TCHAR *) 0 ;
  _TCHAR *arg9 = (_TCHAR *) 0 ;
  _TCHAR *arg10 = (_TCHAR *) 0 ;
  _TCHAR *arg11 = (_TCHAR *) 0 ;
  SWIG_ResetError(TSRMLS_C);
  if(argc != 11 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
        SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_outerJoin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
      if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 0) < 0 || arg2 == NULL) {
        SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_outerJoin. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset");
      }
  }
  {
    if ((*args[3])->type != IS_NULL) {
      convert_to_string_ex(args[3]);
      arg4 = (_TCHAR *) Z_STRVAL_PP(args[3]);
      if ((*args[4])->type != IS_NULL) {
        convert_to_string_ex(args[4]);
        arg5 = (_TCHAR *) Z_STRVAL_PP(args[4]);
        if ((*args[5])->type != IS_NULL) {
          convert_to_string_ex(args[5]);
          arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
          if ((*args[5])->type != IS_NULL) {
            convert_to_string_ex(args[5]);
            arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
            if ((*args[5])->type != IS_NULL) {
              convert_to_string_ex(args[5]);
              arg6 = (_TCHAR *) Z_STRVAL_PP(args[5]);
              if ((*args[6])->type != IS_NULL) {
                convert_to_string_ex(args[6]);
                arg7 = (_TCHAR *) Z_STRVAL_PP(args[6]);
                if ((*args[7])->type != IS_NULL) {
                  convert_to_string_ex(args[7]);
                  arg8 = (_TCHAR *) Z_STRVAL_PP(args[7]);
                  if ((*args[8])->type != IS_NULL) {
                    convert_to_string_ex(args[8]);
                    arg9 = (_TCHAR *) Z_STRVAL_PP(args[8]);
                    if ((*args[9])->type != IS_NULL) {
                      convert_to_string_ex(args[9]);
                      arg10 = (_TCHAR *) Z_STRVAL_PP(args[9]);
                      if ((*args[10])->type != IS_NULL) {
                        convert_to_string_ex(args[10]);
                        arg11 = (_TCHAR *) Z_STRVAL_PP(args[10]);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    int _v;
    _v = (SWIG_ConvertPtr(*args[2], (void**)&arg3q, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
    if (!_v)
    {
      arg3q = NULL;
      _v = (SWIG_ConvertPtr(*args[2], (void**)&arg3p, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
      if (!_v)
        SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of activeTable::outerJoin. Expected queryBase or preparedQuery");
    }
    
    try {
      if (arg3q)
        arg1->outerJoin(*arg2, *arg3q, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
      else
        arg1->outerJoin(*arg2, arg3p->getFilter(), arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_read__SWIG_0) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::recordset *result = 0 ;
  int argc = ZEND_NUM_ARGS();
  SWIG_ResetError(TSRMLS_C);
  if(((argc < 2) ||(argc > 10)) || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordset *)bzs_db_protocol_tdap_client_activeTable_read__SWIG_0(arg1,*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_read__SWIG_1) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::preparedQuery *arg2 = (bzs::db::protocol::tdap::client::preparedQuery *) 0 ;
  zval **args[10];
  bzs::db::protocol::tdap::client::recordset *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  int argc = ZEND_NUM_ARGS();
  
  if(((argc < 2) ||(argc > 10)) || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_read. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery");
    }
  }
  {
    arg2->resetAddIndex();
    for (int i = 2; i < argc; ++i){
      int type = (*args[i])->type;
      if (type == IS_LONG){
        convert_to_long_ex(args[i]);
        __int64 v = (__int64) (*(args[i]))->value.lval;
        arg2->addValue(v);
      }
      else if (type == IS_STRING){
        convert_to_string_ex(args[i]);
        char* v  =(char *) Z_STRVAL_PP(args[i]);
        arg2->addValue(v);
      }
      else if (type == IS_DOUBLE){
        convert_to_double_ex(args[i]);
        double v  = (double) Z_DVAL_PP(args[i]);
        arg2->addValue(v);
      }
      else if (type == IS_NULL){
        break;
      }
      else{
        SWIG_PHP_Error(E_ERROR, "Type error in argument after 2 of activeTable_read. Expected int or double or string");
      }
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::recordset *)bzs_db_protocol_tdap_client_activeTable_read__SWIG_1(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_read) {
  int argc;
  zval **argv[10];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc >= 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _wrap_activeTable_read__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc >= 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 0) >= 0);
      }
      if (_v) {
        _wrap_activeTable_read__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'activeTable_read'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_readMore) {
  zval **args[2];
  bzs::db::protocol::tdap::client::activeTable *arg1 =  0 ;
  bzs::db::protocol::tdap::client::recordset *result = 0 ;

 
 SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
        SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_readMore. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");

  {
    try {
      result = recordset::create();
      arg1->readMore(*result);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset, 1);

  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_prepare__SWIG_0) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = 0 ;
  bool arg3 ;
  zval **args[3];
  bzs::db::protocol::tdap::client::preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::preparedQuery *)bzs_db_protocol_tdap_client_activeTable_prepare__SWIG_0(arg1,*arg2,arg3);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_prepare__SWIG_1) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  bzs::db::protocol::tdap::client::queryBase *arg2 = 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::preparedQuery *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of activeTable_prepare. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::preparedQuery *)bzs_db_protocol_tdap_client_activeTable_prepare__SWIG_0(arg1,*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_prepare) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _wrap_activeTable_prepare__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_activeTable_prepare__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'activeTable_prepare'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_activeTable__SWIG_0) {
  bzs::db::protocol::tdap::client::idatabaseManager *arg1 = (bzs::db::protocol::tdap::client::idatabaseManager *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::activeTable *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__idatabaseManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_activeTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__idatabaseManager");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::activeTable *)new_bzs_db_protocol_tdap_client_activeTable__SWIG_0(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_activeTable__SWIG_1) {
  bzs::db::protocol::tdap::client::database *arg1 = (bzs::db::protocol::tdap::client::database *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::activeTable *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_activeTable. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__database");
    }
  }
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::activeTable *)new_bzs_db_protocol_tdap_client_activeTable__SWIG_1(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_activeTable) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__idatabaseManager, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_activeTable__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0) >= 0);
    }
    if (_v) {
      {
        _v = 1;
      }
      if (_v) {
        _wrap_new_activeTable__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_activeTable'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_activeTable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::activeTable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::activeTable resource already free'd");
  {
    try {
      delete_bzs_db_protocol_tdap_client_activeTable(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_release) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_release. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      bzs_db_protocol_tdap_client_activeTable_release(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_table) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable_table. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_activeTable_table(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_activeTable_keyValue) {
  bzs::db::protocol::tdap::client::activeTable *arg1 = (bzs::db::protocol::tdap::client::activeTable *) 0 ;
  zval **args[9];
  
  SWIG_ResetError(TSRMLS_C);
  int argc = ZEND_NUM_ARGS();
  if (argc <  2 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
     WRONG_PARAM_COUNT;
  }
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable, 0) < 0) {
       SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of activeTable::keyValue. Expected activeTable");
    }
    bzs::db::protocol::tdap::client::table_ptr tb = arg1->table();
    const bzs::db::protocol::tdap::tabledef* td = tb->tableDef();
    const bzs::db::protocol::tdap::keydef* kd = &td->keyDefs[tb->keyNum()];
    
    if (tb->keyNum() >= td->keyCount){
      SWIG_PHP_Error(E_ERROR, "Key number error. Invalid key number.");
    }
    
    tb->clearBuffer();
    for (int i = 1; i < argc; ++i){
      if (kd->segmentCount < i)
        break;
      ushort_td fnum = kd->segments[i-1].fieldNum;
      int type = (*args[i])->type;
      if (type == IS_LONG){
        convert_to_long_ex(args[i]);
        __int64 v = (__int64) (*(args[i]))->value.lval;
        tb->setFV(fnum, v);
      }
      else if (type == IS_STRING){
        convert_to_string_ex(args[i]);
        char* v  =(char *) Z_STRVAL_PP(args[i]);
        tb->setFV(fnum, v);
      }
      else if (type == IS_DOUBLE){
        convert_to_double_ex(args[i]);
        double v  = (double) Z_DVAL_PP(args[i]);
        tb->setFV(fnum, v);
      }
      else
        tb->setFV(fnum, (int)0);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_pooledDbManager__SWIG_0) {
  bzs::db::protocol::tdap::client::pooledDbManager *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::pooledDbManager *)new bzs::db::protocol::tdap::client::pooledDbManager();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_pooledDbManager__SWIG_1) {
  bzs::db::protocol::tdap::client::connectParams *arg1 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::pooledDbManager *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_pooledDbManager. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::pooledDbManager *)new bzs::db::protocol::tdap::client::pooledDbManager((bzs::db::protocol::tdap::client::connectParams const *)arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 1);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_pooledDbManager) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_pooledDbManager__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) >= 0);
    }
    if (_v) {
      _wrap_new_pooledDbManager__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_pooledDbManager'";
  SWIG_FAIL(TSRMLS_C);
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_pooledDbManager(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "bzs::db::protocol::tdap::client::pooledDbManager resource already free'd");
  {
    try {
      delete arg1;
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_c_use__SWIG_0) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  bzs::db::protocol::tdap::client::connectParams *arg2 = (bzs::db::protocol::tdap::client::connectParams *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_c_use. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of pooledDbManager_c_use. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  {
    try {
      (arg1)->use((bzs::db::protocol::tdap::client::connectParams const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_c_use__SWIG_1) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_c_use. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->use();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_c_use) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) >= 0);
    }
    if (_v) {
      _wrap_pooledDbManager_c_use__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) >= 0);
      }
      if (_v) {
        _wrap_pooledDbManager_c_use__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'pooledDbManager_c_use'";
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_unUse) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_unUse. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->unUse();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_reset) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_reset. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->reset(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_db) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::database *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_db. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bzs::db::protocol::tdap::client::database *)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->db();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__database, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_uri) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  _TCHAR *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_uri. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (_TCHAR *)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->uri();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_mode) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  char_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_mode. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (char_td)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->mode();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_isOpened) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_isOpened. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (bool)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->isOpened();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_setOption) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  __int64 arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_setOption. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,12,CONVERT_LONG_LONG_IN@*/
  switch ((*(args[1]))->type) {
  case IS_DOUBLE:
    arg2 = (__int64) (*(args[1]))->value.dval;
    break;
    case IS_STRING: {
      char * endptr;
      errno = 0;
      arg2 = (__int64) strtoll((*(args[1]))->value.str.val, &endptr, 10);
      if (*endptr && !errno) break;
      /* FALL THRU */
    }
  default:
    convert_to_long_ex(args[1]);
    arg2 = (__int64) (*(args[1]))->value.lval;
  }
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->setOption(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_option) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  __int64 result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_option. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (arg1)->option();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  if ((long long)LONG_MIN <= result && result <= (long long)LONG_MAX) {
    return_value->value.lval = (long)(result);
    return_value->type = IS_LONG;
  } else {
    char temp[256];
    sprintf(temp, "%lld", (long long)result);
    ZVAL_STRING(return_value, temp, 1);
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_beginTrn) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  short arg2 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_beginTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (short) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    try {
      (arg1)->beginTrn(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_endTrn) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_endTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->endTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_abortTrn) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_abortTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->abortTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_enableTrn) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_enableTrn. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (int)(arg1)->enableTrn();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_beginSnapshot) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = 0 ;
  short arg2 = CONSISTENT_READ;
  int argc = ZEND_NUM_ARGS();
  zval **args[2];
  SWIG_ResetError(TSRMLS_C);
  if(argc > 2 || zend_get_parameters_array_ex(argc, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_beginSnapshot. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  {
    if (argc == 2)
    {
      convert_to_long_ex(args[1]);
      arg2 = (short) Z_LVAL_PP(args[1]);
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->beginSnapshot(arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_endSnapshot) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_endSnapshot. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      (arg1)->endSnapshot();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_stat) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  short_td result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_stat. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->stat();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_clientID) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  zval **args[1];
  uchar_td *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_clientID. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (uchar_td *)((bzs::db::protocol::tdap::client::pooledDbManager const *)arg1)->clientID();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_unsigned_char, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_setMaxConnections) {
  int arg1 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    try {
      bzs::db::protocol::tdap::client::pooledDbManager::setMaxConnections(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_maxConnections) {
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (int)bzs::db::protocol::tdap::client::pooledDbManager::maxConnections();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_reserve) {
  size_t arg1 ;
  bzs::db::protocol::tdap::client::connectParams *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/usr/local/share/swig/3.0.2/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (size_t) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of pooledDbManager_reserve. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams");
    }
  }
  {
    try {
      bzs::db::protocol::tdap::client::pooledDbManager::reserve(arg1,(bzs::db::protocol::tdap::client::connectParams const &)*arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_table) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = (bzs::db::protocol::tdap::client::pooledDbManager *) 0 ;
  _TCHAR *arg2 = (_TCHAR *) 0 ;
  zval **args[2];
  bzs::db::protocol::tdap::client::table *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_table. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if ((*args[1])->type != IS_NULL) {
      convert_to_string_ex(args[1]);
      arg2 = (_TCHAR *) Z_STRVAL_PP(args[1]);
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::table *)bzs_db_protocol_tdap_client_pooledDbManager_table(arg1,(char const *)arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__table, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_pooledDbManager_usingCount) {
  bzs::db::protocol::tdap::client::pooledDbManager *arg1 = 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of pooledDbManager_usingCount. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    try {
      result = (short_td)arg1->usingCount();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_new_fieldsBase_p_p) {
  bzs::db::protocol::tdap::client::fieldsBase **result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldsBase **)new_fieldsBase_p_p();
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_copy_fieldsBase_p_p) {
  bzs::db::protocol::tdap::client::fieldsBase *arg1 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fieldsBase **result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of copy_fieldsBase_p_p. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldsBase **)copy_fieldsBase_p_p(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_delete_fieldsBase_p_p) {
  bzs::db::protocol::tdap::client::fieldsBase **arg1 = (bzs::db::protocol::tdap::client::fieldsBase **) 0 ;
  zval **args[1];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of delete_fieldsBase_p_p. Expected SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    try {
      delete_fieldsBase_p_p(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldsBase_p_p_assign) {
  bzs::db::protocol::tdap::client::fieldsBase **arg1 = (bzs::db::protocol::tdap::client::fieldsBase **) 0 ;
  bzs::db::protocol::tdap::client::fieldsBase *arg2 = (bzs::db::protocol::tdap::client::fieldsBase *) 0 ;
  zval **args[2];
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldsBase_p_p_assign. Expected SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of fieldsBase_p_p_assign. Expected SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    try {
      fieldsBase_p_p_assign(arg1,arg2);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


ZEND_NAMED_FUNCTION(_wrap_fieldsBase_p_p_value) {
  bzs::db::protocol::tdap::client::fieldsBase **arg1 = (bzs::db::protocol::tdap::client::fieldsBase **) 0 ;
  zval **args[1];
  bzs::db::protocol::tdap::client::fieldsBase *result = 0 ;
  
  SWIG_ResetError(TSRMLS_C);
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of fieldsBase_p_p_value. Expected SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase");
    }
  }
  {
    try {
      result = (bzs::db::protocol::tdap::client::fieldsBase *)fieldsBase_p_p_value(arg1);
    } catch (bzs::rtl::exception& e) {
      SWIG_exception(SWIG_RuntimeError, (* bzs::rtl::getMsg(e)).c_str());
    } catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase, 0);
  
  return;
fail:
  SWIG_FAIL(TSRMLS_C);
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__table) {
  __wrap_delete_table(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__table->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_iterator) {
  /* No destructor for simple type _p_iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t) {
  /* No destructor for simple type _p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__database) {
  __wrap_delete_database(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__database->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__nsdatabase) {
  /* No destructor for class nsdatabase */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__dbdef) {
  /* No destructor for class dbdef */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef_tT_64_t) {
  __wrap_delete_fielddef_t_my(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldShare) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__fieldShare */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__pooledDbManager) {
  __wrap_delete_pooledDbManager(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef_tT_20_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__fielddef_tT_20_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__sortField) {
  __wrap_delete_sortField(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_short) {
  /* No destructor for simple type _p_unsigned_short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_short) {
  /* No destructor for simple type _p_short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__recordset) {
  __wrap_delete_Recordset(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__timer) {
  /* No destructor for simple type _p_boost__timer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__groupQuery) {
  __wrap_delete_groupQuery(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_bzs__db__protocol__tdap__tabledef) {
  /* No destructor for simple type _p_p_bzs__db__protocol__tdap__tabledef */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__tabledef) {
  __wrap_delete_tabledef(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__tabledef->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__groupFuncBase) {
  __wrap_delete_groupFuncBase(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldsBase) {
  __wrap_delete_Record(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__FLAGS) {
  __wrap_delete_FLAGS(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_bzs__db__protocol__tdap__client__fieldsBase) {
  /* No destructor for simple type _p_p_bzs__db__protocol__tdap__client__fieldsBase */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__count) {
  __wrap_delete_count(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__count->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_void) {
  /* No destructor for simple type _p_void */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_void) {
  /* No destructor for simple type _p_p_void */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__sum) {
  __wrap_delete_sum(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__sum->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__first) {
  __wrap_delete_first(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__first->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__last) {
  __wrap_delete_last(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__last->name TSRMLS_CC);
}

static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__avg) {
  __wrap_delete_avg(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__avg->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__queryBase) {
  /* No destructor for class queryBase */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef) {
  __wrap_delete_fielddef(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__fielddef->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std___tstring) {
  /* No destructor for simple type _p_std___tstring */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldNames) {
  __wrap_delete_fieldNames(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrVersion) {
  __wrap_delete_btrVersion(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrDate) {
  __wrap_delete_btrDate(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrDate->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_preparedQuery) {
  /* No destructor for simple type _p_preparedQuery */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__preparedQuery) {
  __wrap_delete_preparedQuery(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__fielddefs) {
  __wrap_delete_fielddefs(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__field) {
  __wrap_delete_field(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__field->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__nstable) {
  /* No destructor for class nstable */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrTimeStamp) {
  __wrap_delete_btrTimeStamp(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__max) {
  __wrap_delete_max(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__max->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_char) {
  /* No destructor for simple type _p_p_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_char) {
  /* No destructor for simple type _p_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__keySegment) {
  __wrap_delete_keySegment(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__keySegment->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__writableRecord) {
  /* No destructor for class writableRecord */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__memoryRecord) {
  __wrap_delete_memoryRecord(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__min) {
  __wrap_delete_min(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__min->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__connectParams) {
  __wrap_delete_connectParams(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrDateTime) {
  __wrap_delete_btrDateTime(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short) {
  /* No destructor for simple type _p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_HWND) {
  /* No destructor for simple type _p_HWND */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__recordsetQuery) {
  __wrap_delete_recordsetQuery(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__rtl__benchmark) {
  __wrap_delete_benchmark(rsrc, SWIGTYPE_p_bzs__rtl__benchmark->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_bool) {
  /* No destructor for simple type _bool */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t) {
  /* No destructor for simple type _p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_int) {
  /* No destructor for simple type _p_unsigned_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_unsigned_char) {
  /* No destructor for simple type _p_unsigned_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__activeTable) {
  __wrap_delete_activeTable(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrTime) {
  __wrap_delete_btrTime(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrTime->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__btrVersions) {
  __wrap_delete_btrVersions(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__query) {
  __wrap_delete_query(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__query->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__fields) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__fields */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator) {
  /* No destructor for simple type _p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__sortFields) {
  __wrap_delete_sortFields(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__keydef) {
  __wrap_delete_keydef(rsrc, SWIGTYPE_p_bzs__db__protocol__tdap__keydef->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t) {
  /* No destructor for simple type _p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t */
  efree(rsrc->ptr);
}
/* end wrapper section */
/* class entry subsection */


/* arginfo subsection */
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_bookmark, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_bookmark_isempty, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_canrecoverneterror, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_all_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_all_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit0_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit0_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit1_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit1_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit2_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit2_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit3_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit3_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit4_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit4_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit5_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit5_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit6_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit6_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit7_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit7_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit8_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit8_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit9_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bit9_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bita_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bita_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitb_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitb_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitc_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitc_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitd_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitd_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bite_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bite_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitf_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_flags_bitf_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_flags, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keysegment_fieldnum_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keysegment_fieldnum_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keysegment_flags_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keysegment_flags_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_keysegment, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_segmentcount_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_segmentcount_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_segments_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_segments_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_keynumber_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_keynumber_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_keydef_segment, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_keydef, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_mysql_fdname_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_mysql_tbname_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pervasive_fdname_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_name_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_name_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_file_name_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_filler_size_get, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gettypename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gettypealign, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_lenbycharnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_isstringtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_type_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_type_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_len_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_len_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_decimals_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_decimals_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_max_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_max_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_min_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_min_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_pos_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_pos_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_ddfid_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_ddfid_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_nullvalue_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_nullvalue_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_keylen_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_t_my_keylen_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fielddef_t_my, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_setname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_typename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_align, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_setlenbycharnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_codepage, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_varlenbytes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_bloblenbytes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_isstringtype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_isnumerictype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_charnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_setcharsetindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_charsetindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_name, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_trimpadchar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_usepadchar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddef_setpadcharsettings, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fielddef, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_tabledef, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_cleanup, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_filename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_tablename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_setfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_settablename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_tochar, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_id_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_id_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_pagesize_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_pagesize_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_varsize_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_varsize_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_prealloc_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_prealloc_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fieldcount_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fieldcount_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_keycount_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_keycount_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_version_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_version_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_charsetindex_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_charsetindex_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_flags_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_flags_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_primarykeynum_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_primarykeynum_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_maxrecordlen_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_maxrecordlen_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_ddfid_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_ddfid_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fixedrecordlen_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fixedrecordlen_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_schemacodepage_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_schemacodepage_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_parent_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_parent_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fielddefs_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fielddefs_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_keydefs_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_keydefs_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_fielddef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_tabledef_keydef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_majorversion_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_majorversion_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_minorversion_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_minorversion_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_type_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_type_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_moduleversionshortstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversion_moduletypestring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrversion, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversions_versions_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversions_versions_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrversions_version, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrversions, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_getfilterlogictypecode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_nsdb, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_tableid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_settableid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_isopen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_isusetransactd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_setaccessrights, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_datalen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_stat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_keynum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_setkeynum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_canread, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_canwrite, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_caninsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_candelete, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_getwriteimagelen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_close, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_update, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_del, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_insert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_createindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_dropindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_recordcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_tdaplasterr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_beginbulkinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_abortbulkinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_commitbulkinsert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seekfirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seeklast, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seekprev, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seeknext, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seek, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seekgreater, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seeklessthan, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_stepfirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_steplast, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_stepprev, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_stepnext, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_bookmarklen, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_bookmark, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seekbybookmark, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_getpercentage, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_seekbypercentage, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_setownername, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_clearownername, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_recordlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_stats, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_unlock, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_mode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_getfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_tdaperr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_getdiruri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nstable_existsfile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_tablecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_openmode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_tabledefs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_tabledefptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_setversion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_version, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_stat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_validatetabledef, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_updatetabledef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_insertfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_deletefield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_insertkey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_deletekey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_inserttable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_deletetable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_renumbertable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_tablenumbyname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_getrecordlen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_findkeynumbyfieldnum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_fieldnumbyname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_fieldvalidlength, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_tdaperr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_reopen, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbdef_mode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_tabledef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_tabledefptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_valiableformattype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_blobfieldused, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_logicaltostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setlogicaltostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_optionaldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setoptionaldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_mydatetimevaluebybtrv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_bookmarkscount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_movebookmarks, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_bookmarks, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_clearbuffer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getrecordhash, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_smartupdate, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_find, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_findfirst, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_findlast, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_findnext, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_findprev, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_statreasonoffind, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_lastfinddirection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_bookmarkfindcurrent, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setfilter, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_fieldnumbyname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvbyt, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvsht, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvlng, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfv64, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvflt, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvdbl, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvstr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_fields, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setfv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_getfvbin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_keyvaluedescription, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_prepare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setquery, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_setprepare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_table_release, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_clearseekkeyvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_clearselectfields, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_addseekkeyvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_reserveseekkeyvaluesize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_querystring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_reject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_limit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_direction, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_all, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_optimize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_bookmarkalso, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_tostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getdirection, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getreject, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getlimit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_isall, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getjoinkeysize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getoptimize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_isbookmarkalso, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_seekbybookmarks, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_isseekbybookmarks, 0, 0, 0)
ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_selectcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getselect, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_wheretokens, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_getwheretoken, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_setwheretoken, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_reversealiasname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_stopatlimit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_querybase_isstopatlimit, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_select, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_query, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_where, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_and_, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_or_, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_query_in, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_supplyvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_supplyinvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_setbtrventrypoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_getbtrventrypoint, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_settrnsctdentrypoint, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_gettrnsctdentrypoint, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_nsdatabase, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_enabletrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_stat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_clientid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_opentablecount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_uri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_urimode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_lockwaitcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_lockwaittime, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setlockwaitcount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setlockwaittime, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setlocalsharing, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_droptable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_rename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_swaptablename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_begintrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_endtrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_aborttrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_beginsnapshot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_endsnapshot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_trxIsolationServer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_trxLockWaitTimeoutServer, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_tdaperr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_uselongfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setuselongfilename, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setusetransactd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_istransactduri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_isusetransactd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_readdatabasedirectory, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_connect, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_disconnect, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_disconnectForReconnectTest, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_reconnect, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_trnsactionflushwaitstatus, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setexeccodepage, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_execcodepage, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_nsdatabase_setchecktableptr, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_dbdef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_rootdir, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_setrootdir, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_optionaldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_setoptionaldata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_tablereadonly, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_settablereadonly, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_open, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_create, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_drop, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_droptable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_close, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_aclReload, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_continuous, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_assignschemadata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_copytabledata, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_converttable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_existstablefile, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_gettableuri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_getbtrversion, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_isopened, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_mode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_database, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_database_opentable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_benchmark_start, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_benchmark_stop, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_benchmark_showtimes, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_benchmark_showtimesec, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_benchmark, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_charsize, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_charsetname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_charsetindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_codepage, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_dd_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_dd_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_mm_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_mm_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_yy_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_yy_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_i_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdate_i_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrdate, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_uu_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_uu_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_ss_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_ss_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_nn_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_nn_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_hh_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_hh_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_i_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtime_i_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrtime, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_time_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_time_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_date_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_date_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_i64_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdatetime_i64_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrdatetime, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtimestamp_i64_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtimestamp_i64_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_btrtimestamp, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtimestamp_tostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrtimestamp_fromstring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_atobtrd, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_atobtrt, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrdtoa, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrttoa, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_btrstoa, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_atobtrs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_getnowdate, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_getnowtime, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddefs___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddefs_indexbyname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddefs_getfielddef, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddefs_checkindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fielddefs_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fielddefs, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_field, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_type, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_len, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_c_str, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_a_str, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_i, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_i8, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_i16, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_i64, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_f, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_d, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_setfv, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_getbin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_field_comp, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_isinvalidrecord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_getfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_indexbyname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_fielddefs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_getfieldbyindexref, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_record_getfieldbynameref, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_memoryrecord_createrecord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_memoryrecord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_writablerecord_read, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_writablerecord_insert, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_writablerecord_del, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_writablerecord_update, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_writablerecord_save, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_connectparams, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_connectparams_setmode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_connectparams_settype, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_connectparams_uri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_connectparams_mode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_connectparams_type, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_host, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_dbname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_schematable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_keyfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_count, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_getfieldname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_getvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_addvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldnames_addvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fieldnames, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfield_name_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfield_name_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfield_asc_set, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfield_asc_get, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_sortfield, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfields_add, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfields_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfields_getsortfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sortfields_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_sortfields, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordsetquery_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordsetquery_tostring, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_recordsetquery, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordsetquery_when, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordsetquery_and_, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordsetquery_or_, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase_targetnames, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase_resultname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase_setresultname, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase_resultkey, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupfuncbase___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_addfunction, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_keyfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_getkeyfields, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_getfunction, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_groupquery_functioncount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_groupquery, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_sum___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_sum, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_first___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_first, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_last___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_last, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_count___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_count, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_avg___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_avg, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_min___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_min, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_max___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_max, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset___clone, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_getrecord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_size, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_count, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_clearrecords, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_fielddefs, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_clear, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_top, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_begin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_end, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_erase, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_removefield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_matchby, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_groupby, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_orderby, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_reverse, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_appendfield, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_unionrecordset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_recordset_getrow, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_recordset, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_preparedquery, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_preparedquery_supplyvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_preparedquery_addvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_preparedquery_resetaddindex, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_preparedquery_supplyinvalues, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_alias, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_resetalias, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_getwritablerecord, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_index, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_option, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_read, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_readmore, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_prepare, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_join, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_outerjoin, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_activetable, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_release, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_table, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_activetable_keyvalue, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_pooleddbmanager, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_c_use, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_unuse, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_reset, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_db, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_uri, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_mode, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_isopened, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_setoption, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_option, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_begintrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_endtrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_aborttrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_enabletrn, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_beginsnapshot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_endsnapshot, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_stat, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_clientid, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_setmaxconnections, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_maxconnections, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_reserve, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_table, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_pooleddbmanager_usingCount, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_new_fieldsbase_p_p, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_copy_fieldsbase_p_p, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_delete_fieldsbase_p_p, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldsbase_p_p_assign, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(swig_arginfo_fieldsbase_p_p_value, 0, 0, 0)
 ZEND_ARG_PASS_INFO(0)
ZEND_END_ARG_INFO()


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry transactd_functions[] = {
 SWIG_ZEND_NAMED_FE(new_bookmark, _wrap_new_BOOKMARK, swig_arginfo_new_bookmark)
 SWIG_ZEND_NAMED_FE(bookmark_isempty, _wrap_BOOKMARK_isEmpty, swig_arginfo_bookmark_isempty)
 SWIG_ZEND_NAMED_FE(canrecoverneterror, _wrap_canRecoverNetError, swig_arginfo_canrecoverneterror)
 SWIG_ZEND_NAMED_FE(flags_all_set,_wrap_FLAGS_all_set,swig_arginfo_flags_all_set)
 SWIG_ZEND_NAMED_FE(flags_all_get,_wrap_FLAGS_all_get,swig_arginfo_flags_all_get)
 SWIG_ZEND_NAMED_FE(flags_bit0_set,_wrap_FLAGS_bit0_set,swig_arginfo_flags_bit0_set)
 SWIG_ZEND_NAMED_FE(flags_bit0_get,_wrap_FLAGS_bit0_get,swig_arginfo_flags_bit0_get)
 SWIG_ZEND_NAMED_FE(flags_bit1_set,_wrap_FLAGS_bit1_set,swig_arginfo_flags_bit1_set)
 SWIG_ZEND_NAMED_FE(flags_bit1_get,_wrap_FLAGS_bit1_get,swig_arginfo_flags_bit1_get)
 SWIG_ZEND_NAMED_FE(flags_bit2_set,_wrap_FLAGS_bit2_set,swig_arginfo_flags_bit2_set)
 SWIG_ZEND_NAMED_FE(flags_bit2_get,_wrap_FLAGS_bit2_get,swig_arginfo_flags_bit2_get)
 SWIG_ZEND_NAMED_FE(flags_bit3_set,_wrap_FLAGS_bit3_set,swig_arginfo_flags_bit3_set)
 SWIG_ZEND_NAMED_FE(flags_bit3_get,_wrap_FLAGS_bit3_get,swig_arginfo_flags_bit3_get)
 SWIG_ZEND_NAMED_FE(flags_bit4_set,_wrap_FLAGS_bit4_set,swig_arginfo_flags_bit4_set)
 SWIG_ZEND_NAMED_FE(flags_bit4_get,_wrap_FLAGS_bit4_get,swig_arginfo_flags_bit4_get)
 SWIG_ZEND_NAMED_FE(flags_bit5_set,_wrap_FLAGS_bit5_set,swig_arginfo_flags_bit5_set)
 SWIG_ZEND_NAMED_FE(flags_bit5_get,_wrap_FLAGS_bit5_get,swig_arginfo_flags_bit5_get)
 SWIG_ZEND_NAMED_FE(flags_bit6_set,_wrap_FLAGS_bit6_set,swig_arginfo_flags_bit6_set)
 SWIG_ZEND_NAMED_FE(flags_bit6_get,_wrap_FLAGS_bit6_get,swig_arginfo_flags_bit6_get)
 SWIG_ZEND_NAMED_FE(flags_bit7_set,_wrap_FLAGS_bit7_set,swig_arginfo_flags_bit7_set)
 SWIG_ZEND_NAMED_FE(flags_bit7_get,_wrap_FLAGS_bit7_get,swig_arginfo_flags_bit7_get)
 SWIG_ZEND_NAMED_FE(flags_bit8_set,_wrap_FLAGS_bit8_set,swig_arginfo_flags_bit8_set)
 SWIG_ZEND_NAMED_FE(flags_bit8_get,_wrap_FLAGS_bit8_get,swig_arginfo_flags_bit8_get)
 SWIG_ZEND_NAMED_FE(flags_bit9_set,_wrap_FLAGS_bit9_set,swig_arginfo_flags_bit9_set)
 SWIG_ZEND_NAMED_FE(flags_bit9_get,_wrap_FLAGS_bit9_get,swig_arginfo_flags_bit9_get)
 SWIG_ZEND_NAMED_FE(flags_bita_set,_wrap_FLAGS_bitA_set,swig_arginfo_flags_bita_set)
 SWIG_ZEND_NAMED_FE(flags_bita_get,_wrap_FLAGS_bitA_get,swig_arginfo_flags_bita_get)
 SWIG_ZEND_NAMED_FE(flags_bitb_set,_wrap_FLAGS_bitB_set,swig_arginfo_flags_bitb_set)
 SWIG_ZEND_NAMED_FE(flags_bitb_get,_wrap_FLAGS_bitB_get,swig_arginfo_flags_bitb_get)
 SWIG_ZEND_NAMED_FE(flags_bitc_set,_wrap_FLAGS_bitC_set,swig_arginfo_flags_bitc_set)
 SWIG_ZEND_NAMED_FE(flags_bitc_get,_wrap_FLAGS_bitC_get,swig_arginfo_flags_bitc_get)
 SWIG_ZEND_NAMED_FE(flags_bitd_set,_wrap_FLAGS_bitD_set,swig_arginfo_flags_bitd_set)
 SWIG_ZEND_NAMED_FE(flags_bitd_get,_wrap_FLAGS_bitD_get,swig_arginfo_flags_bitd_get)
 SWIG_ZEND_NAMED_FE(flags_bite_set,_wrap_FLAGS_bitE_set,swig_arginfo_flags_bite_set)
 SWIG_ZEND_NAMED_FE(flags_bite_get,_wrap_FLAGS_bitE_get,swig_arginfo_flags_bite_get)
 SWIG_ZEND_NAMED_FE(flags_bitf_set,_wrap_FLAGS_bitF_set,swig_arginfo_flags_bitf_set)
 SWIG_ZEND_NAMED_FE(flags_bitf_get,_wrap_FLAGS_bitF_get,swig_arginfo_flags_bitf_get)
 SWIG_ZEND_NAMED_FE(new_flags,_wrap_new_FLAGS,swig_arginfo_new_flags)
 SWIG_ZEND_NAMED_FE(keysegment_fieldnum_set,_wrap_keySegment_fieldNum_set,swig_arginfo_keysegment_fieldnum_set)
 SWIG_ZEND_NAMED_FE(keysegment_fieldnum_get,_wrap_keySegment_fieldNum_get,swig_arginfo_keysegment_fieldnum_get)
 SWIG_ZEND_NAMED_FE(keysegment_flags_set,_wrap_keySegment_flags_set,swig_arginfo_keysegment_flags_set)
 SWIG_ZEND_NAMED_FE(keysegment_flags_get,_wrap_keySegment_flags_get,swig_arginfo_keysegment_flags_get)
 SWIG_ZEND_NAMED_FE(new_keysegment,_wrap_new_keySegment,swig_arginfo_new_keysegment)
 SWIG_ZEND_NAMED_FE(keydef_segmentcount_set,_wrap_keydef_segmentCount_set,swig_arginfo_keydef_segmentcount_set)
 SWIG_ZEND_NAMED_FE(keydef_segmentcount_get,_wrap_keydef_segmentCount_get,swig_arginfo_keydef_segmentcount_get)
 SWIG_ZEND_NAMED_FE(keydef_segments_set,_wrap_keydef_segments_set,swig_arginfo_keydef_segments_set)
 SWIG_ZEND_NAMED_FE(keydef_segments_get,_wrap_keydef_segments_get,swig_arginfo_keydef_segments_get)
 SWIG_ZEND_NAMED_FE(keydef_keynumber_set,_wrap_keydef_keyNumber_set,swig_arginfo_keydef_keynumber_set)
 SWIG_ZEND_NAMED_FE(keydef_keynumber_get,_wrap_keydef_keyNumber_get,swig_arginfo_keydef_keynumber_get)
 SWIG_ZEND_NAMED_FE(keydef_segment,_wrap_keydef_segment,swig_arginfo_keydef_segment)
 SWIG_ZEND_NAMED_FE(new_keydef,_wrap_new_keydef,swig_arginfo_new_keydef)
 SWIG_ZEND_NAMED_FE(mysql_fdname_size_get,_wrap_MYSQL_FDNAME_SIZE_get,swig_arginfo_mysql_fdname_size_get)
 SWIG_ZEND_NAMED_FE(mysql_tbname_size_get,_wrap_MYSQL_TBNAME_SIZE_get,swig_arginfo_mysql_tbname_size_get)
 SWIG_ZEND_NAMED_FE(pervasive_fdname_size_get,_wrap_PERVASIVE_FDNAME_SIZE_get,swig_arginfo_pervasive_fdname_size_get)
 SWIG_ZEND_NAMED_FE(field_name_size_get,_wrap_FIELD_NAME_SIZE_get,swig_arginfo_field_name_size_get)
 SWIG_ZEND_NAMED_FE(table_name_size_get,_wrap_TABLE_NAME_SIZE_get,swig_arginfo_table_name_size_get)
 SWIG_ZEND_NAMED_FE(file_name_size_get,_wrap_FILE_NAME_SIZE_get,swig_arginfo_file_name_size_get)
 SWIG_ZEND_NAMED_FE(tabledef_filler_size_get,_wrap_TABLEDEF_FILLER_SIZE_get,swig_arginfo_tabledef_filler_size_get)
 SWIG_ZEND_NAMED_FE(gettypename,_wrap_getTypeName,swig_arginfo_gettypename)
 SWIG_ZEND_NAMED_FE(gettypealign,_wrap_getTypeAlign,swig_arginfo_gettypealign)
 SWIG_ZEND_NAMED_FE(lenbycharnum,_wrap_lenByCharnum,swig_arginfo_lenbycharnum)
 SWIG_ZEND_NAMED_FE(isstringtype,_wrap_isStringType,swig_arginfo_isstringtype)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_type_set,_wrap_fielddef_t_my_type_set,swig_arginfo_fielddef_t_my_type_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_type_get,_wrap_fielddef_t_my_type_get,swig_arginfo_fielddef_t_my_type_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_len_set,_wrap_fielddef_t_my_len_set,swig_arginfo_fielddef_t_my_len_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_len_get,_wrap_fielddef_t_my_len_get,swig_arginfo_fielddef_t_my_len_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_decimals_set,_wrap_fielddef_t_my_decimals_set,swig_arginfo_fielddef_t_my_decimals_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_decimals_get,_wrap_fielddef_t_my_decimals_get,swig_arginfo_fielddef_t_my_decimals_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_max_set,_wrap_fielddef_t_my_max_set,swig_arginfo_fielddef_t_my_max_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_max_get,_wrap_fielddef_t_my_max_get,swig_arginfo_fielddef_t_my_max_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_min_set,_wrap_fielddef_t_my_min_set,swig_arginfo_fielddef_t_my_min_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_min_get,_wrap_fielddef_t_my_min_get,swig_arginfo_fielddef_t_my_min_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_pos_set,_wrap_fielddef_t_my_pos_set,swig_arginfo_fielddef_t_my_pos_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_pos_get,_wrap_fielddef_t_my_pos_get,swig_arginfo_fielddef_t_my_pos_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_ddfid_set,_wrap_fielddef_t_my_ddfid_set,swig_arginfo_fielddef_t_my_ddfid_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_ddfid_get,_wrap_fielddef_t_my_ddfid_get,swig_arginfo_fielddef_t_my_ddfid_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_nullvalue_set,_wrap_fielddef_t_my_nullValue_set,swig_arginfo_fielddef_t_my_nullvalue_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_nullvalue_get,_wrap_fielddef_t_my_nullValue_get,swig_arginfo_fielddef_t_my_nullvalue_get)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_keylen_set,_wrap_fielddef_t_my_keylen_set,swig_arginfo_fielddef_t_my_keylen_set)
 SWIG_ZEND_NAMED_FE(fielddef_t_my_keylen_get,_wrap_fielddef_t_my_keylen_get,swig_arginfo_fielddef_t_my_keylen_get)
 SWIG_ZEND_NAMED_FE(new_fielddef_t_my,_wrap_new_fielddef_t_my,swig_arginfo_new_fielddef_t_my)
 SWIG_ZEND_NAMED_FE(fielddef_setname,_wrap_fielddef_setName,swig_arginfo_fielddef_setname)
 SWIG_ZEND_NAMED_FE(fielddef_typename,_wrap_fielddef_typeName,swig_arginfo_fielddef_typename)
 SWIG_ZEND_NAMED_FE(fielddef_align,_wrap_fielddef_align,swig_arginfo_fielddef_align)
 SWIG_ZEND_NAMED_FE(fielddef_setlenbycharnum,_wrap_fielddef_setLenByCharnum,swig_arginfo_fielddef_setlenbycharnum)
 SWIG_ZEND_NAMED_FE(fielddef_codepage,_wrap_fielddef_codePage,swig_arginfo_fielddef_codepage)
 SWIG_ZEND_NAMED_FE(fielddef_isstringtype,_wrap_fielddef_isStringType,swig_arginfo_fielddef_isstringtype)
 SWIG_ZEND_NAMED_FE(fielddef_isnumerictype,_wrap_fielddef_isNumericType,swig_arginfo_fielddef_isnumerictype)
 SWIG_ZEND_NAMED_FE(fielddef_charnum,_wrap_fielddef_charNum,swig_arginfo_fielddef_charnum)
 SWIG_ZEND_NAMED_FE(fielddef_setcharsetindex,_wrap_fielddef_setCharsetIndex,swig_arginfo_fielddef_setcharsetindex)
 SWIG_ZEND_NAMED_FE(fielddef_charsetindex,_wrap_fielddef_charsetIndex,swig_arginfo_fielddef_charsetindex)
 SWIG_ZEND_NAMED_FE(fielddef_varlenbytes,_wrap_fielddef_varLenBytes,swig_arginfo_fielddef_varlenbytes)
 SWIG_ZEND_NAMED_FE(fielddef_bloblenbytes,_wrap_fielddef_blobLenBytes,swig_arginfo_fielddef_bloblenbytes)
 SWIG_ZEND_NAMED_FE(fielddef_name,_wrap_fielddef_name,swig_arginfo_fielddef_name)
 SWIG_ZEND_NAMED_FE(fielddef_trimpadchar,_wrap_fielddef_trimPadChar,swig_arginfo_fielddef_trimpadchar)
 SWIG_ZEND_NAMED_FE(fielddef_usepadchar,_wrap_fielddef_usePadChar,swig_arginfo_fielddef_usepadchar)
 SWIG_ZEND_NAMED_FE(fielddef_setpadcharsettings,_wrap_fielddef_setPadCharSettings,swig_arginfo_fielddef_setpadcharsettings)
 SWIG_ZEND_NAMED_FE(new_fielddef,_wrap_new_fielddef,swig_arginfo_new_fielddef)
 SWIG_ZEND_NAMED_FE(new_tabledef,_wrap_new_tabledef,swig_arginfo_new_tabledef)
 SWIG_ZEND_NAMED_FE(tabledef_cleanup,_wrap_tabledef_cleanup,swig_arginfo_tabledef_cleanup)
 SWIG_ZEND_NAMED_FE(tabledef_filename,_wrap_tabledef_fileName,swig_arginfo_tabledef_filename)
 SWIG_ZEND_NAMED_FE(tabledef_tablename,_wrap_tabledef_tableName,swig_arginfo_tabledef_tablename)
 SWIG_ZEND_NAMED_FE(tabledef_setfilename,_wrap_tabledef_setFileName,swig_arginfo_tabledef_setfilename)
 SWIG_ZEND_NAMED_FE(tabledef_settablename,_wrap_tabledef_setTableName,swig_arginfo_tabledef_settablename)
 SWIG_ZEND_NAMED_FE(tabledef_tochar,_wrap_tabledef_toChar,swig_arginfo_tabledef_tochar)
 SWIG_ZEND_NAMED_FE(tabledef_id_set,_wrap_tabledef_id_set,swig_arginfo_tabledef_id_set)
 SWIG_ZEND_NAMED_FE(tabledef_id_get,_wrap_tabledef_id_get,swig_arginfo_tabledef_id_get)
 SWIG_ZEND_NAMED_FE(tabledef_pagesize_set,_wrap_tabledef_pageSize_set,swig_arginfo_tabledef_pagesize_set)
 SWIG_ZEND_NAMED_FE(tabledef_pagesize_get,_wrap_tabledef_pageSize_get,swig_arginfo_tabledef_pagesize_get)
 SWIG_ZEND_NAMED_FE(tabledef_varsize_set,_wrap_tabledef_varSize_set,swig_arginfo_tabledef_varsize_set)
 SWIG_ZEND_NAMED_FE(tabledef_varsize_get,_wrap_tabledef_varSize_get,swig_arginfo_tabledef_varsize_get)
 SWIG_ZEND_NAMED_FE(tabledef_prealloc_set,_wrap_tabledef_preAlloc_set,swig_arginfo_tabledef_prealloc_set)
 SWIG_ZEND_NAMED_FE(tabledef_prealloc_get,_wrap_tabledef_preAlloc_get,swig_arginfo_tabledef_prealloc_get)
 SWIG_ZEND_NAMED_FE(tabledef_fieldcount_set,_wrap_tabledef_fieldCount_set,swig_arginfo_tabledef_fieldcount_set)
 SWIG_ZEND_NAMED_FE(tabledef_fieldcount_get,_wrap_tabledef_fieldCount_get,swig_arginfo_tabledef_fieldcount_get)
 SWIG_ZEND_NAMED_FE(tabledef_keycount_set,_wrap_tabledef_keyCount_set,swig_arginfo_tabledef_keycount_set)
 SWIG_ZEND_NAMED_FE(tabledef_keycount_get,_wrap_tabledef_keyCount_get,swig_arginfo_tabledef_keycount_get)
 SWIG_ZEND_NAMED_FE(tabledef_version_set,_wrap_tabledef_version_set,swig_arginfo_tabledef_version_set)
 SWIG_ZEND_NAMED_FE(tabledef_version_get,_wrap_tabledef_version_get,swig_arginfo_tabledef_version_get)
 SWIG_ZEND_NAMED_FE(tabledef_charsetindex_set,_wrap_tabledef_charsetIndex_set,swig_arginfo_tabledef_charsetindex_set)
 SWIG_ZEND_NAMED_FE(tabledef_charsetindex_get,_wrap_tabledef_charsetIndex_get,swig_arginfo_tabledef_charsetindex_get)
 SWIG_ZEND_NAMED_FE(tabledef_flags_set,_wrap_tabledef_flags_set,swig_arginfo_tabledef_flags_set)
 SWIG_ZEND_NAMED_FE(tabledef_flags_get,_wrap_tabledef_flags_get,swig_arginfo_tabledef_flags_get)
 SWIG_ZEND_NAMED_FE(tabledef_primarykeynum_set,_wrap_tabledef_primaryKeyNum_set,swig_arginfo_tabledef_primarykeynum_set)
 SWIG_ZEND_NAMED_FE(tabledef_primarykeynum_get,_wrap_tabledef_primaryKeyNum_get,swig_arginfo_tabledef_primarykeynum_get)
 SWIG_ZEND_NAMED_FE(tabledef_maxrecordlen_set,_wrap_tabledef_maxRecordLen_set,swig_arginfo_tabledef_maxrecordlen_set)
 SWIG_ZEND_NAMED_FE(tabledef_maxrecordlen_get,_wrap_tabledef_maxRecordLen_get,swig_arginfo_tabledef_maxrecordlen_get)
 SWIG_ZEND_NAMED_FE(tabledef_ddfid_set,_wrap_tabledef_ddfid_set,swig_arginfo_tabledef_ddfid_set)
 SWIG_ZEND_NAMED_FE(tabledef_ddfid_get,_wrap_tabledef_ddfid_get,swig_arginfo_tabledef_ddfid_get)
 SWIG_ZEND_NAMED_FE(tabledef_fixedrecordlen_set,_wrap_tabledef_fixedRecordLen_set,swig_arginfo_tabledef_fixedrecordlen_set)
 SWIG_ZEND_NAMED_FE(tabledef_fixedrecordlen_get,_wrap_tabledef_fixedRecordLen_get,swig_arginfo_tabledef_fixedrecordlen_get)
 SWIG_ZEND_NAMED_FE(tabledef_schemacodepage_set,_wrap_tabledef_schemaCodePage_set,swig_arginfo_tabledef_schemacodepage_set)
 SWIG_ZEND_NAMED_FE(tabledef_schemacodepage_get,_wrap_tabledef_schemaCodePage_get,swig_arginfo_tabledef_schemacodepage_get)
 SWIG_ZEND_NAMED_FE(tabledef_parent_set,_wrap_tabledef_parent_set,swig_arginfo_tabledef_parent_set)
 SWIG_ZEND_NAMED_FE(tabledef_parent_get,_wrap_tabledef_parent_get,swig_arginfo_tabledef_parent_get)
 SWIG_ZEND_NAMED_FE(tabledef_fielddefs_set,_wrap_tabledef_fieldDefs_set,swig_arginfo_tabledef_fielddefs_set)
 SWIG_ZEND_NAMED_FE(tabledef_fielddefs_get,_wrap_tabledef_fieldDefs_get,swig_arginfo_tabledef_fielddefs_get)
 SWIG_ZEND_NAMED_FE(tabledef_keydefs_set,_wrap_tabledef_keyDefs_set,swig_arginfo_tabledef_keydefs_set)
 SWIG_ZEND_NAMED_FE(tabledef_keydefs_get,_wrap_tabledef_keyDefs_get,swig_arginfo_tabledef_keydefs_get)
 SWIG_ZEND_NAMED_FE(tabledef_fielddef,_wrap_tabledef_fieldDef,swig_arginfo_tabledef_fielddef)
 SWIG_ZEND_NAMED_FE(tabledef_keydef,_wrap_tabledef_keyDef,swig_arginfo_tabledef_keydef)
 SWIG_ZEND_NAMED_FE(btrversion_majorversion_set,_wrap_btrVersion_majorVersion_set,swig_arginfo_btrversion_majorversion_set)
 SWIG_ZEND_NAMED_FE(btrversion_majorversion_get,_wrap_btrVersion_majorVersion_get,swig_arginfo_btrversion_majorversion_get)
 SWIG_ZEND_NAMED_FE(btrversion_minorversion_set,_wrap_btrVersion_minorVersion_set,swig_arginfo_btrversion_minorversion_set)
 SWIG_ZEND_NAMED_FE(btrversion_minorversion_get,_wrap_btrVersion_minorVersion_get,swig_arginfo_btrversion_minorversion_get)
 SWIG_ZEND_NAMED_FE(btrversion_type_set,_wrap_btrVersion_type_set,swig_arginfo_btrversion_type_set)
 SWIG_ZEND_NAMED_FE(btrversion_type_get,_wrap_btrVersion_type_get,swig_arginfo_btrversion_type_get)
 SWIG_ZEND_NAMED_FE(btrversion_moduleversionshortstring,_wrap_btrVersion_moduleVersionShortString,swig_arginfo_btrversion_moduleversionshortstring)
 SWIG_ZEND_NAMED_FE(btrversion_moduletypestring,_wrap_btrVersion_moduleTypeString,swig_arginfo_btrversion_moduletypestring)
 SWIG_ZEND_NAMED_FE(new_btrversion,_wrap_new_btrVersion,swig_arginfo_new_btrversion)
 SWIG_ZEND_NAMED_FE(btrversions_versions_set,_wrap_btrVersions_versions_set,swig_arginfo_btrversions_versions_set)
 SWIG_ZEND_NAMED_FE(btrversions_versions_get,_wrap_btrVersions_versions_get,swig_arginfo_btrversions_versions_get)
 SWIG_ZEND_NAMED_FE(btrversions_version,_wrap_btrVersions_version,swig_arginfo_btrversions_version)
 SWIG_ZEND_NAMED_FE(new_btrversions,_wrap_new_btrVersions,swig_arginfo_new_btrversions)
 SWIG_ZEND_NAMED_FE(getfilterlogictypecode,_wrap_getFilterLogicTypeCode,swig_arginfo_getfilterlogictypecode)
 SWIG_ZEND_NAMED_FE(nstable_nsdb,_wrap_nstable_nsdb,swig_arginfo_nstable_nsdb)
 SWIG_ZEND_NAMED_FE(nstable_tableid,_wrap_nstable_tableid,swig_arginfo_nstable_tableid)
 SWIG_ZEND_NAMED_FE(nstable_settableid,_wrap_nstable_setTableid,swig_arginfo_nstable_settableid)
 SWIG_ZEND_NAMED_FE(nstable_isopen,_wrap_nstable_isOpen,swig_arginfo_nstable_isopen)
 SWIG_ZEND_NAMED_FE(nstable_isusetransactd,_wrap_nstable_isUseTransactd,swig_arginfo_nstable_isusetransactd)
 SWIG_ZEND_NAMED_FE(nstable_setaccessrights,_wrap_nstable_setAccessRights,swig_arginfo_nstable_setaccessrights)
 SWIG_ZEND_NAMED_FE(nstable_datalen,_wrap_nstable_datalen,swig_arginfo_nstable_datalen)
 SWIG_ZEND_NAMED_FE(nstable_stat,_wrap_nstable_stat,swig_arginfo_nstable_stat)
 SWIG_ZEND_NAMED_FE(nstable_keynum,_wrap_nstable_keyNum,swig_arginfo_nstable_keynum)
 SWIG_ZEND_NAMED_FE(nstable_setkeynum,_wrap_nstable_setKeyNum,swig_arginfo_nstable_setkeynum)
 SWIG_ZEND_NAMED_FE(nstable_canread,_wrap_nstable_canRead,swig_arginfo_nstable_canread)
 SWIG_ZEND_NAMED_FE(nstable_canwrite,_wrap_nstable_canWrite,swig_arginfo_nstable_canwrite)
 SWIG_ZEND_NAMED_FE(nstable_caninsert,_wrap_nstable_canInsert,swig_arginfo_nstable_caninsert)
 SWIG_ZEND_NAMED_FE(nstable_candelete,_wrap_nstable_canDelete,swig_arginfo_nstable_candelete)
 SWIG_ZEND_NAMED_FE(nstable_getwriteimagelen,_wrap_nstable_getWriteImageLen,swig_arginfo_nstable_getwriteimagelen)
 SWIG_ZEND_NAMED_FE(nstable_close,_wrap_nstable_close,swig_arginfo_nstable_close)
 SWIG_ZEND_NAMED_FE(nstable_update,_wrap_nstable_update,swig_arginfo_nstable_update)
 SWIG_ZEND_NAMED_FE(nstable_del,_wrap_nstable_del,swig_arginfo_nstable_del)
 SWIG_ZEND_NAMED_FE(nstable_insert,_wrap_nstable_insert,swig_arginfo_nstable_insert)
 SWIG_ZEND_NAMED_FE(nstable_createindex,_wrap_nstable_createIndex,swig_arginfo_nstable_createindex)
 SWIG_ZEND_NAMED_FE(nstable_dropindex,_wrap_nstable_dropIndex,swig_arginfo_nstable_dropindex)
 SWIG_ZEND_NAMED_FE(nstable_recordcount,_wrap_nstable_recordCount,swig_arginfo_nstable_recordcount)
 SWIG_ZEND_NAMED_FE(nstable_tdaplasterr,_wrap_nstable_tdapLastErr,swig_arginfo_nstable_tdaplasterr)
 SWIG_ZEND_NAMED_FE(nstable_beginbulkinsert,_wrap_nstable_beginBulkInsert,swig_arginfo_nstable_beginbulkinsert)
 SWIG_ZEND_NAMED_FE(nstable_abortbulkinsert,_wrap_nstable_abortBulkInsert,swig_arginfo_nstable_abortbulkinsert)
 SWIG_ZEND_NAMED_FE(nstable_commitbulkinsert,_wrap_nstable_commitBulkInsert,swig_arginfo_nstable_commitbulkinsert)
 SWIG_ZEND_NAMED_FE(nstable_seekfirst,_wrap_nstable_seekFirst,swig_arginfo_nstable_seekfirst)
 SWIG_ZEND_NAMED_FE(nstable_seeklast,_wrap_nstable_seekLast,swig_arginfo_nstable_seeklast)
 SWIG_ZEND_NAMED_FE(nstable_seekprev,_wrap_nstable_seekPrev,swig_arginfo_nstable_seekprev)
 SWIG_ZEND_NAMED_FE(nstable_seeknext,_wrap_nstable_seekNext,swig_arginfo_nstable_seeknext)
 SWIG_ZEND_NAMED_FE(nstable_seek,_wrap_nstable_seek,swig_arginfo_nstable_seek)
 SWIG_ZEND_NAMED_FE(nstable_seekgreater,_wrap_nstable_seekGreater,swig_arginfo_nstable_seekgreater)
 SWIG_ZEND_NAMED_FE(nstable_seeklessthan,_wrap_nstable_seekLessThan,swig_arginfo_nstable_seeklessthan)
 SWIG_ZEND_NAMED_FE(nstable_stepfirst,_wrap_nstable_stepFirst,swig_arginfo_nstable_stepfirst)
 SWIG_ZEND_NAMED_FE(nstable_steplast,_wrap_nstable_stepLast,swig_arginfo_nstable_steplast)
 SWIG_ZEND_NAMED_FE(nstable_stepprev,_wrap_nstable_stepPrev,swig_arginfo_nstable_stepprev)
 SWIG_ZEND_NAMED_FE(nstable_stepnext,_wrap_nstable_stepNext,swig_arginfo_nstable_stepnext)
 SWIG_ZEND_NAMED_FE(nstable_bookmarklen, _wrap_nstable_bookmarkLen, swig_arginfo_nstable_bookmarklen)
 SWIG_ZEND_NAMED_FE(nstable_bookmark,_wrap_nstable_bookmark,swig_arginfo_nstable_bookmark)
 SWIG_ZEND_NAMED_FE(nstable_seekbybookmark,_wrap_nstable_seekByBookmark,swig_arginfo_nstable_seekbybookmark)
 SWIG_ZEND_NAMED_FE(nstable_getpercentage,_wrap_nstable_getPercentage,swig_arginfo_nstable_getpercentage)
 SWIG_ZEND_NAMED_FE(nstable_seekbypercentage,_wrap_nstable_seekByPercentage,swig_arginfo_nstable_seekbypercentage)
 SWIG_ZEND_NAMED_FE(nstable_setownername,_wrap_nstable_setOwnerName,swig_arginfo_nstable_setownername)
 SWIG_ZEND_NAMED_FE(nstable_clearownername,_wrap_nstable_clearOwnerName,swig_arginfo_nstable_clearownername)
 SWIG_ZEND_NAMED_FE(nstable_recordlength,_wrap_nstable_recordLength,swig_arginfo_nstable_recordlength)
 SWIG_ZEND_NAMED_FE(nstable_stats,_wrap_nstable_stats,swig_arginfo_nstable_stats)
 SWIG_ZEND_NAMED_FE(nstable_unlock,_wrap_nstable_unlock,swig_arginfo_nstable_unlock)
 SWIG_ZEND_NAMED_FE(nstable_mode,_wrap_nstable_mode,swig_arginfo_nstable_mode)
 SWIG_ZEND_NAMED_FE(nstable_getfilename,_wrap_nstable_getFileName,swig_arginfo_nstable_getfilename)
 SWIG_ZEND_NAMED_FE(nstable_tdaperr,_wrap_nstable_tdapErr,swig_arginfo_nstable_tdaperr)
 SWIG_ZEND_NAMED_FE(nstable_getdiruri,_wrap_nstable_getDirURI,swig_arginfo_nstable_getdiruri)
 SWIG_ZEND_NAMED_FE(nstable_existsfile,_wrap_nstable_existsFile,swig_arginfo_nstable_existsfile)
 SWIG_ZEND_NAMED_FE(dbdef_tablecount,_wrap_dbdef_tableCount,swig_arginfo_dbdef_tablecount)
 SWIG_ZEND_NAMED_FE(dbdef_openmode,_wrap_dbdef_openMode,swig_arginfo_dbdef_openmode)
 SWIG_ZEND_NAMED_FE(dbdef_tabledefs,_wrap_dbdef_tableDefs,swig_arginfo_dbdef_tabledefs)
 SWIG_ZEND_NAMED_FE(dbdef_tabledefptr,_wrap_dbdef_tableDefPtr,swig_arginfo_dbdef_tabledefptr)
 SWIG_ZEND_NAMED_FE(dbdef_setversion,_wrap_dbdef_setVersion,swig_arginfo_dbdef_setversion)
 SWIG_ZEND_NAMED_FE(dbdef_version,_wrap_dbdef_version,swig_arginfo_dbdef_version)
 SWIG_ZEND_NAMED_FE(dbdef_stat,_wrap_dbdef_stat,swig_arginfo_dbdef_stat)
 SWIG_ZEND_NAMED_FE(dbdef_validatetabledef, _wrap_dbdef_validateTableDef, swig_arginfo_dbdef_validatetabledef)
 SWIG_ZEND_NAMED_FE(dbdef_updatetabledef,_wrap_dbdef_updateTableDef,swig_arginfo_dbdef_updatetabledef)
 SWIG_ZEND_NAMED_FE(dbdef_insertfield,_wrap_dbdef_insertField,swig_arginfo_dbdef_insertfield)
 SWIG_ZEND_NAMED_FE(dbdef_deletefield,_wrap_dbdef_deleteField,swig_arginfo_dbdef_deletefield)
 SWIG_ZEND_NAMED_FE(dbdef_insertkey,_wrap_dbdef_insertKey,swig_arginfo_dbdef_insertkey)
 SWIG_ZEND_NAMED_FE(dbdef_deletekey,_wrap_dbdef_deleteKey,swig_arginfo_dbdef_deletekey)
 SWIG_ZEND_NAMED_FE(dbdef_inserttable,_wrap_dbdef_insertTable,swig_arginfo_dbdef_inserttable)
 SWIG_ZEND_NAMED_FE(dbdef_deletetable,_wrap_dbdef_deleteTable,swig_arginfo_dbdef_deletetable)
 SWIG_ZEND_NAMED_FE(dbdef_renumbertable,_wrap_dbdef_renumberTable,swig_arginfo_dbdef_renumbertable)
 SWIG_ZEND_NAMED_FE(dbdef_tablenumbyname,_wrap_dbdef_tableNumByName,swig_arginfo_dbdef_tablenumbyname)
 SWIG_ZEND_NAMED_FE(dbdef_getrecordlen,_wrap_dbdef_getRecordLen,swig_arginfo_dbdef_getrecordlen)
 SWIG_ZEND_NAMED_FE(dbdef_findkeynumbyfieldnum,_wrap_dbdef_findKeynumByFieldNum,swig_arginfo_dbdef_findkeynumbyfieldnum)
 SWIG_ZEND_NAMED_FE(dbdef_fieldnumbyname,_wrap_dbdef_fieldNumByName,swig_arginfo_dbdef_fieldnumbyname)
 SWIG_ZEND_NAMED_FE(dbdef_fieldvalidlength,_wrap_dbdef_fieldValidLength,swig_arginfo_dbdef_fieldvalidlength)
 SWIG_ZEND_NAMED_FE(dbdef_tdaperr,_wrap_dbdef_tdapErr,swig_arginfo_dbdef_tdaperr)
 SWIG_ZEND_NAMED_FE(dbdef_reopen,_wrap_dbdef_reopen,swig_arginfo_dbdef_reopen)
 SWIG_ZEND_NAMED_FE(dbdef_mode,_wrap_dbdef_mode,swig_arginfo_dbdef_mode)
 SWIG_ZEND_NAMED_FE(table_tabledef,_wrap_table_tableDef,swig_arginfo_table_tabledef)
 SWIG_ZEND_NAMED_FE(table_tabledefptr,_wrap_table_tableDefPtr,swig_arginfo_table_tabledefptr)
 SWIG_ZEND_NAMED_FE(table_valiableformattype,_wrap_table_valiableFormatType,swig_arginfo_table_valiableformattype)
 SWIG_ZEND_NAMED_FE(table_blobfieldused,_wrap_table_blobFieldUsed,swig_arginfo_table_blobfieldused)
 SWIG_ZEND_NAMED_FE(table_logicaltostring,_wrap_table_logicalToString,swig_arginfo_table_logicaltostring)
 SWIG_ZEND_NAMED_FE(table_setlogicaltostring,_wrap_table_setLogicalToString,swig_arginfo_table_setlogicaltostring)
 SWIG_ZEND_NAMED_FE(table_optionaldata,_wrap_table_optionalData,swig_arginfo_table_optionaldata)
 SWIG_ZEND_NAMED_FE(table_setoptionaldata,_wrap_table_setOptionalData,swig_arginfo_table_setoptionaldata)
 SWIG_ZEND_NAMED_FE(table_mydatetimevaluebybtrv,_wrap_table_myDateTimeValueByBtrv,swig_arginfo_table_mydatetimevaluebybtrv)
 SWIG_ZEND_NAMED_FE(table_bookmarkscount,_wrap_table_bookmarksCount,swig_arginfo_table_bookmarkscount)
 SWIG_ZEND_NAMED_FE(table_movebookmarks,_wrap_table_moveBookmarks,swig_arginfo_table_movebookmarks)
 SWIG_ZEND_NAMED_FE(table_bookmarks, _wrap_table_bookmarks, swig_arginfo_table_bookmarks)
 SWIG_ZEND_NAMED_FE(table_clearbuffer, _wrap_table_clearBuffer, swig_arginfo_table_clearbuffer)
 SWIG_ZEND_NAMED_FE(table_getrecordhash,_wrap_table_getRecordHash,swig_arginfo_table_getrecordhash)
 SWIG_ZEND_NAMED_FE(table_smartupdate,_wrap_table_smartUpdate,swig_arginfo_table_smartupdate)
 SWIG_ZEND_NAMED_FE(table_find,_wrap_table_find,swig_arginfo_table_find)
 SWIG_ZEND_NAMED_FE(table_findfirst,_wrap_table_findFirst,swig_arginfo_table_findfirst)
 SWIG_ZEND_NAMED_FE(table_findlast,_wrap_table_findLast,swig_arginfo_table_findlast)
 SWIG_ZEND_NAMED_FE(table_findnext,_wrap_table_findNext,swig_arginfo_table_findnext)
 SWIG_ZEND_NAMED_FE(table_findprev,_wrap_table_findPrev,swig_arginfo_table_findprev)
 SWIG_ZEND_NAMED_FE(table_statreasonoffind,_wrap_table_statReasonOfFind,swig_arginfo_table_statreasonoffind)
 SWIG_ZEND_NAMED_FE(table_lastfinddirection,_wrap_table_lastFindDirection,swig_arginfo_table_lastfinddirection)
 SWIG_ZEND_NAMED_FE(table_bookmarkfindcurrent,_wrap_table_bookmarkFindCurrent,swig_arginfo_table_bookmarkfindcurrent)
 SWIG_ZEND_NAMED_FE(table_setfilter,_wrap_table_setFilter,swig_arginfo_table_setfilter)
 SWIG_ZEND_NAMED_FE(table_fieldnumbyname,_wrap_table_fieldNumByName,swig_arginfo_table_fieldnumbyname)
 SWIG_ZEND_NAMED_FE(table_getfvbyt,_wrap_table_getFVbyt,swig_arginfo_table_getfvbyt)
 SWIG_ZEND_NAMED_FE(table_getfvsht,_wrap_table_getFVsht,swig_arginfo_table_getfvsht)
 SWIG_ZEND_NAMED_FE(table_getfvint,_wrap_table_getFVint,swig_arginfo_table_getfvint)
 SWIG_ZEND_NAMED_FE(table_getfvlng,_wrap_table_getFVlng,swig_arginfo_table_getfvlng)
 SWIG_ZEND_NAMED_FE(table_getfv64,_wrap_table_getFV64,swig_arginfo_table_getfv64)
 SWIG_ZEND_NAMED_FE(table_getfvflt,_wrap_table_getFVflt,swig_arginfo_table_getfvflt)
 SWIG_ZEND_NAMED_FE(table_getfvdbl,_wrap_table_getFVdbl,swig_arginfo_table_getfvdbl)
 SWIG_ZEND_NAMED_FE(table_getfvstr,_wrap_table_getFVstr,swig_arginfo_table_getfvstr)
 SWIG_ZEND_NAMED_FE(table_fields,_wrap_table_fields,swig_arginfo_table_fields)
 SWIG_ZEND_NAMED_FE(table_setfv,_wrap_table_setFV,swig_arginfo_table_setfv)
 SWIG_ZEND_NAMED_FE(table_getfvbin,_wrap_table_getFVbin,swig_arginfo_table_getfvbin)
 SWIG_ZEND_NAMED_FE(table_keyvaluedescription,_wrap_table_keyValueDescription,swig_arginfo_table_keyvaluedescription)
 SWIG_ZEND_NAMED_FE(table_prepare,_wrap_table_prepare,swig_arginfo_table_prepare)
 SWIG_ZEND_NAMED_FE(table_setquery,_wrap_table_setQuery,swig_arginfo_table_setquery)
 SWIG_ZEND_NAMED_FE(table_setprepare,_wrap_table_setPrepare,swig_arginfo_table_setprepare)
 SWIG_ZEND_NAMED_FE(table_release,_wrap_table_release,swig_arginfo_table_release)
 SWIG_ZEND_NAMED_FE(querybase_clearseekkeyvalues,_wrap_queryBase_clearSeekKeyValues,swig_arginfo_querybase_clearseekkeyvalues)
 SWIG_ZEND_NAMED_FE(querybase_clearselectfields,_wrap_queryBase_clearSelectFields,swig_arginfo_querybase_clearselectfields)
 SWIG_ZEND_NAMED_FE(querybase_addseekkeyvalue,_wrap_queryBase_addSeekKeyValue,swig_arginfo_querybase_addseekkeyvalue)
 SWIG_ZEND_NAMED_FE(querybase_reserveseekkeyvaluesize,_wrap_queryBase_reserveSeekKeyValueSize,swig_arginfo_querybase_reserveseekkeyvaluesize)
 SWIG_ZEND_NAMED_FE(querybase_querystring,_wrap_queryBase_queryString,swig_arginfo_querybase_querystring)
 SWIG_ZEND_NAMED_FE(querybase_reject,_wrap_queryBase_reject,swig_arginfo_querybase_reject)
 SWIG_ZEND_NAMED_FE(querybase_limit,_wrap_queryBase_limit,swig_arginfo_querybase_limit)
 SWIG_ZEND_NAMED_FE(querybase_direction,_wrap_queryBase_direction,swig_arginfo_querybase_direction)
 SWIG_ZEND_NAMED_FE(querybase_all,_wrap_queryBase_all,swig_arginfo_querybase_all)
 SWIG_ZEND_NAMED_FE(querybase_optimize,_wrap_queryBase_optimize,swig_arginfo_querybase_optimize)
 SWIG_ZEND_NAMED_FE(querybase_bookmarkalso,_wrap_queryBase_bookmarkAlso,swig_arginfo_querybase_bookmarkalso)
 SWIG_ZEND_NAMED_FE(querybase_tostring,_wrap_queryBase_toString,swig_arginfo_querybase_tostring)
 SWIG_ZEND_NAMED_FE(querybase_getdirection,_wrap_queryBase_getDirection,swig_arginfo_querybase_getdirection)
 SWIG_ZEND_NAMED_FE(querybase_getreject,_wrap_queryBase_getReject,swig_arginfo_querybase_getreject)
 SWIG_ZEND_NAMED_FE(querybase_getlimit,_wrap_queryBase_getLimit,swig_arginfo_querybase_getlimit)
 SWIG_ZEND_NAMED_FE(querybase_isall,_wrap_queryBase_isAll,swig_arginfo_querybase_isall)
 SWIG_ZEND_NAMED_FE(querybase_getjoinkeysize,_wrap_queryBase_getJoinKeySize,swig_arginfo_querybase_getjoinkeysize)
 SWIG_ZEND_NAMED_FE(querybase_getoptimize,_wrap_queryBase_getOptimize,swig_arginfo_querybase_getoptimize)
 SWIG_ZEND_NAMED_FE(querybase_isbookmarkalso,_wrap_queryBase_isBookmarkAlso,swig_arginfo_querybase_isbookmarkalso)
 SWIG_ZEND_NAMED_FE(querybase_seekbybookmarks, _wrap_queryBase_seekByBookmarks, swig_arginfo_querybase_seekbybookmarks)
 SWIG_ZEND_NAMED_FE(querybase_isseekbybookmarks, _wrap_queryBase_isSeekByBookmarks, swig_arginfo_querybase_isseekbybookmarks)
 SWIG_ZEND_NAMED_FE(querybase_selectcount, _wrap_queryBase_selectCount, swig_arginfo_querybase_selectcount)
 SWIG_ZEND_NAMED_FE(querybase_getselect,_wrap_queryBase_getSelect,swig_arginfo_querybase_getselect)
 SWIG_ZEND_NAMED_FE(querybase_wheretokens,_wrap_queryBase_whereTokens,swig_arginfo_querybase_wheretokens)
 SWIG_ZEND_NAMED_FE(querybase_getwheretoken,_wrap_queryBase_getWhereToken,swig_arginfo_querybase_getwheretoken)
 SWIG_ZEND_NAMED_FE(querybase_setwheretoken,_wrap_queryBase_setWhereToken,swig_arginfo_querybase_setwheretoken)
 SWIG_ZEND_NAMED_FE(querybase_reversealiasname,_wrap_queryBase_reverseAliasName,swig_arginfo_querybase_reversealiasname)
 SWIG_ZEND_NAMED_FE(querybase_stopatlimit,_wrap_queryBase_stopAtLimit,swig_arginfo_querybase_stopatlimit)
 SWIG_ZEND_NAMED_FE(querybase_isstopatlimit,_wrap_queryBase_isStopAtLimit,swig_arginfo_querybase_isstopatlimit)
 SWIG_ZEND_NAMED_FE(query_reset,_wrap_query_reset,swig_arginfo_query_reset)
 SWIG_ZEND_NAMED_FE(query_select,_wrap_query_select,swig_arginfo_query_select)
 SWIG_ZEND_NAMED_FE(new_query,_wrap_new_query,swig_arginfo_new_query)
 SWIG_ZEND_NAMED_FE(query_where,_wrap_query_where,swig_arginfo_query_where)
 SWIG_ZEND_NAMED_FE(query_and_,_wrap_query_and_,swig_arginfo_query_and_)
 SWIG_ZEND_NAMED_FE(query_or_,_wrap_query_or_,swig_arginfo_query_or_)
 SWIG_ZEND_NAMED_FE(query_in,_wrap_query_in,swig_arginfo_query_in)
 SWIG_ZEND_NAMED_FE(new_nsdatabase,_wrap_new_nsdatabase,swig_arginfo_new_nsdatabase)
 SWIG_ZEND_NAMED_FE(nsdatabase_enabletrn,_wrap_nsdatabase_enableTrn,swig_arginfo_nsdatabase_enabletrn)
 SWIG_ZEND_NAMED_FE(nsdatabase_stat,_wrap_nsdatabase_stat,swig_arginfo_nsdatabase_stat)
 SWIG_ZEND_NAMED_FE(nsdatabase_clientid,_wrap_nsdatabase_clientID,swig_arginfo_nsdatabase_clientid)
 SWIG_ZEND_NAMED_FE(nsdatabase_opentablecount,_wrap_nsdatabase_openTableCount,swig_arginfo_nsdatabase_opentablecount)
 SWIG_ZEND_NAMED_FE(nsdatabase_uri,_wrap_nsdatabase_uri,swig_arginfo_nsdatabase_uri)
 SWIG_ZEND_NAMED_FE(nsdatabase_urimode,_wrap_nsdatabase_uriMode,swig_arginfo_nsdatabase_urimode)
 SWIG_ZEND_NAMED_FE(nsdatabase_lockwaitcount,_wrap_nsdatabase_lockWaitCount,swig_arginfo_nsdatabase_lockwaitcount)
 SWIG_ZEND_NAMED_FE(nsdatabase_lockwaittime,_wrap_nsdatabase_lockWaitTime,swig_arginfo_nsdatabase_lockwaittime)
 SWIG_ZEND_NAMED_FE(nsdatabase_setlockwaitcount,_wrap_nsdatabase_setLockWaitCount,swig_arginfo_nsdatabase_setlockwaitcount)
 SWIG_ZEND_NAMED_FE(nsdatabase_setlockwaittime,_wrap_nsdatabase_setLockWaitTime,swig_arginfo_nsdatabase_setlockwaittime)
 SWIG_ZEND_NAMED_FE(nsdatabase_setlocalsharing,_wrap_nsdatabase_setLocalSharing,swig_arginfo_nsdatabase_setlocalsharing)
 SWIG_ZEND_NAMED_FE(nsdatabase_droptable,_wrap_nsdatabase_dropTable,swig_arginfo_nsdatabase_droptable)
 SWIG_ZEND_NAMED_FE(nsdatabase_rename,_wrap_nsdatabase_rename,swig_arginfo_nsdatabase_rename)
 SWIG_ZEND_NAMED_FE(nsdatabase_swaptablename,_wrap_nsdatabase_swapTablename,swig_arginfo_nsdatabase_swaptablename)
 SWIG_ZEND_NAMED_FE(nsdatabase_begintrn,_wrap_nsdatabase_beginTrn,swig_arginfo_nsdatabase_begintrn)
 SWIG_ZEND_NAMED_FE(nsdatabase_endtrn,_wrap_nsdatabase_endTrn,swig_arginfo_nsdatabase_endtrn)
 SWIG_ZEND_NAMED_FE(nsdatabase_aborttrn,_wrap_nsdatabase_abortTrn,swig_arginfo_nsdatabase_aborttrn)
 SWIG_ZEND_NAMED_FE(nsdatabase_beginsnapshot,_wrap_nsdatabase_beginSnapshot,swig_arginfo_nsdatabase_beginsnapshot)
 SWIG_ZEND_NAMED_FE(nsdatabase_endsnapshot,_wrap_nsdatabase_endSnapshot,swig_arginfo_nsdatabase_endsnapshot)
 SWIG_ZEND_NAMED_FE(nsdatabase_trxIsolationServer,_wrap_nsdatabase_trxIsolationServer,swig_arginfo_nsdatabase_trxIsolationServer)
 SWIG_ZEND_NAMED_FE(nsdatabase_trxLockWaitTimeoutServer,_wrap_nsdatabase_trxLockWaitTimeoutServer,swig_arginfo_nsdatabase_trxLockWaitTimeoutServer)
 SWIG_ZEND_NAMED_FE(nsdatabase_tdaperr,_wrap_nsdatabase_tdapErr,swig_arginfo_nsdatabase_tdaperr)
 SWIG_ZEND_NAMED_FE(nsdatabase_uselongfilename,_wrap_nsdatabase_useLongFilename,swig_arginfo_nsdatabase_uselongfilename)
 SWIG_ZEND_NAMED_FE(nsdatabase_setuselongfilename,_wrap_nsdatabase_setUseLongFilename,swig_arginfo_nsdatabase_setuselongfilename)
 SWIG_ZEND_NAMED_FE(nsdatabase_setusetransactd,_wrap_nsdatabase_setUseTransactd,swig_arginfo_nsdatabase_setusetransactd)
 SWIG_ZEND_NAMED_FE(nsdatabase_istransactduri,_wrap_nsdatabase_isTransactdUri,swig_arginfo_nsdatabase_istransactduri)
 SWIG_ZEND_NAMED_FE(nsdatabase_isusetransactd,_wrap_nsdatabase_isUseTransactd,swig_arginfo_nsdatabase_isusetransactd)
 SWIG_ZEND_NAMED_FE(nsdatabase_readdatabasedirectory,_wrap_nsdatabase_readDatabaseDirectory,swig_arginfo_nsdatabase_readdatabasedirectory)
 SWIG_ZEND_NAMED_FE(nsdatabase_connect,_wrap_nsdatabase_connect,swig_arginfo_nsdatabase_connect)
 SWIG_ZEND_NAMED_FE(nsdatabase_disconnect,_wrap_nsdatabase_disconnect,swig_arginfo_nsdatabase_disconnect)
 SWIG_ZEND_NAMED_FE(nsdatabase_disconnectForReconnectTest,_wrap_nsdatabase_disconnectForReconnectTest,swig_arginfo_nsdatabase_disconnectForReconnectTest)
 SWIG_ZEND_NAMED_FE(nsdatabase_reconnect,_wrap_nsdatabase_reconnect,swig_arginfo_nsdatabase_reconnect)
 SWIG_ZEND_NAMED_FE(nsdatabase_trnsactionflushwaitstatus,_wrap_nsdatabase_trnsactionFlushWaitStatus,swig_arginfo_nsdatabase_trnsactionflushwaitstatus)
 SWIG_ZEND_NAMED_FE(nsdatabase_setexeccodepage,_wrap_nsdatabase_setExecCodePage,swig_arginfo_nsdatabase_setexeccodepage)
 SWIG_ZEND_NAMED_FE(nsdatabase_execcodepage,_wrap_nsdatabase_execCodePage,swig_arginfo_nsdatabase_execcodepage)
 SWIG_ZEND_NAMED_FE(nsdatabase_setchecktableptr,_wrap_nsdatabase_setCheckTablePtr,swig_arginfo_nsdatabase_setchecktableptr)
 SWIG_ZEND_NAMED_FE(database_dbdef,_wrap_database_dbDef,swig_arginfo_database_dbdef)
 SWIG_ZEND_NAMED_FE(database_rootdir,_wrap_database_rootDir,swig_arginfo_database_rootdir)
 SWIG_ZEND_NAMED_FE(database_setrootdir,_wrap_database_setRootDir,swig_arginfo_database_setrootdir)
 SWIG_ZEND_NAMED_FE(database_optionaldata,_wrap_database_optionalData,swig_arginfo_database_optionaldata)
 SWIG_ZEND_NAMED_FE(database_setoptionaldata,_wrap_database_setOptionalData,swig_arginfo_database_setoptionaldata)
 SWIG_ZEND_NAMED_FE(database_tablereadonly,_wrap_database_tableReadOnly,swig_arginfo_database_tablereadonly)
 SWIG_ZEND_NAMED_FE(database_settablereadonly,_wrap_database_setTableReadOnly,swig_arginfo_database_settablereadonly)
 SWIG_ZEND_NAMED_FE(database_open,_wrap_database_open,swig_arginfo_database_open)
 SWIG_ZEND_NAMED_FE(database___clone,_wrap_database___clone,swig_arginfo_database___clone)
 SWIG_ZEND_NAMED_FE(database_create,_wrap_database_create,swig_arginfo_database_create)
 SWIG_ZEND_NAMED_FE(database_drop,_wrap_database_drop,swig_arginfo_database_drop)
 SWIG_ZEND_NAMED_FE(database_droptable,_wrap_database_dropTable,swig_arginfo_database_droptable)
 SWIG_ZEND_NAMED_FE(database_close,_wrap_database_close,swig_arginfo_database_close)
 SWIG_ZEND_NAMED_FE(database_aclReload,_wrap_database_aclReload,swig_arginfo_database_aclReload)
 SWIG_ZEND_NAMED_FE(database_continuous,_wrap_database_continuous,swig_arginfo_database_continuous)
 SWIG_ZEND_NAMED_FE(database_assignschemadata,_wrap_database_assignSchemaData,swig_arginfo_database_assignschemadata)
 SWIG_ZEND_NAMED_FE(database_copytabledata,_wrap_database_copyTableData,swig_arginfo_database_copytabledata)
 SWIG_ZEND_NAMED_FE(database_converttable,_wrap_database_convertTable,swig_arginfo_database_converttable)
 SWIG_ZEND_NAMED_FE(database_existstablefile,_wrap_database_existsTableFile,swig_arginfo_database_existstablefile)
 SWIG_ZEND_NAMED_FE(database_gettableuri,_wrap_database_getTableUri,swig_arginfo_database_gettableuri)
 SWIG_ZEND_NAMED_FE(database_getbtrversion,_wrap_database_getBtrVersion,swig_arginfo_database_getbtrversion)
 SWIG_ZEND_NAMED_FE(database_isopened,_wrap_database_isOpened,swig_arginfo_database_isopened)
 SWIG_ZEND_NAMED_FE(database_mode,_wrap_database_mode,swig_arginfo_database_mode)
 SWIG_ZEND_NAMED_FE(new_database,_wrap_new_database,swig_arginfo_new_database)
 SWIG_ZEND_NAMED_FE(database_opentable,_wrap_database_openTable,swig_arginfo_database_opentable)
 SWIG_ZEND_NAMED_FE(benchmark_start,_wrap_benchmark_start,swig_arginfo_benchmark_start)
 SWIG_ZEND_NAMED_FE(benchmark_stop,_wrap_benchmark_stop,swig_arginfo_benchmark_stop)
 SWIG_ZEND_NAMED_FE(benchmark_showtimes,_wrap_benchmark_showTimes,swig_arginfo_benchmark_showtimes)
 SWIG_ZEND_NAMED_FE(benchmark_showtimesec,_wrap_benchmark_showTimeSec,swig_arginfo_benchmark_showtimesec)
 SWIG_ZEND_NAMED_FE(new_benchmark,_wrap_new_benchmark,swig_arginfo_new_benchmark)
 SWIG_ZEND_NAMED_FE(charsize,_wrap_charsize,swig_arginfo_charsize)
 SWIG_ZEND_NAMED_FE(charsetname,_wrap_charsetName,swig_arginfo_charsetname)
 SWIG_ZEND_NAMED_FE(charsetindex,_wrap_charsetIndex,swig_arginfo_charsetindex)
 SWIG_ZEND_NAMED_FE(codepage,_wrap_codePage,swig_arginfo_codepage)
 SWIG_ZEND_NAMED_FE(btrdate_dd_set,_wrap_btrDate_dd_set,swig_arginfo_btrdate_dd_set)
 SWIG_ZEND_NAMED_FE(btrdate_dd_get,_wrap_btrDate_dd_get,swig_arginfo_btrdate_dd_get)
 SWIG_ZEND_NAMED_FE(btrdate_mm_set,_wrap_btrDate_mm_set,swig_arginfo_btrdate_mm_set)
 SWIG_ZEND_NAMED_FE(btrdate_mm_get,_wrap_btrDate_mm_get,swig_arginfo_btrdate_mm_get)
 SWIG_ZEND_NAMED_FE(btrdate_yy_set,_wrap_btrDate_yy_set,swig_arginfo_btrdate_yy_set)
 SWIG_ZEND_NAMED_FE(btrdate_yy_get,_wrap_btrDate_yy_get,swig_arginfo_btrdate_yy_get)
 SWIG_ZEND_NAMED_FE(btrdate_i_set,_wrap_btrDate_i_set,swig_arginfo_btrdate_i_set)
 SWIG_ZEND_NAMED_FE(btrdate_i_get,_wrap_btrDate_i_get,swig_arginfo_btrdate_i_get)
 SWIG_ZEND_NAMED_FE(new_btrdate,_wrap_new_btrDate,swig_arginfo_new_btrdate)
 SWIG_ZEND_NAMED_FE(btrtime_uu_set,_wrap_btrTime_uu_set,swig_arginfo_btrtime_uu_set)
 SWIG_ZEND_NAMED_FE(btrtime_uu_get,_wrap_btrTime_uu_get,swig_arginfo_btrtime_uu_get)
 SWIG_ZEND_NAMED_FE(btrtime_ss_set,_wrap_btrTime_ss_set,swig_arginfo_btrtime_ss_set)
 SWIG_ZEND_NAMED_FE(btrtime_ss_get,_wrap_btrTime_ss_get,swig_arginfo_btrtime_ss_get)
 SWIG_ZEND_NAMED_FE(btrtime_nn_set,_wrap_btrTime_nn_set,swig_arginfo_btrtime_nn_set)
 SWIG_ZEND_NAMED_FE(btrtime_nn_get,_wrap_btrTime_nn_get,swig_arginfo_btrtime_nn_get)
 SWIG_ZEND_NAMED_FE(btrtime_hh_set,_wrap_btrTime_hh_set,swig_arginfo_btrtime_hh_set)
 SWIG_ZEND_NAMED_FE(btrtime_hh_get,_wrap_btrTime_hh_get,swig_arginfo_btrtime_hh_get)
 SWIG_ZEND_NAMED_FE(btrtime_i_set,_wrap_btrTime_i_set,swig_arginfo_btrtime_i_set)
 SWIG_ZEND_NAMED_FE(btrtime_i_get,_wrap_btrTime_i_get,swig_arginfo_btrtime_i_get)
 SWIG_ZEND_NAMED_FE(new_btrtime,_wrap_new_btrTime,swig_arginfo_new_btrtime)
 SWIG_ZEND_NAMED_FE(btrdatetime_time_set,_wrap_btrDateTime_time_set,swig_arginfo_btrdatetime_time_set)
 SWIG_ZEND_NAMED_FE(btrdatetime_time_get,_wrap_btrDateTime_time_get,swig_arginfo_btrdatetime_time_get)
 SWIG_ZEND_NAMED_FE(btrdatetime_date_set,_wrap_btrDateTime_date_set,swig_arginfo_btrdatetime_date_set)
 SWIG_ZEND_NAMED_FE(btrdatetime_date_get,_wrap_btrDateTime_date_get,swig_arginfo_btrdatetime_date_get)
 SWIG_ZEND_NAMED_FE(btrdatetime_i64_set,_wrap_btrDateTime_i64_set,swig_arginfo_btrdatetime_i64_set)
 SWIG_ZEND_NAMED_FE(btrdatetime_i64_get,_wrap_btrDateTime_i64_get,swig_arginfo_btrdatetime_i64_get)
 SWIG_ZEND_NAMED_FE(new_btrdatetime,_wrap_new_btrDateTime,swig_arginfo_new_btrdatetime)
 SWIG_ZEND_NAMED_FE(btrtimestamp_i64_set,_wrap_btrTimeStamp_i64_set,swig_arginfo_btrtimestamp_i64_set)
 SWIG_ZEND_NAMED_FE(btrtimestamp_i64_get,_wrap_btrTimeStamp_i64_get,swig_arginfo_btrtimestamp_i64_get)
 SWIG_ZEND_NAMED_FE(new_btrtimestamp,_wrap_new_btrTimeStamp,swig_arginfo_new_btrtimestamp)
 SWIG_ZEND_NAMED_FE(btrtimestamp_tostring,_wrap_btrTimeStamp_toString,swig_arginfo_btrtimestamp_tostring)
 SWIG_ZEND_NAMED_FE(btrtimestamp_fromstring,_wrap_btrTimeStamp_fromString,swig_arginfo_btrtimestamp_fromstring)
 SWIG_ZEND_NAMED_FE(atobtrd,_wrap_atobtrd,swig_arginfo_atobtrd)
 SWIG_ZEND_NAMED_FE(atobtrt,_wrap_atobtrt,swig_arginfo_atobtrt)
 SWIG_ZEND_NAMED_FE(btrdtoa,_wrap_btrdtoa,swig_arginfo_btrdtoa)
 SWIG_ZEND_NAMED_FE(btrttoa,_wrap_btrttoa,swig_arginfo_btrttoa)
 SWIG_ZEND_NAMED_FE(btrstoa,_wrap_btrstoa,swig_arginfo_btrstoa)
 SWIG_ZEND_NAMED_FE(atobtrs,_wrap_atobtrs,swig_arginfo_atobtrs)
 SWIG_ZEND_NAMED_FE(getnowdate,_wrap_getNowDate,swig_arginfo_getnowdate)
 SWIG_ZEND_NAMED_FE(getnowtime,_wrap_getNowTime,swig_arginfo_getnowtime)
 SWIG_ZEND_NAMED_FE(fielddefs___clone,_wrap_fielddefs___clone,swig_arginfo_fielddefs___clone)
 SWIG_ZEND_NAMED_FE(fielddefs_indexbyname,_wrap_fielddefs_indexByName,swig_arginfo_fielddefs_indexbyname)
 SWIG_ZEND_NAMED_FE(fielddefs_getfielddef,_wrap_fielddefs_getFielddef,swig_arginfo_fielddefs_getfielddef)
 SWIG_ZEND_NAMED_FE(fielddefs_checkindex,_wrap_fielddefs_checkIndex,swig_arginfo_fielddefs_checkindex)
 SWIG_ZEND_NAMED_FE(fielddefs_size,_wrap_fielddefs_size,swig_arginfo_fielddefs_size)
 SWIG_ZEND_NAMED_FE(new_fielddefs,_wrap_new_fielddefs,swig_arginfo_new_fielddefs)
 SWIG_ZEND_NAMED_FE(new_field,_wrap_new_field,swig_arginfo_new_field)
 SWIG_ZEND_NAMED_FE(field_type,_wrap_field_type,swig_arginfo_field_type)
 SWIG_ZEND_NAMED_FE(field_len,_wrap_field_len,swig_arginfo_field_len)
 SWIG_ZEND_NAMED_FE(field_c_str,_wrap_field_c_str,swig_arginfo_field_c_str)
 SWIG_ZEND_NAMED_FE(field_a_str,_wrap_field_a_str,swig_arginfo_field_a_str)
 SWIG_ZEND_NAMED_FE(field_i,_wrap_field_i,swig_arginfo_field_i)
 SWIG_ZEND_NAMED_FE(field_i8,_wrap_field_i8,swig_arginfo_field_i8)
 SWIG_ZEND_NAMED_FE(field_i16,_wrap_field_i16,swig_arginfo_field_i16)
 SWIG_ZEND_NAMED_FE(field_i64,_wrap_field_i64,swig_arginfo_field_i64)
 SWIG_ZEND_NAMED_FE(field_f,_wrap_field_f,swig_arginfo_field_f)
 SWIG_ZEND_NAMED_FE(field_d,_wrap_field_d,swig_arginfo_field_d)
 SWIG_ZEND_NAMED_FE(field_setfv,_wrap_field_setFV,swig_arginfo_field_setfv)
 SWIG_ZEND_NAMED_FE(field_getbin,_wrap_field_getBin,swig_arginfo_field_getbin)
 SWIG_ZEND_NAMED_FE(field_comp,_wrap_field_comp,swig_arginfo_field_comp)
 SWIG_ZEND_NAMED_FE(record_isinvalidrecord,_wrap_Record_isInvalidRecord,swig_arginfo_record_isinvalidrecord)
 SWIG_ZEND_NAMED_FE(record_getfield,_wrap_Record_getField,swig_arginfo_record_getfield)
 SWIG_ZEND_NAMED_FE(record_size,_wrap_Record_size,swig_arginfo_record_size)
 SWIG_ZEND_NAMED_FE(record_indexbyname,_wrap_Record_indexByName,swig_arginfo_record_indexbyname)
 SWIG_ZEND_NAMED_FE(record_fielddefs,_wrap_Record_fieldDefs,swig_arginfo_record_fielddefs)
 SWIG_ZEND_NAMED_FE(record_clear,_wrap_Record_clear,swig_arginfo_record_clear)
 SWIG_ZEND_NAMED_FE(record_getfieldbyindexref,_wrap_Record_getFieldByIndexRef,swig_arginfo_record_getfieldbyindexref)
 SWIG_ZEND_NAMED_FE(record_getfieldbynameref,_wrap_Record_getFieldByNameRef,swig_arginfo_record_getfieldbynameref)
 SWIG_ZEND_NAMED_FE(memoryrecord_createrecord,_wrap_memoryRecord_createRecord,swig_arginfo_memoryrecord_createrecord)
 SWIG_ZEND_NAMED_FE(new_memoryrecord,_wrap_new_memoryRecord,swig_arginfo_new_memoryrecord)
 SWIG_ZEND_NAMED_FE(writablerecord_read,_wrap_writableRecord_read,swig_arginfo_writablerecord_read)
 SWIG_ZEND_NAMED_FE(writablerecord_insert,_wrap_writableRecord_insert,swig_arginfo_writablerecord_insert)
 SWIG_ZEND_NAMED_FE(writablerecord_del,_wrap_writableRecord_del,swig_arginfo_writablerecord_del)
 SWIG_ZEND_NAMED_FE(writablerecord_update,_wrap_writableRecord_update,swig_arginfo_writablerecord_update)
 SWIG_ZEND_NAMED_FE(writablerecord_save,_wrap_writableRecord_save,swig_arginfo_writablerecord_save)
 SWIG_ZEND_NAMED_FE(new_connectparams,_wrap_new_connectParams,swig_arginfo_new_connectparams)
 SWIG_ZEND_NAMED_FE(connectparams_setmode,_wrap_connectParams_setMode,swig_arginfo_connectparams_setmode)
 SWIG_ZEND_NAMED_FE(connectparams_settype,_wrap_connectParams_setType,swig_arginfo_connectparams_settype)
 SWIG_ZEND_NAMED_FE(connectparams_uri,_wrap_connectParams_uri,swig_arginfo_connectparams_uri)
 SWIG_ZEND_NAMED_FE(connectparams_mode,_wrap_connectParams_mode,swig_arginfo_connectparams_mode)
 SWIG_ZEND_NAMED_FE(connectparams_type,_wrap_connectParams_type,swig_arginfo_connectparams_type)
 SWIG_ZEND_NAMED_FE(fieldnames_reset,_wrap_fieldNames_reset,swig_arginfo_fieldnames_reset)
 SWIG_ZEND_NAMED_FE(fieldnames_keyfield,_wrap_fieldNames_keyField,swig_arginfo_fieldnames_keyfield)
 SWIG_ZEND_NAMED_FE(fieldnames_count,_wrap_fieldNames_count,swig_arginfo_fieldnames_count)
 SWIG_ZEND_NAMED_FE(fieldnames_getfieldname,_wrap_fieldNames_getFieldName,swig_arginfo_fieldnames_getfieldname)
 SWIG_ZEND_NAMED_FE(fieldnames_getvalue,_wrap_fieldNames_getValue,swig_arginfo_fieldnames_getvalue)
 SWIG_ZEND_NAMED_FE(fieldnames_addvalue,_wrap_fieldNames_addValue,swig_arginfo_fieldnames_addvalue)
 SWIG_ZEND_NAMED_FE(fieldnames_addvalues,_wrap_fieldNames_addValues,swig_arginfo_fieldnames_addvalues)
 SWIG_ZEND_NAMED_FE(new_fieldnames,_wrap_new_fieldNames,swig_arginfo_new_fieldnames)
 SWIG_ZEND_NAMED_FE(sortfield_name_set,_wrap_sortField_name_set,swig_arginfo_sortfield_name_set)
 SWIG_ZEND_NAMED_FE(sortfield_name_get,_wrap_sortField_name_get,swig_arginfo_sortfield_name_get)
 SWIG_ZEND_NAMED_FE(sortfield_asc_set,_wrap_sortField_asc_set,swig_arginfo_sortfield_asc_set)
 SWIG_ZEND_NAMED_FE(sortfield_asc_get,_wrap_sortField_asc_get,swig_arginfo_sortfield_asc_get)
 SWIG_ZEND_NAMED_FE(new_sortfield,_wrap_new_sortField,swig_arginfo_new_sortfield)
 SWIG_ZEND_NAMED_FE(sortfields_add,_wrap_sortFields_add,swig_arginfo_sortfields_add)
 SWIG_ZEND_NAMED_FE(sortfields_size,_wrap_sortFields_size,swig_arginfo_sortfields_size)
 SWIG_ZEND_NAMED_FE(sortfields_getsortfield,_wrap_sortFields_getSortField,swig_arginfo_sortfields_getsortfield)
 SWIG_ZEND_NAMED_FE(sortfields_clear,_wrap_sortFields_clear,swig_arginfo_sortfields_clear)
 SWIG_ZEND_NAMED_FE(new_sortfields,_wrap_new_sortFields,swig_arginfo_new_sortfields)
 SWIG_ZEND_NAMED_FE(recordsetquery_reset,_wrap_recordsetQuery_reset,swig_arginfo_recordsetquery_reset)
 SWIG_ZEND_NAMED_FE(recordsetquery_tostring,_wrap_recordsetQuery_toString,swig_arginfo_recordsetquery_tostring)
 SWIG_ZEND_NAMED_FE(new_recordsetquery,_wrap_new_recordsetQuery,swig_arginfo_new_recordsetquery)
 SWIG_ZEND_NAMED_FE(recordsetquery_when,_wrap_recordsetQuery_when,swig_arginfo_recordsetquery_when)
 SWIG_ZEND_NAMED_FE(recordsetquery_and_,_wrap_recordsetQuery_and_,swig_arginfo_recordsetquery_and_)
 SWIG_ZEND_NAMED_FE(recordsetquery_or_,_wrap_recordsetQuery_or_,swig_arginfo_recordsetquery_or_)
 SWIG_ZEND_NAMED_FE(groupfuncbase_targetnames,_wrap_groupFuncBase_targetNames,swig_arginfo_groupfuncbase_targetnames)
 SWIG_ZEND_NAMED_FE(groupfuncbase_resultname,_wrap_groupFuncBase_resultName,swig_arginfo_groupfuncbase_resultname)
 SWIG_ZEND_NAMED_FE(groupfuncbase_setresultname,_wrap_groupFuncBase_setResultName,swig_arginfo_groupfuncbase_setresultname)
 SWIG_ZEND_NAMED_FE(groupfuncbase_resultkey,_wrap_groupFuncBase_resultKey,swig_arginfo_groupfuncbase_resultkey)
 SWIG_ZEND_NAMED_FE(groupfuncbase_reset,_wrap_groupFuncBase_reset,swig_arginfo_groupfuncbase_reset)
 SWIG_ZEND_NAMED_FE(groupquery_reset,_wrap_groupQuery_reset,swig_arginfo_groupquery_reset)
 SWIG_ZEND_NAMED_FE(groupquery_addfunction,_wrap_groupQuery_addFunction,swig_arginfo_groupquery_addfunction)
 SWIG_ZEND_NAMED_FE(groupquery_keyfield,_wrap_groupQuery_keyField,swig_arginfo_groupquery_keyfield)
 SWIG_ZEND_NAMED_FE(groupquery_getkeyfields,_wrap_groupQuery_getKeyFields,swig_arginfo_groupquery_getkeyfields)
 SWIG_ZEND_NAMED_FE(groupquery_getfunction,_wrap_groupQuery_getFunction,swig_arginfo_groupquery_getfunction)
 SWIG_ZEND_NAMED_FE(groupquery_functioncount,_wrap_groupQuery_functionCount,swig_arginfo_groupquery_functioncount)
 SWIG_ZEND_NAMED_FE(new_groupquery,_wrap_new_groupQuery,swig_arginfo_new_groupquery)
 SWIG_ZEND_NAMED_FE(new_sum,_wrap_new_sum,swig_arginfo_new_sum)
 SWIG_ZEND_NAMED_FE(new_first,_wrap_new_first,swig_arginfo_new_first)
 SWIG_ZEND_NAMED_FE(new_last,_wrap_new_last,swig_arginfo_new_last)
 SWIG_ZEND_NAMED_FE(new_count,_wrap_new_count,swig_arginfo_new_count)
 SWIG_ZEND_NAMED_FE(new_avg,_wrap_new_avg,swig_arginfo_new_avg)
 SWIG_ZEND_NAMED_FE(new_min,_wrap_new_min,swig_arginfo_new_min)
 SWIG_ZEND_NAMED_FE(new_max,_wrap_new_max,swig_arginfo_new_max)
 SWIG_ZEND_NAMED_FE(recordset___clone,_wrap_Recordset___clone,swig_arginfo_recordset___clone)
 SWIG_ZEND_NAMED_FE(recordset_getrecord,_wrap_Recordset_getRecord,swig_arginfo_recordset_getrecord)
 SWIG_ZEND_NAMED_FE(recordset_size,_wrap_Recordset_size,swig_arginfo_recordset_size)
 SWIG_ZEND_NAMED_FE(recordset_count,_wrap_Recordset_count,swig_arginfo_recordset_count)
 SWIG_ZEND_NAMED_FE(recordset_clearrecords,_wrap_Recordset_clearRecords,swig_arginfo_recordset_clearrecords)
 SWIG_ZEND_NAMED_FE(recordset_fielddefs,_wrap_Recordset_fieldDefs,swig_arginfo_recordset_fielddefs)
 SWIG_ZEND_NAMED_FE(recordset_clear,_wrap_Recordset_clear,swig_arginfo_recordset_clear)
 SWIG_ZEND_NAMED_FE(recordset_top,_wrap_Recordset_top,swig_arginfo_recordset_top)
 SWIG_ZEND_NAMED_FE(recordset_begin,_wrap_Recordset_begin,swig_arginfo_recordset_begin)
 SWIG_ZEND_NAMED_FE(recordset_end,_wrap_Recordset_end,swig_arginfo_recordset_end)
 SWIG_ZEND_NAMED_FE(recordset_erase,_wrap_Recordset_erase,swig_arginfo_recordset_erase)
 SWIG_ZEND_NAMED_FE(recordset_removefield,_wrap_Recordset_removeField,swig_arginfo_recordset_removefield)
 SWIG_ZEND_NAMED_FE(recordset_matchby,_wrap_Recordset_matchBy,swig_arginfo_recordset_matchby)
 SWIG_ZEND_NAMED_FE(recordset_groupby,_wrap_Recordset_groupBy,swig_arginfo_recordset_groupby)
 SWIG_ZEND_NAMED_FE(recordset_orderby,_wrap_Recordset_orderBy,swig_arginfo_recordset_orderby)
 SWIG_ZEND_NAMED_FE(recordset_reverse,_wrap_Recordset_reverse,swig_arginfo_recordset_reverse)
 SWIG_ZEND_NAMED_FE(recordset_appendfield,_wrap_Recordset_appendField,swig_arginfo_recordset_appendfield)
 SWIG_ZEND_NAMED_FE(recordset_unionrecordset,_wrap_Recordset_unionRecordset,swig_arginfo_recordset_unionrecordset)
 SWIG_ZEND_NAMED_FE(recordset_getrow,_wrap_Recordset_getRow,swig_arginfo_recordset_getrow)
 SWIG_ZEND_NAMED_FE(new_recordset,_wrap_new_Recordset,swig_arginfo_new_recordset)
 SWIG_ZEND_NAMED_FE(new_preparedquery,_wrap_new_preparedQuery,swig_arginfo_new_preparedquery)
 SWIG_ZEND_NAMED_FE(preparedquery_supplyvalue,_wrap_preparedQuery_supplyValue,swig_arginfo_preparedquery_supplyvalue)
 SWIG_ZEND_NAMED_FE(preparedquery_addvalue,_wrap_preparedQuery_addValue,swig_arginfo_preparedquery_addvalue)
 SWIG_ZEND_NAMED_FE(preparedquery_resetaddindex,_wrap_preparedQuery_resetAddIndex,swig_arginfo_preparedquery_resetaddindex)
 SWIG_ZEND_NAMED_FE(activetable_alias,_wrap_activeTable_alias,swig_arginfo_activetable_alias)
 SWIG_ZEND_NAMED_FE(activetable_resetalias,_wrap_activeTable_resetAlias,swig_arginfo_activetable_resetalias)
 SWIG_ZEND_NAMED_FE(activetable_getwritablerecord,_wrap_activeTable_getWritableRecord,swig_arginfo_activetable_getwritablerecord)
 SWIG_ZEND_NAMED_FE(activetable_index,_wrap_activeTable_index,swig_arginfo_activetable_index)
 SWIG_ZEND_NAMED_FE(activetable_option,_wrap_activeTable_option,swig_arginfo_activetable_option)
 SWIG_ZEND_NAMED_FE(activetable_read,_wrap_activeTable_read,swig_arginfo_activetable_read)
 SWIG_ZEND_NAMED_FE(activetable_readmore,_wrap_activeTable_readMore,swig_arginfo_activetable_readmore)
 SWIG_ZEND_NAMED_FE(activetable_prepare,_wrap_activeTable_prepare,swig_arginfo_activetable_prepare)
 SWIG_ZEND_NAMED_FE(activetable_join,_wrap_activeTable_join,swig_arginfo_activetable_join)
 SWIG_ZEND_NAMED_FE(activetable_outerjoin,_wrap_activeTable_outerJoin,swig_arginfo_activetable_outerjoin)
 SWIG_ZEND_NAMED_FE(new_activetable,_wrap_new_activeTable,swig_arginfo_new_activetable)
 SWIG_ZEND_NAMED_FE(activetable_release,_wrap_activeTable_release,swig_arginfo_activetable_release)
 SWIG_ZEND_NAMED_FE(activetable_table,_wrap_activeTable_table,swig_arginfo_activetable_table)
 SWIG_ZEND_NAMED_FE(activetable_keyvalue,_wrap_activeTable_keyValue,swig_arginfo_activetable_keyvalue)
 SWIG_ZEND_NAMED_FE(new_pooleddbmanager,_wrap_new_pooledDbManager,swig_arginfo_new_pooleddbmanager)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_c_use,_wrap_pooledDbManager_c_use,swig_arginfo_pooleddbmanager_c_use)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_unuse,_wrap_pooledDbManager_unUse,swig_arginfo_pooleddbmanager_unuse)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_reset,_wrap_pooledDbManager_reset,swig_arginfo_pooleddbmanager_reset)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_db,_wrap_pooledDbManager_db,swig_arginfo_pooleddbmanager_db)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_uri,_wrap_pooledDbManager_uri,swig_arginfo_pooleddbmanager_uri)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_mode,_wrap_pooledDbManager_mode,swig_arginfo_pooleddbmanager_mode)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_isopened,_wrap_pooledDbManager_isOpened,swig_arginfo_pooleddbmanager_isopened)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_setoption,_wrap_pooledDbManager_setOption,swig_arginfo_pooleddbmanager_setoption)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_option,_wrap_pooledDbManager_option,swig_arginfo_pooleddbmanager_option)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_begintrn,_wrap_pooledDbManager_beginTrn,swig_arginfo_pooleddbmanager_begintrn)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_endtrn,_wrap_pooledDbManager_endTrn,swig_arginfo_pooleddbmanager_endtrn)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_aborttrn,_wrap_pooledDbManager_abortTrn,swig_arginfo_pooleddbmanager_aborttrn)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_enabletrn,_wrap_pooledDbManager_enableTrn,swig_arginfo_pooleddbmanager_enabletrn)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_beginsnapshot,_wrap_pooledDbManager_beginSnapshot,swig_arginfo_pooleddbmanager_beginsnapshot)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_endsnapshot,_wrap_pooledDbManager_endSnapshot,swig_arginfo_pooleddbmanager_endsnapshot)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_stat,_wrap_pooledDbManager_stat,swig_arginfo_pooleddbmanager_stat)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_clientid,_wrap_pooledDbManager_clientID,swig_arginfo_pooleddbmanager_clientid)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_setmaxconnections,_wrap_pooledDbManager_setMaxConnections,swig_arginfo_pooleddbmanager_setmaxconnections)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_maxconnections,_wrap_pooledDbManager_maxConnections,swig_arginfo_pooleddbmanager_maxconnections)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_reserve,_wrap_pooledDbManager_reserve,swig_arginfo_pooleddbmanager_reserve)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_usingCount,_wrap_pooledDbManager_usingCount,swig_arginfo_pooleddbmanager_usingCount)
 SWIG_ZEND_NAMED_FE(pooleddbmanager_table,_wrap_pooledDbManager_table,swig_arginfo_pooleddbmanager_table)
 SWIG_ZEND_NAMED_FE(new_fieldsbase_p_p,_wrap_new_fieldsBase_p_p,swig_arginfo_new_fieldsbase_p_p)
 SWIG_ZEND_NAMED_FE(copy_fieldsbase_p_p,_wrap_copy_fieldsBase_p_p,swig_arginfo_copy_fieldsbase_p_p)
 SWIG_ZEND_NAMED_FE(delete_fieldsbase_p_p,_wrap_delete_fieldsBase_p_p,swig_arginfo_delete_fieldsbase_p_p)
 SWIG_ZEND_NAMED_FE(fieldsbase_p_p_assign,_wrap_fieldsBase_p_p_assign,swig_arginfo_fieldsbase_p_p_assign)
 SWIG_ZEND_NAMED_FE(fieldsbase_p_p_value,_wrap_fieldsBase_p_p_value,swig_arginfo_fieldsbase_p_p_value)
 SWIG_ZEND_NAMED_FE(swig_transactd_alter_newobject,_wrap_swig_transactd_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_transactd_get_newobject,_wrap_swig_transactd_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry transactd_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"transactd",
    transactd_functions,
    PHP_MINIT(transactd),
    PHP_MSHUTDOWN(transactd),
    PHP_RINIT(transactd),
    PHP_RSHUTDOWN(transactd),
    PHP_MINFO(transactd),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &transactd_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &transactd_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(transactd)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
  type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
  if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
  if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
    cast->type = ret;
    ret = 0;
  } else {
    /* Check for casting already in the list */
    swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
    if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
    if (!ocast) ret = 0;
  }
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);


    bzs::db::protocol::tdap::client::nsdatabase::setCheckTablePtr(true);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(transactd, transactd_init_globals, transactd_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_bzs__db__protocol__tdap__client__table=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__table,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__table->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__table,&le_swig__p_bzs__db__protocol__tdap__client__table);
le_swig__p_iterator=zend_register_list_destructors_ex(_wrap_destroy_p_iterator,NULL,(char *)(SWIGTYPE_p_iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_iterator,&le_swig__p_iterator);
le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t,&le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t);
le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t,&le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__table_t);
le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t,&le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t);
le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t,NULL,(char *)(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t,&le_swig__p_boost__shared_ptrT_bzs__db__protocol__tdap__client__filter_t);
le_swig__p_bzs__db__protocol__tdap__client__database=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__database,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__database->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__database,&le_swig__p_bzs__db__protocol__tdap__client__database);
le_swig__p_bzs__db__protocol__tdap__client__nsdatabase=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__nsdatabase,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__nsdatabase,&le_swig__p_bzs__db__protocol__tdap__client__nsdatabase);
le_swig__p_bzs__db__protocol__tdap__client__dbdef=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__dbdef,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__dbdef,&le_swig__p_bzs__db__protocol__tdap__client__dbdef);
le_swig__p_bzs__db__protocol__tdap__fielddef_tT_64_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef_tT_64_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_64_t,&le_swig__p_bzs__db__protocol__tdap__fielddef_tT_64_t);
le_swig__p_bzs__db__protocol__tdap__client__fieldShare=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldShare,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldShare->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldShare,&le_swig__p_bzs__db__protocol__tdap__client__fieldShare);
le_swig__p_bzs__db__protocol__tdap__client__pooledDbManager=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__pooledDbManager,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__pooledDbManager,&le_swig__p_bzs__db__protocol__tdap__client__pooledDbManager);
le_swig__p_bzs__db__protocol__tdap__fielddef_tT_20_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef_tT_20_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_20_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef_tT_20_t,&le_swig__p_bzs__db__protocol__tdap__fielddef_tT_20_t);
le_swig__p_bzs__db__protocol__tdap__client__sortField=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__sortField,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__sortField,&le_swig__p_bzs__db__protocol__tdap__client__sortField);
le_swig__p_unsigned_short=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_short,NULL,(char *)(SWIGTYPE_p_unsigned_short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_short,&le_swig__p_unsigned_short);
le_swig__p_short=zend_register_list_destructors_ex(_wrap_destroy_p_short,NULL,(char *)(SWIGTYPE_p_short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_short,&le_swig__p_short);
le_swig__p_bzs__db__protocol__tdap__client__recordset=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__recordset,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__recordset,&le_swig__p_bzs__db__protocol__tdap__client__recordset);
le_swig__p_boost__timer=zend_register_list_destructors_ex(_wrap_destroy_p_boost__timer,NULL,(char *)(SWIGTYPE_p_boost__timer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__timer,&le_swig__p_boost__timer);
le_swig__p_bzs__db__protocol__tdap__client__groupQuery=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__groupQuery,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__groupQuery,&le_swig__p_bzs__db__protocol__tdap__client__groupQuery);
le_swig__p_bzs__db__protocol__tdap__tabledef=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__tabledef,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__tabledef->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__tabledef,&le_swig__p_bzs__db__protocol__tdap__tabledef);
le_swig__p_p_bzs__db__protocol__tdap__tabledef=zend_register_list_destructors_ex(_wrap_destroy_p_p_bzs__db__protocol__tdap__tabledef,NULL,(char *)(SWIGTYPE_p_p_bzs__db__protocol__tdap__tabledef->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_bzs__db__protocol__tdap__tabledef,&le_swig__p_p_bzs__db__protocol__tdap__tabledef);
le_swig__p_bzs__db__protocol__tdap__client__groupFuncBase=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__groupFuncBase,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__groupFuncBase,&le_swig__p_bzs__db__protocol__tdap__client__groupFuncBase);
le_swig__p_bzs__db__protocol__tdap__client__fieldsBase=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldsBase,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldsBase,&le_swig__p_bzs__db__protocol__tdap__client__fieldsBase);
le_swig__p_bzs__db__protocol__tdap__FLAGS=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__FLAGS,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__FLAGS,&le_swig__p_bzs__db__protocol__tdap__FLAGS);
le_swig__p_p_bzs__db__protocol__tdap__client__fieldsBase=zend_register_list_destructors_ex(_wrap_destroy_p_p_bzs__db__protocol__tdap__client__fieldsBase,NULL,(char *)(SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_bzs__db__protocol__tdap__client__fieldsBase,&le_swig__p_p_bzs__db__protocol__tdap__client__fieldsBase);
le_swig__p_bzs__db__protocol__tdap__client__count=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__count,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__count->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__count,&le_swig__p_bzs__db__protocol__tdap__client__count);
le_swig__p_void=zend_register_list_destructors_ex(_wrap_destroy_p_void,NULL,(char *)(SWIGTYPE_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_void,&le_swig__p_void);
le_swig__p_p_void=zend_register_list_destructors_ex(_wrap_destroy_p_p_void,NULL,(char *)(SWIGTYPE_p_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_void,&le_swig__p_p_void);
le_swig__p_bzs__db__protocol__tdap__client__sum=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__sum,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__sum->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__sum,&le_swig__p_bzs__db__protocol__tdap__client__sum);
le_swig__p_bzs__db__protocol__tdap__client__first=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__first,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__first->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__first,&le_swig__p_bzs__db__protocol__tdap__client__first);
le_swig__p_bzs__db__protocol__tdap__client__last=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__last,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__last->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__last,&le_swig__p_bzs__db__protocol__tdap__client__last);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
le_swig__p_bzs__db__protocol__tdap__client__avg=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__avg,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__avg->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__avg,&le_swig__p_bzs__db__protocol__tdap__client__avg);
le_swig__p_bzs__db__protocol__tdap__client__queryBase=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__queryBase,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__queryBase,&le_swig__p_bzs__db__protocol__tdap__client__queryBase);
le_swig__p_bzs__db__protocol__tdap__fielddef=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__fielddef,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__fielddef,&le_swig__p_bzs__db__protocol__tdap__fielddef);
le_swig__p_std___tstring=zend_register_list_destructors_ex(_wrap_destroy_p_std___tstring,NULL,(char *)(SWIGTYPE_p_std___tstring->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std___tstring,&le_swig__p_std___tstring);
le_swig__p_bzs__db__protocol__tdap__client__fieldNames=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__fieldNames,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__fieldNames,&le_swig__p_bzs__db__protocol__tdap__client__fieldNames);
le_swig__p_bzs__db__protocol__tdap__btrVersion=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrVersion,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrVersion,&le_swig__p_bzs__db__protocol__tdap__btrVersion);
le_swig__p_bzs__db__protocol__tdap__btrDate=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrDate,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrDate->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrDate,&le_swig__p_bzs__db__protocol__tdap__btrDate);
le_swig__p_preparedQuery=zend_register_list_destructors_ex(_wrap_destroy_p_preparedQuery,NULL,(char *)(SWIGTYPE_p_preparedQuery->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_preparedQuery,&le_swig__p_preparedQuery);
le_swig__p_bzs__db__protocol__tdap__client__preparedQuery=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__preparedQuery,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__preparedQuery,&le_swig__p_bzs__db__protocol__tdap__client__preparedQuery);
le_swig__p_bzs__db__protocol__tdap__client__fielddefs=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__fielddefs,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__fielddefs,&le_swig__p_bzs__db__protocol__tdap__client__fielddefs);
le_swig__p_bzs__db__protocol__tdap__client__field=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__field,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__field->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__field,&le_swig__p_bzs__db__protocol__tdap__client__field);
le_swig__p_bzs__db__protocol__tdap__client__nstable=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__nstable,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__nstable,&le_swig__p_bzs__db__protocol__tdap__client__nstable);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t_t);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t_t);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t_t);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t_t);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t_t);
le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t,&le_swig__p_bzs__db__protocol__tdap__client__filterdIteratorT_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t_t);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_bzs__db__protocol__tdap__btrTimeStamp=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrTimeStamp,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrTimeStamp,&le_swig__p_bzs__db__protocol__tdap__btrTimeStamp);
le_swig__p_bzs__db__protocol__tdap__client__max=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__max,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__max->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__max,&le_swig__p_bzs__db__protocol__tdap__client__max);
le_swig__p_char=zend_register_list_destructors_ex(_wrap_destroy_p_char,NULL,(char *)(SWIGTYPE_p_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_char,&le_swig__p_char);
le_swig__p_bzs__db__protocol__tdap__keySegment=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__keySegment,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__keySegment->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__keySegment,&le_swig__p_bzs__db__protocol__tdap__keySegment);
le_swig__p_bzs__db__protocol__tdap__client__writableRecord=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__writableRecord,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__writableRecord,&le_swig__p_bzs__db__protocol__tdap__client__writableRecord);
le_swig__p_bzs__db__protocol__tdap__client__memoryRecord=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__memoryRecord,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__memoryRecord,&le_swig__p_bzs__db__protocol__tdap__client__memoryRecord);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepRvNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvFindNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexRvNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_stepNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexFindNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t,&le_swig__p_bzs__db__protocol__tdap__client__tableIteratorT_indexNavi_t);
le_swig__p_bzs__db__protocol__tdap__client__min=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__min,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__min->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__min,&le_swig__p_bzs__db__protocol__tdap__client__min);
le_swig__p_bzs__db__protocol__tdap__client__connectParams=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__connectParams,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__connectParams,&le_swig__p_bzs__db__protocol__tdap__client__connectParams);
le_swig__p_bzs__db__protocol__tdap__btrDateTime=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrDateTime,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrDateTime,&le_swig__p_bzs__db__protocol__tdap__btrDateTime);
le_swig__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t,&le_swig__p_bzs__db__protocol__tdap__client__snapshotT_bzs__db__protocol__tdap__client__idatabaseManager_p_t);
le_swig__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short=zend_register_list_destructors_ex(_wrap_destroy_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short,NULL,(char *)(SWIGTYPE_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short,&le_swig__p_f_unsigned_short_p_void_p_void_p_unsigned_int_p_void_unsigned_short_char_p_unsigned_char__short);
le_swig__p_HWND=zend_register_list_destructors_ex(_wrap_destroy_p_HWND,NULL,(char *)(SWIGTYPE_p_HWND->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_HWND,&le_swig__p_HWND);
le_swig__p_bzs__db__protocol__tdap__client__recordsetQuery=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__recordsetQuery,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__recordsetQuery,&le_swig__p_bzs__db__protocol__tdap__client__recordsetQuery);
le_swig__p_bzs__rtl__benchmark=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__rtl__benchmark,NULL,(char *)(SWIGTYPE_p_bzs__rtl__benchmark->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__rtl__benchmark,&le_swig__p_bzs__rtl__benchmark);
le_swig__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,&le_swig__p_bzs__db__protocol__tdap__client__snapshotT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t);
le_swig__bool=zend_register_list_destructors_ex(_wrap_destroy_bool,NULL,(char *)(SWIGTYPE_bool->name),module_number);
SWIG_TypeClientData(SWIGTYPE_bool,&le_swig__bool);
le_swig__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t=zend_register_list_destructors_ex(_wrap_destroy_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t,NULL,(char *)(SWIGTYPE_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t,&le_swig__p_boost__functionT_int_fbzs__db__protocol__tdap__client__fields_const_RF_t);
le_swig__p_unsigned_int=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_int,NULL,(char *)(SWIGTYPE_p_unsigned_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_int,&le_swig__p_unsigned_int);
le_swig__p_unsigned_char=zend_register_list_destructors_ex(_wrap_destroy_p_unsigned_char,NULL,(char *)(SWIGTYPE_p_unsigned_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_unsigned_char,&le_swig__p_unsigned_char);
le_swig__p_bzs__db__protocol__tdap__client__activeTable=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__activeTable,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__activeTable,&le_swig__p_bzs__db__protocol__tdap__client__activeTable);
le_swig__p_bzs__db__protocol__tdap__btrTime=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrTime,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrTime->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrTime,&le_swig__p_bzs__db__protocol__tdap__btrTime);
le_swig__p_bzs__db__protocol__tdap__btrVersions=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__btrVersions,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__btrVersions,&le_swig__p_bzs__db__protocol__tdap__btrVersions);
le_swig__p_bzs__db__protocol__tdap__client__query=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__query,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__query->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__query,&le_swig__p_bzs__db__protocol__tdap__client__query);
le_swig__p_bzs__db__protocol__tdap__client__fields=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__fields,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__fields->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__fields,&le_swig__p_bzs__db__protocol__tdap__client__fields);
le_swig__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator,NULL,(char *)(SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator,&le_swig__p_std__vectorT_bzs__db__protocol__tdap__client__fieldsBase_p_t__iterator);
le_swig__p_bzs__db__protocol__tdap__client__sortFields=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__sortFields,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__sortFields,&le_swig__p_bzs__db__protocol__tdap__client__sortFields);
le_swig__p_bzs__db__protocol__tdap__keydef=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__keydef,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__keydef->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__keydef,&le_swig__p_bzs__db__protocol__tdap__keydef);
le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t,&le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__idatabaseManager_t_t);
le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t=zend_register_list_destructors_ex(_wrap_destroy_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,NULL,(char *)(SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t,&le_swig__p_bzs__db__protocol__tdap__client__transactionT_boost__shared_ptrT_bzs__db__protocol__tdap__client__database_t_t);
SWIG_TypeClientData(SWIGTYPE_p_BOOKMARK, &le_swig__p_BOOKMARK);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
// ---- patch begin ---
#ifdef _WIN32
SWIG_LONG_CONSTANT(CP_ACP, 0);
#else
SWIG_LONG_CONSTANT(CP_ACP, 65001);
#endif
// ---- patch end ---
SWIG_LONG_CONSTANT(CP_UTF8, CP_UTF8);
SWIG_LONG_CONSTANT(TD_ACL_RELOAD, TD_ACL_RELOAD); 
SWIG_LONG_CONSTANT(ft_string, ft_string);
SWIG_LONG_CONSTANT(ft_integer, ft_integer);
SWIG_LONG_CONSTANT(ft_float, ft_float);
SWIG_LONG_CONSTANT(ft_date, ft_date);
SWIG_LONG_CONSTANT(ft_time, ft_time);
SWIG_LONG_CONSTANT(ft_decimal, ft_decimal);
SWIG_LONG_CONSTANT(ft_money, ft_money);
SWIG_LONG_CONSTANT(ft_logical, ft_logical);
SWIG_LONG_CONSTANT(ft_numeric, ft_numeric);
SWIG_LONG_CONSTANT(ft_bfloat, ft_bfloat);
SWIG_LONG_CONSTANT(ft_lstring, ft_lstring);
SWIG_LONG_CONSTANT(ft_zstring, ft_zstring);
SWIG_LONG_CONSTANT(ft_note, ft_note);
SWIG_LONG_CONSTANT(ft_lvar, ft_lvar);
SWIG_LONG_CONSTANT(ft_uinteger, ft_uinteger);
SWIG_LONG_CONSTANT(ft_autoinc, ft_autoinc);
SWIG_LONG_CONSTANT(ft_bit, ft_bit);
SWIG_LONG_CONSTANT(ft_numericsts, ft_numericsts);
SWIG_LONG_CONSTANT(ft_numericsa, ft_numericsa);
SWIG_LONG_CONSTANT(ft_currency, ft_currency);
SWIG_LONG_CONSTANT(ft_timestamp, ft_timestamp);
SWIG_LONG_CONSTANT(ft_blob, ft_blob);
SWIG_LONG_CONSTANT(ft_reserve22, ft_reserve22);
SWIG_LONG_CONSTANT(ft_reserve23, ft_reserve23);
SWIG_LONG_CONSTANT(ft_reserve24, ft_reserve24);
SWIG_LONG_CONSTANT(ft_wstring, ft_wstring);
SWIG_LONG_CONSTANT(ft_wzstring, ft_wzstring);
SWIG_LONG_CONSTANT(ft_guid, ft_guid);
SWIG_LONG_CONSTANT(ft_datetime, ft_datetime);
SWIG_LONG_CONSTANT(ft_myvarchar, ft_myvarchar);
SWIG_LONG_CONSTANT(ft_myvarbinary, ft_myvarbinary);
SWIG_LONG_CONSTANT(ft_mywvarchar, ft_mywvarchar);
SWIG_LONG_CONSTANT(ft_mywvarbinary, ft_mywvarbinary);
SWIG_LONG_CONSTANT(ft_mychar, ft_mychar);
SWIG_LONG_CONSTANT(ft_mywchar, ft_mywchar);
SWIG_LONG_CONSTANT(ft_mydate, ft_mydate);
SWIG_LONG_CONSTANT(ft_mytime, ft_mytime);
SWIG_LONG_CONSTANT(ft_mydatetime, ft_mydatetime);
SWIG_LONG_CONSTANT(ft_mytimestamp, ft_mytimestamp);
SWIG_LONG_CONSTANT(ft_mytext, ft_mytext);
SWIG_LONG_CONSTANT(ft_myblob, ft_myblob);
SWIG_LONG_CONSTANT(ft_autoIncUnsigned, ft_autoIncUnsigned);
SWIG_LONG_CONSTANT(ft_myfixedbinary, ft_myfixedbinary);
SWIG_LONG_CONSTANT(ft_nullindicator, ft_nullindicator);
SWIG_LONG_CONSTANT(charset_none, charset_none);
SWIG_LONG_CONSTANT(charset_latin1, charset_latin1);
SWIG_LONG_CONSTANT(charset_ascii, charset_ascii);
SWIG_LONG_CONSTANT(charset_sjis, charset_sjis);
SWIG_LONG_CONSTANT(charset_cp932, charset_cp932);
SWIG_LONG_CONSTANT(charset_utf8, charset_utf8);
SWIG_LONG_CONSTANT(charset_utf8mb4, charset_utf8mb4);
SWIG_LONG_CONSTANT(charset_usc2, charset_usc2);
SWIG_LONG_CONSTANT(CMPLOGICAL_VAR_COMP_ALL, CMPLOGICAL_VAR_COMP_ALL);
SWIG_LONG_CONSTANT(CMPLOGICAL_CMPACS, CMPLOGICAL_CMPACS);
SWIG_LONG_CONSTANT(CMPLOGICAL_FIELD, CMPLOGICAL_FIELD);
SWIG_LONG_CONSTANT(CMPLOGICAL_CASEINSENSITIVE, CMPLOGICAL_CASEINSENSITIVE);
SWIG_LONG_CONSTANT(LOCK_BIAS_DEFAULT, LOCK_BIAS_DEFAULT);
SWIG_LONG_CONSTANT(LOCK_SINGLE_WAIT, LOCK_SINGLE_WAIT);
SWIG_LONG_CONSTANT(LOCK_SINGLE_NOWAIT, LOCK_SINGLE_NOWAIT);
SWIG_LONG_CONSTANT(LOCK_MULTI_WAIT, LOCK_MULTI_WAIT);
SWIG_LONG_CONSTANT(LOCK_MULTI_NOWAIT, LOCK_MULTI_NOWAIT);
SWIG_LONG_CONSTANT(NOWAIT_WRITE, NOWAIT_WRITE);
SWIG_LONG_CONSTANT(PARALLEL_TRN, PARALLEL_TRN);
SWIG_LONG_CONSTANT(TRN_ISO_READ_COMMITED, TRN_ISO_READ_COMMITED);
SWIG_LONG_CONSTANT(TRN_ISO_REPEATABLE_READ, TRN_ISO_REPEATABLE_READ);
SWIG_LONG_CONSTANT(TRN_ISO_SERIALIZABLE, TRN_ISO_SERIALIZABLE);
SWIG_LONG_CONSTANT(SINGLELOCK_READ_COMMITED, SINGLELOCK_READ_COMMITED);
SWIG_LONG_CONSTANT(MULTILOCK_READ_COMMITED, MULTILOCK_READ_COMMITED);
SWIG_LONG_CONSTANT(MULTILOCK_REPEATABLE_READ, MULTILOCK_REPEATABLE_READ);
SWIG_LONG_CONSTANT(MULTILOCK_ISO_SERIALIZABLE, MULTILOCK_ISO_SERIALIZABLE);
SWIG_LONG_CONSTANT(SINGLELOCK_NOGAP, SINGLELOCK_NOGAP);
SWIG_LONG_CONSTANT(MULTILOCK_NOGAP, MULTILOCK_NOGAP);
SWIG_LONG_CONSTANT(MULTILOCK_GAP, MULTILOCK_GAP);
SWIG_LONG_CONSTANT(CONSISTENT_READ, CONSISTENT_READ);
SWIG_LONG_CONSTANT(MULTILOCK_GAP_SHARE, MULTILOCK_GAP_SHARE);
SWIG_LONG_CONSTANT(MULTILOCK_NOGAP_SHARE, MULTILOCK_NOGAP_SHARE);
SWIG_LONG_CONSTANT(ROW_LOCK_X, ROW_LOCK_X);
SWIG_LONG_CONSTANT(ROW_LOCK_S, ROW_LOCK_S);
SWIG_LONG_CONSTANT(SRV_ISO_READ_UNCOMMITED, SRV_ISO_READ_UNCOMMITED);
SWIG_LONG_CONSTANT(SRV_ISO_READ_COMMITED, SRV_ISO_READ_COMMITED);
SWIG_LONG_CONSTANT(SRV_ISO_REPEATABLE_READ, SRV_ISO_REPEATABLE_READ);
SWIG_LONG_CONSTANT(SRV_ISO_SERIALIZABLE, SRV_ISO_SERIALIZABLE);
SWIG_LONG_CONSTANT(TD_OPEN_NORMAL, TD_OPEN_NORMAL);
SWIG_LONG_CONSTANT(TD_OPEN_READONLY, TD_OPEN_READONLY);
SWIG_LONG_CONSTANT(TD_OPEN_EXCLUSIVE, TD_OPEN_EXCLUSIVE);
SWIG_LONG_CONSTANT(TD_OPEN_READONLY_EXCLUSIVE, TD_OPEN_READONLY_EXCLUSIVE);
SWIG_LONG_CONSTANT(BT_AL_LEFT, BT_AL_LEFT);
SWIG_LONG_CONSTANT(BT_AL_CENTER, BT_AL_CENTER);
SWIG_LONG_CONSTANT(BT_AL_RIGHT, BT_AL_RIGHT);
SWIG_LONG_CONSTANT(STATUS_TABLE_YET_OPEN, STATUS_TABLE_YET_OPEN);
SWIG_LONG_CONSTANT(STATUS_DURING_TRANSACTION, STATUS_DURING_TRANSACTION);
SWIG_LONG_CONSTANT(STATUS_NO_ACR_UPDATE_DELETE, STATUS_NO_ACR_UPDATE_DELETE);
SWIG_LONG_CONSTANT(STATUS_NO_ACR_INSERT, STATUS_NO_ACR_INSERT);
SWIG_LONG_CONSTANT(STATUS_NO_ACR_READ, STATUS_NO_ACR_READ);
SWIG_LONG_CONSTANT(STATUS_CANT_ALLOC_MEMORY, STATUS_CANT_ALLOC_MEMORY);
SWIG_LONG_CONSTANT(STATUS_USE_KEYFIELD, STATUS_USE_KEYFIELD);
SWIG_LONG_CONSTANT(STATUS_TOO_MANY_TABLES, STATUS_TOO_MANY_TABLES);
SWIG_LONG_CONSTANT(STATUS_INVARID_PRM_KEY_NUM, STATUS_INVARID_PRM_KEY_NUM);
SWIG_LONG_CONSTANT(STATUS_INVARID_PNT_KEY_NUM, STATUS_INVARID_PNT_KEY_NUM);
SWIG_LONG_CONSTANT(STATUS_INVARID_REP_KEY_NUM, STATUS_INVARID_REP_KEY_NUM);
SWIG_LONG_CONSTANT(STATUS_INVARID_FIELD_IDX, STATUS_INVARID_FIELD_IDX);
SWIG_LONG_CONSTANT(STATUS_ALREADY_DELETED, STATUS_ALREADY_DELETED);
SWIG_LONG_CONSTANT(STATUS_LMITS_MAX_TABLES, STATUS_LMITS_MAX_TABLES);
SWIG_LONG_CONSTANT(STATUS_DB_YET_OPEN, STATUS_DB_YET_OPEN);
SWIG_LONG_CONSTANT(STATUS_TABLENAME_NOTFOUND, STATUS_TABLENAME_NOTFOUND);
SWIG_LONG_CONSTANT(STATUS_DIFFERENT_DBVERSION, STATUS_DIFFERENT_DBVERSION);
SWIG_LONG_CONSTANT(STATUS_DUPLICATE_FIELDNAME, STATUS_DUPLICATE_FIELDNAME);
SWIG_LONG_CONSTANT(STATUS_INVALID_TABLE_IDX, STATUS_INVALID_TABLE_IDX);
SWIG_LONG_CONSTANT(STATUS_AUTH_DENIED, STATUS_AUTH_DENIED);
SWIG_LONG_CONSTANT(STATUS_TOO_MANY_FIELDS, STATUS_TOO_MANY_FIELDS);
SWIG_LONG_CONSTANT(STATUS_FILTERSTRING_ERROR, STATUS_FILTERSTRING_ERROR);
SWIG_LONG_CONSTANT(STATUS_INVALID_FIELDLENGTH, STATUS_INVALID_FIELDLENGTH);
SWIG_LONG_CONSTANT(STATUS_INVALID_KEYTYPE, STATUS_INVALID_KEYTYPE);
SWIG_LONG_CONSTANT(STATUS_LVAR_NOTE_NOT_LAST, STATUS_LVAR_NOTE_NOT_LAST);
SWIG_LONG_CONSTANT(STATUS_NODEF_FOR_CONVERT, STATUS_NODEF_FOR_CONVERT);
SWIG_LONG_CONSTANT(STATUS_TRD_NEED_VARLENGTH, STATUS_TRD_NEED_VARLENGTH);
SWIG_LONG_CONSTANT(STATUS_INVALID_VARIABLETABLE, STATUS_INVALID_VARIABLETABLE);
SWIG_LONG_CONSTANT(STATUS_AUTOINC_SPACE_ERROR, STATUS_AUTOINC_SPACE_ERROR);
SWIG_LONG_CONSTANT(STATUS_TOO_LONG_OWNERNAME, STATUS_TOO_LONG_OWNERNAME);
SWIG_LONG_CONSTANT(STATUS_CANT_DEL_FOR_REL, STATUS_CANT_DEL_FOR_REL);
SWIG_LONG_CONSTANT(STATUS_NO_AUTOINC_SPACE, STATUS_NO_AUTOINC_SPACE);
SWIG_LONG_CONSTANT(STATUS_INVALID_RECLEN, STATUS_INVALID_RECLEN);
SWIG_LONG_CONSTANT(STATUS_INVALID_FIELDVALUE, STATUS_INVALID_FIELDVALUE);
SWIG_LONG_CONSTANT(STATUS_INVALID_VALLEN, STATUS_INVALID_VALLEN);
SWIG_LONG_CONSTANT(STATUS_FIELDTYPE_NOTSUPPORT, STATUS_FIELDTYPE_NOTSUPPORT);
SWIG_LONG_CONSTANT(STATUS_SUCCESS, STATUS_SUCCESS);
SWIG_LONG_CONSTANT(STATUS_PROGRAM_ERROR, STATUS_PROGRAM_ERROR);
SWIG_LONG_CONSTANT(STATUS_IO_ERROR, STATUS_IO_ERROR);
SWIG_LONG_CONSTANT(STATUS_FILE_NOT_OPENED, STATUS_FILE_NOT_OPENED);
SWIG_LONG_CONSTANT(STATUS_NOT_FOUND_TI, STATUS_NOT_FOUND_TI);
SWIG_LONG_CONSTANT(STATUS_DUPPLICATE_KEYVALUE, STATUS_DUPPLICATE_KEYVALUE);
SWIG_LONG_CONSTANT(STATUS_INVALID_KEYNUM, STATUS_INVALID_KEYNUM);
SWIG_LONG_CONSTANT(STATUS_NO_CURRENT, STATUS_NO_CURRENT);
SWIG_LONG_CONSTANT(STATUS_EOF, STATUS_EOF);
SWIG_LONG_CONSTANT(STATUS_TABLE_NOTOPEN, STATUS_TABLE_NOTOPEN);
SWIG_LONG_CONSTANT(STATUS_REQUESTER_DEACTIVE, STATUS_REQUESTER_DEACTIVE);
SWIG_LONG_CONSTANT(STATUS_KEYBUFFERTOOSMALL, STATUS_KEYBUFFERTOOSMALL);
SWIG_LONG_CONSTANT(STATUS_BUFFERTOOSMALL, STATUS_BUFFERTOOSMALL);
SWIG_LONG_CONSTANT(STATUS_CANT_CREATE, STATUS_CANT_CREATE);
SWIG_LONG_CONSTANT(STATUS_NOSUPPORT_OP, STATUS_NOSUPPORT_OP);
SWIG_LONG_CONSTANT(STATUS_INVALID_BOOKMARK, STATUS_INVALID_BOOKMARK);
SWIG_LONG_CONSTANT(STATUS_ACCESS_DENIED, STATUS_ACCESS_DENIED);
SWIG_LONG_CONSTANT(STATUS_INVALID_OWNERNAME, STATUS_INVALID_OWNERNAME);
SWIG_LONG_CONSTANT(STATUS_TABLE_EXISTS_ERROR, STATUS_TABLE_EXISTS_ERROR);
SWIG_LONG_CONSTANT(STATUS_LIMMIT_OF_REJECT, STATUS_LIMMIT_OF_REJECT);
SWIG_LONG_CONSTANT(STATUS_WARKSPACE_TOO_SMALL, STATUS_WARKSPACE_TOO_SMALL);
SWIG_LONG_CONSTANT(STATUS_REACHED_FILTER_COND, STATUS_REACHED_FILTER_COND);
SWIG_LONG_CONSTANT(STATUS_INVALID_FIELD_OFFSET, STATUS_INVALID_FIELD_OFFSET);
SWIG_LONG_CONSTANT(STATUS_CHANGE_CONFLICT, STATUS_CHANGE_CONFLICT);
SWIG_LONG_CONSTANT(STATUS_INVALID_LOCKTYPE, STATUS_INVALID_LOCKTYPE);
SWIG_LONG_CONSTANT(STATUS_LOCK_ERROR, STATUS_LOCK_ERROR);
SWIG_LONG_CONSTANT(STATUS_FILE_LOCKED, STATUS_FILE_LOCKED);
SWIG_LONG_CONSTANT(STATUS_CANNOT_LOCK_TABLE, STATUS_CANNOT_LOCK_TABLE);
SWIG_LONG_CONSTANT(STATUS_INVALID_KEYNAME, STATUS_INVALID_KEYNAME);
SWIG_LONG_CONSTANT(STATUS_INVALID_DATASIZE, STATUS_INVALID_DATASIZE);
SWIG_LONG_CONSTANT(STATUS_INVALID_FIELDNAME, STATUS_INVALID_FIELDNAME);
SWIG_LONG_CONSTANT(ERROR_TD_INVALID_CLINETHOST, ERROR_TD_INVALID_CLINETHOST);
SWIG_LONG_CONSTANT(ERROR_NO_DATABASE, ERROR_NO_DATABASE);
SWIG_LONG_CONSTANT(ERROR_NOSPECIFY_TABLE, ERROR_NOSPECIFY_TABLE);
SWIG_LONG_CONSTANT(ERROR_LOAD_CLIBRARY, ERROR_LOAD_CLIBRARY);
SWIG_LONG_CONSTANT(ERROR_INDEX_RND_INIT, ERROR_INDEX_RND_INIT);
SWIG_LONG_CONSTANT(STATUS_ALREADY_INSNAPSHOT, STATUS_ALREADY_INSNAPSHOT);
SWIG_LONG_CONSTANT(STATUS_ALREADY_INTRANSACTION, STATUS_ALREADY_INTRANSACTION);
SWIG_LONG_CONSTANT(SERVER_CLIENT_NOT_COMPATIBLE, SERVER_CLIENT_NOT_COMPATIBLE);
SWIG_LONG_CONSTANT(NET_BAD_SRB_FORMAT, NET_BAD_SRB_FORMAT);
SWIG_LONG_CONSTANT(ERROR_TD_HOSTNAME_NOT_FOUND, ERROR_TD_HOSTNAME_NOT_FOUND);
SWIG_LONG_CONSTANT(ERROR_TD_CONNECTION_FAILURE, ERROR_TD_CONNECTION_FAILURE);
SWIG_LONG_CONSTANT(ERROR_TD_NOT_CONNECTED, ERROR_TD_NOT_CONNECTED);
SWIG_LONG_CONSTANT(ERROR_TD_NET_TIMEOUT, ERROR_TD_NET_TIMEOUT);
SWIG_LONG_CONSTANT(ERROR_TD_NET_REMOTE_DISCONNECT, ERROR_TD_NET_REMOTE_DISCONNECT);
SWIG_LONG_CONSTANT(ERROR_TD_NET_TOO_BIGDATA, ERROR_TD_NET_TOO_BIGDATA);
SWIG_LONG_CONSTANT(ERROR_TD_NET_OTHER, ERROR_TD_NET_OTHER);
SWIG_LONG_CONSTANT(ERROR_TD_C_CLIENT_UNKNOWN, ERROR_TD_C_CLIENT_UNKNOWN);
SWIG_LONG_CONSTANT(ERROR_TD_RECONNECTED, ERROR_TD_RECONNECTED);
SWIG_STRING_CONSTANT(TRANSACTD_SCHEMANAME, TRANSACTD_SCHEMANAME);
SWIG_LONG_CONSTANT(TYPE_SCHEMA_BDF, TYPE_SCHEMA_BDF);
SWIG_LONG_CONSTANT(TYPE_SCHEMA_DDF, TYPE_SCHEMA_DDF);
SWIG_LONG_CONSTANT(FILTER_CURRENT_TYPE_NOTINC, FILTER_CURRENT_TYPE_NOTINC);
SWIG_LONG_CONSTANT(FILTER_CURRENT_TYPE_INC, FILTER_CURRENT_TYPE_INC);
SWIG_LONG_CONSTANT(FILTER_CURRENT_TYPE_NOBOOKMARK, FILTER_CURRENT_TYPE_NOBOOKMARK);
SWIG_STRING_CONSTANT(NIS_FILED_NAME, NIS_FILED_NAME);
SWIG_LONG_CONSTANT(OWNERNAME_SIZE, OWNERNAME_SIZE);
SWIG_LONG_CONSTANT(TD_BACKUP_START, TD_BACKUP_START);
SWIG_LONG_CONSTANT(TD_BACKUP_END, TD_BACKUP_END);
SWIG_LONG_CONSTANT(TD_BACKUP_MODE_OK, TD_BACKUP_MODE_OK);
SWIG_LONG_CONSTANT(TD_BACKUP_MODE_NOT_SUPPORT, TD_BACKUP_MODE_NOT_SUPPORT);
SWIG_LONG_CONSTANT(TD_BACKUP_MODE_BUSY, TD_BACKUP_MODE_BUSY);
SWIG_LONG_CONSTANT(TD_BACKUP_MODE_NOT_PERMIT, TD_BACKUP_MODE_NOT_PERMIT);
SWIG_LONG_CONSTANT(TD_BACKUP_MODE_SERVER_ERROR, TD_BACKUP_MODE_SERVER_ERROR);
SWIG_LONG_CONSTANT(MYSQL_USERNAME_MAX, MYSQL_USERNAME_MAX);
SWIG_LONG_CONSTANT(HST_OPTION_NO_SCRAMBLE, HST_OPTION_NO_SCRAMBLE);
SWIG_STRING_CONSTANT(CPP_INTERFACE_VER_MAJOR, CPP_INTERFACE_VER_MAJOR);
SWIG_STRING_CONSTANT(CPP_INTERFACE_VER_MINOR, CPP_INTERFACE_VER_MINOR);
SWIG_STRING_CONSTANT(CPP_INTERFACE_VER_RELEASE, CPP_INTERFACE_VER_RELEASE);
SWIG_LONG_CONSTANT(TRANSACTD_VER_MAJOR, TRANSACTD_VER_MAJOR);
SWIG_LONG_CONSTANT(TRANSACTD_VER_MINOR, TRANSACTD_VER_MINOR);
SWIG_LONG_CONSTANT(TRANSACTD_VER_RELEASE, TRANSACTD_VER_RELEASE);
SWIG_LONG_CONSTANT(MAX_KEY_SEGMENT, MAX_KEY_SEGMENT);
SWIG_LONG_CONSTANT(eCend, bzs::db::protocol::tdap::eCend);
SWIG_LONG_CONSTANT(eCand, bzs::db::protocol::tdap::eCand);
SWIG_LONG_CONSTANT(eCor, bzs::db::protocol::tdap::eCor);
SWIG_LONG_CONSTANT(eEqual, bzs::db::protocol::tdap::eEqual);
SWIG_LONG_CONSTANT(eGreater, bzs::db::protocol::tdap::eGreater);
SWIG_LONG_CONSTANT(eLess, bzs::db::protocol::tdap::eLess);
SWIG_LONG_CONSTANT(eNotEq, bzs::db::protocol::tdap::eNotEq);
SWIG_LONG_CONSTANT(eGreaterEq, bzs::db::protocol::tdap::eGreaterEq);
SWIG_LONG_CONSTANT(eLessEq, bzs::db::protocol::tdap::eLessEq);
SWIG_LONG_CONSTANT(nstable_changeCurrentCc, bzs::db::protocol::tdap::client::nstable::changeCurrentCc);
SWIG_LONG_CONSTANT(nstable_changeCurrentNcc, bzs::db::protocol::tdap::client::nstable::changeCurrentNcc);
SWIG_LONG_CONSTANT(nstable_changeInKey, bzs::db::protocol::tdap::client::nstable::changeInKey);
SWIG_LONG_CONSTANT(nstable_findForword, bzs::db::protocol::tdap::client::nstable::findForword);
SWIG_LONG_CONSTANT(nstable_findBackForword, bzs::db::protocol::tdap::client::nstable::findBackForword);
SWIG_LONG_CONSTANT(nstable_findContinue, bzs::db::protocol::tdap::client::nstable::findContinue);
SWIG_LONG_CONSTANT(nstable_inkey, bzs::db::protocol::tdap::client::nstable::inkey);
SWIG_LONG_CONSTANT(TABLE_NUM_TMP, TABLE_NUM_TMP);
SWIG_LONG_CONSTANT(eMinlen, bzs::db::protocol::tdap::client::eMinlen);
SWIG_LONG_CONSTANT(eMaxlen, bzs::db::protocol::tdap::client::eMaxlen);
SWIG_LONG_CONSTANT(eDefaultlen, bzs::db::protocol::tdap::client::eDefaultlen);
SWIG_LONG_CONSTANT(eDecimals, bzs::db::protocol::tdap::client::eDecimals);
SWIG_STRING_CONSTANT(null_str, null_str);
SWIG_LONG_CONSTANT(KEYVALUE_PTR, KEYVALUE_PTR);
SWIG_LONG_CONSTANT(KEYVALUE_STR, KEYVALUE_STR);
SWIG_LONG_CONSTANT(KEYVALUE_NEED_COPY, KEYVALUE_NEED_COPY);
SWIG_LONG_CONSTANT(KEYVALUE_STR_NEED_COPY, KEYVALUE_STR_NEED_COPY);
SWIG_LONG_CONSTANT(queryBase_none, bzs::db::protocol::tdap::client::queryBase::none);
SWIG_LONG_CONSTANT(queryBase_joinHasOneOrHasMany, bzs::db::protocol::tdap::client::queryBase::joinHasOneOrHasMany);
SWIG_LONG_CONSTANT(queryBase_combineCondition, bzs::db::protocol::tdap::client::queryBase::combineCondition);
SWIG_LONG_CONSTANT(MAX_CHAR_INFO, MAX_CHAR_INFO);
SWIG_LONG_CONSTANT(CHARSET_LATIN1, CHARSET_LATIN1);
SWIG_LONG_CONSTANT(CHARSET_CP850, CHARSET_CP850);
SWIG_LONG_CONSTANT(CHARSET_ASCII, CHARSET_ASCII);
SWIG_LONG_CONSTANT(CHARSET_SJIS, CHARSET_SJIS);
SWIG_LONG_CONSTANT(CHARSET_UTF8, CHARSET_UTF8);
SWIG_LONG_CONSTANT(CHARSET_USC2, CHARSET_USC2);
SWIG_LONG_CONSTANT(CHARSET_UTF8B4, CHARSET_UTF8B4);
SWIG_LONG_CONSTANT(CHARSET_UTF16LE, CHARSET_UTF16LE);
SWIG_LONG_CONSTANT(CHARSET_CP932, CHARSET_CP932);
SWIG_LONG_CONSTANT(CHARSET_EUCJ, CHARSET_EUCJ);
SWIG_LONG_CONSTANT(ROW_MEM_BLOCK_RESERVE, ROW_MEM_BLOCK_RESERVE);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(transactd)
{
/* rinit section */

/* vinit subsection */
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::MYSQL_FDNAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::MYSQL_FDNAME_SIZE", sizeof("bzs::db::protocol::tdap::MYSQL_FDNAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::MYSQL_TBNAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::MYSQL_TBNAME_SIZE", sizeof("bzs::db::protocol::tdap::MYSQL_TBNAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::PERVASIVE_FDNAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::PERVASIVE_FDNAME_SIZE", sizeof("bzs::db::protocol::tdap::PERVASIVE_FDNAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::FIELD_NAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::FIELD_NAME_SIZE", sizeof("bzs::db::protocol::tdap::FIELD_NAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::TABLE_NAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::TABLE_NAME_SIZE", sizeof("bzs::db::protocol::tdap::TABLE_NAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::FILE_NAME_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::FILE_NAME_SIZE", sizeof("bzs::db::protocol::tdap::FILE_NAME_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = bzs::db::protocol::tdap::TABLEDEF_FILLER_SIZE;
  zend_hash_add(&EG(symbol_table), (char*)"bzs::db::protocol::tdap::TABLEDEF_FILLER_SIZE", sizeof("bzs::db::protocol::tdap::TABLEDEF_FILLER_SIZE"), (void *)&z_var, sizeof(zval *), NULL);
}
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(transactd)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(transactd_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(transactd)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(transactd)
{

  php_info_print_table_start();
  php_info_print_table_row(2, "Version", CPP_INTERFACE_VER_MAJOR "." CPP_INTERFACE_VER_MINOR "." CPP_INTERFACE_VER_RELEASE);
  php_info_print_table_row(2, "Required Module", TRANSACTD_PHP_REQUIRED_MODULE_PREFIX TDCLC_LIBNAME);
  php_info_print_table_end();

}
/* end init section */
