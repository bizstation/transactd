<?php
namespace BizStation\Transactd;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('transactd')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_transactd.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('transactd.so')) return;
    } else {
      if (!dl('transactd.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class transactd {
	const CP_ACP = CP_ACP;

	const CP_UTF8 = CP_UTF8;

	const POS_BLOCK_SIZE = POS_BLOCK_SIZE;

	const MAX_KEYLEN = MAX_KEYLEN;

	const TD_OPENTABLE = TD_OPENTABLE;

	const TD_CLOSETABLE = TD_CLOSETABLE;

	const TD_REC_INSERT = TD_REC_INSERT;

	const TD_REC_UPDATE = TD_REC_UPDATE;

	const TD_REC_DELETE = TD_REC_DELETE;

	const TD_KEY_SEEK = TD_KEY_SEEK;

	const TD_KEY_NEXT = TD_KEY_NEXT;

	const TD_KEY_PREV = TD_KEY_PREV;

	const TD_KEY_AFTER = TD_KEY_AFTER;

	const TD_KEY_OR_AFTER = TD_KEY_OR_AFTER;

	const TD_KEY_BEFORE = TD_KEY_BEFORE;

	const TD_KEY_OR_BEFORE = TD_KEY_OR_BEFORE;

	const TD_KEY_FIRST = TD_KEY_FIRST;

	const TD_KEY_LAST = TD_KEY_LAST;

	const TD_CREATETABLE = TD_CREATETABLE;

	const TD_TABLE_INFO = TD_TABLE_INFO;

	const TD_SETDIRECTORY = TD_SETDIRECTORY;

	const TD_GETDIRECTORY = TD_GETDIRECTORY;

	const TD_BEGIN_TRANSACTION = TD_BEGIN_TRANSACTION;

	const TD_END_TRANSACTION = TD_END_TRANSACTION;

	const TD_ABORT_TRANSACTION = TD_ABORT_TRANSACTION;

	const TD_BOOKMARK = TD_BOOKMARK;

	const TD_MOVE_BOOKMARK = TD_MOVE_BOOKMARK;

	const TD_POS_NEXT = TD_POS_NEXT;

	const TD_STOP_ENGINE = TD_STOP_ENGINE;

	const TD_VERSION = TD_VERSION;

	const TD_UNLOCK = TD_UNLOCK;

	const TD_RESET_CLIENT = TD_RESET_CLIENT;

	const TD_SET_OWNERNAME = TD_SET_OWNERNAME;

	const TD_CLEAR_OWNERNAME = TD_CLEAR_OWNERNAME;

	const TD_BUILD_INDEX = TD_BUILD_INDEX;

	const TD_DROP_INDEX = TD_DROP_INDEX;

	const TD_POS_FIRST = TD_POS_FIRST;

	const TD_POS_LAST = TD_POS_LAST;

	const TD_POS_PREV = TD_POS_PREV;

	const TD_KEY_NEXT_MULTI = TD_KEY_NEXT_MULTI;

	const TD_KEY_PREV_MULTI = TD_KEY_PREV_MULTI;

	const TD_POS_NEXT_MULTI = TD_POS_NEXT_MULTI;

	const TD_POS_PREV_MULTI = TD_POS_PREV_MULTI;

	const TD_INSERT_BULK = TD_INSERT_BULK;

	const TD_BACKUPMODE = TD_BACKUPMODE;

	const TD_MOVE_PER = TD_MOVE_PER;

	const TD_GET_PER = TD_GET_PER;

	const TD_UPDATE_PART = TD_UPDATE_PART;

	const TD_KEY_EQUAL_KO = TD_KEY_EQUAL_KO;

	const TD_KEY_NEXT_KO = TD_KEY_NEXT_KO;

	const TD_KEY_PREV_KO = TD_KEY_PREV_KO;

	const TD_KEY_GT_KO = TD_KEY_GT_KO;

	const TD_KEY_GE_KO = TD_KEY_GE_KO;

	const TD_KEY_LT_KO = TD_KEY_LT_KO;

	const TD_KEY_LE_KO = TD_KEY_LE_KO;

	const TD_KEY_FIRST_KO = TD_KEY_FIRST_KO;

	const TD_KEY_LAST_KO = TD_KEY_LAST_KO;

	const TD_CREATE_TEMP = TD_CREATE_TEMP;

	const TD_TABLE_INFO_EX = TD_TABLE_INFO_EX;

	const TD_REC_UPDATEATKEY = TD_REC_UPDATEATKEY;

	const TD_REC_DELLETEATKEY = TD_REC_DELLETEATKEY;

	const TD_KEY_GE_NEXT_MULTI = TD_KEY_GE_NEXT_MULTI;

	const TD_KEY_LE_PREV_MULTI = TD_KEY_LE_PREV_MULTI;

	const TD_CONNECT = TD_CONNECT;

	const TD_BEGIN_SHAPSHOT = TD_BEGIN_SHAPSHOT;

	const TD_END_SNAPSHOT = TD_END_SNAPSHOT;

	const TD_AUTOMEKE_SCHEMA = TD_AUTOMEKE_SCHEMA;

	const TD_GETSERVER_CHARSET = TD_GETSERVER_CHARSET;

	const TD_ADD_SENDBLOB = TD_ADD_SENDBLOB;

	const TD_GET_BLOB_BUF = TD_GET_BLOB_BUF;

	const TD_STASTISTICS = TD_STASTISTICS;

	const TD_KEY_SEEK_MULTI = TD_KEY_SEEK_MULTI;

	const CR_SUBOP_DROP = CR_SUBOP_DROP;

	const CR_SUBOP_RENAME = CR_SUBOP_RENAME;

	const CR_SUBOP_SWAPNAME = CR_SUBOP_SWAPNAME;

	const CR_SUBOP_BY_FILESPEC = CR_SUBOP_BY_FILESPEC;

	const CR_SUBOP_BY_FILESPEC_NOCKECK = CR_SUBOP_BY_FILESPEC_NOCKECK;

	const CR_SUBOP_BY_TABLEDEF = CR_SUBOP_BY_TABLEDEF;

	const CR_SUBOP_BY_TABLEDEF_NOCKECK = CR_SUBOP_BY_TABLEDEF_NOCKECK;

	const CR_SUB_FLAG_EXISTCHECK = CR_SUB_FLAG_EXISTCHECK;

	const TD_ASBLOB_ENDROW = TD_ASBLOB_ENDROW;

	const TD_STSTCS_READ = TD_STSTCS_READ;

	const TD_STSTCS_DISCONNECT_ONE = TD_STSTCS_DISCONNECT_ONE;

	const TD_STSTCS_DISCONNECT_ALL = TD_STSTCS_DISCONNECT_ALL;

	const LG_SUBOP_CONNECT = LG_SUBOP_CONNECT;

	const LG_SUBOP_DISCONNECT = LG_SUBOP_DISCONNECT;

	const LG_SUBOP_NEWCONNECT = LG_SUBOP_NEWCONNECT;

	const ft_string = ft_string;

	const ft_integer = ft_integer;

	const ft_float = ft_float;

	const ft_date = ft_date;

	const ft_time = ft_time;

	const ft_decimal = ft_decimal;

	const ft_money = ft_money;

	const ft_logical = ft_logical;

	const ft_numeric = ft_numeric;

	const ft_bfloat = ft_bfloat;

	const ft_lstring = ft_lstring;

	const ft_zstring = ft_zstring;

	const ft_note = ft_note;

	const ft_lvar = ft_lvar;

	const ft_uinteger = ft_uinteger;

	const ft_autoinc = ft_autoinc;

	const ft_bit = ft_bit;

	const ft_numericsts = ft_numericsts;

	const ft_numericsa = ft_numericsa;

	const ft_currency = ft_currency;

	const ft_timestamp = ft_timestamp;

	const ft_blob = ft_blob;

	const ft_reserve22 = ft_reserve22;

	const ft_reserve23 = ft_reserve23;

	const ft_reserve24 = ft_reserve24;

	const ft_wstring = ft_wstring;

	const ft_wzstring = ft_wzstring;

	const ft_guid = ft_guid;

	const ft_datetime = ft_datetime;

	const ft_myvarchar = ft_myvarchar;

	const ft_myvarbinary = ft_myvarbinary;

	const ft_mywvarchar = ft_mywvarchar;

	const ft_mywvarbinary = ft_mywvarbinary;

	const ft_mychar = ft_mychar;

	const ft_mywchar = ft_mywchar;

	const ft_mydate = ft_mydate;

	const ft_mytime = ft_mytime;

	const ft_mydatetime = ft_mydatetime;

	const ft_mytimestamp = ft_mytimestamp;

	const ft_mytext = ft_mytext;

	const ft_myblob = ft_myblob;

	const ft_autoIncUnsigned = ft_autoIncUnsigned;

	const ft_myfixedbinary = ft_myfixedbinary;

	const ft_nullindicator = ft_nullindicator;

	const eEqual = 1;

	const eGreater = 2;

	const eLess = 3;

	const eNotEq = 4;

	const eGreaterEq = 5;

	const eLessEq = 6;

	const charset_none = charset_none;

	const charset_latin1 = charset_latin1;

	const charset_ascii = charset_ascii;

	const charset_sjis = charset_sjis;

	const charset_cp932 = charset_cp932;

	const charset_utf8 = charset_utf8;

	const charset_utf8mb4 = charset_utf8mb4;

	const charset_usc2 = charset_usc2;

	const CMPLOGICAL_VAR_COMP_ALL = CMPLOGICAL_VAR_COMP_ALL;

	const CMPLOGICAL_CMPACS = CMPLOGICAL_CMPACS;

	const CMPLOGICAL_FIELD = CMPLOGICAL_FIELD;

	const CMPLOGICAL_CASEINSENSITIVE = CMPLOGICAL_CASEINSENSITIVE;

	const LOCK_SINGLE_WAIT = LOCK_SINGLE_WAIT;

	const LOCK_SINGLE_NOWAIT = LOCK_SINGLE_NOWAIT;

	const LOCK_MULTI_WAIT = LOCK_MULTI_WAIT;

	const LOCK_MULTI_NOWAIT = LOCK_MULTI_NOWAIT;

	const NOWAIT_WRITE = NOWAIT_WRITE;

	const PARALLEL_TRN = PARALLEL_TRN;

	const TD_OPEN_NORMAL = TD_OPEN_NORMAL;

	const TD_OPEN_READONLY = TD_OPEN_READONLY;

	const TD_OPEN_EXCLUSIVE = TD_OPEN_EXCLUSIVE;

	const BT_AL_LEFT = BT_AL_LEFT;

	const BT_AL_CENTER = BT_AL_CENTER;

	const BT_AL_RIGHT = BT_AL_RIGHT;

	const STATUS_TABLE_YET_OPEN = STATUS_TABLE_YET_OPEN;

	const STATUS_DURING_TRANSACTION = STATUS_DURING_TRANSACTION;

	const STATUS_NO_ACR_UPDATE_DELETE = STATUS_NO_ACR_UPDATE_DELETE;

	const STATUS_NO_ACR_INSERT = STATUS_NO_ACR_INSERT;

	const STATUS_NO_ACR_READ = STATUS_NO_ACR_READ;

	const STATUS_CANT_ALLOC_MEMORY = STATUS_CANT_ALLOC_MEMORY;

	const STATUS_USE_KEYFIELD = STATUS_USE_KEYFIELD;

	const STATUS_TOO_MANY_TABLES = STATUS_TOO_MANY_TABLES;

	const STATUS_INVARID_PRM_KEY_NUM = STATUS_INVARID_PRM_KEY_NUM;

	const STATUS_INVARID_PNT_KEY_NUM = STATUS_INVARID_PNT_KEY_NUM;

	const STATUS_INVARID_REP_KEY_NUM = STATUS_INVARID_REP_KEY_NUM;

	const STATUS_INVARID_FIELD_IDX = STATUS_INVARID_FIELD_IDX;

	const STATUS_ALREADY_DELETED = STATUS_ALREADY_DELETED;

	const STATUS_LMITS_MAX_TABLES = STATUS_LMITS_MAX_TABLES;

	const STATUS_DB_YET_OPEN = STATUS_DB_YET_OPEN;

	const STATUS_TABLENAME_NOTFOUND = STATUS_TABLENAME_NOTFOUND;

	const STATUS_DIFFERENT_DBVERSION = STATUS_DIFFERENT_DBVERSION;

	const STATUS_DUPLICATE_FIELDNAME = STATUS_DUPLICATE_FIELDNAME;

	const STATUS_INVALID_TABLE_IDX = STATUS_INVALID_TABLE_IDX;

	const STATUS_AUTH_DENIED = STATUS_AUTH_DENIED;

	const STATUS_TOO_MANY_FIELDS = STATUS_TOO_MANY_FIELDS;

	const STATUS_FILTERSTRING_ERROR = STATUS_FILTERSTRING_ERROR;

	const STATUS_INVALID_FIELDLENGTH = STATUS_INVALID_FIELDLENGTH;

	const STATUS_INVALID_KEYTYPE = STATUS_INVALID_KEYTYPE;

	const STATUS_LVAR_NOTE_NOT_LAST = STATUS_LVAR_NOTE_NOT_LAST;

	const STATUS_NODEF_FOR_CONVERT = STATUS_NODEF_FOR_CONVERT;

	const STATUS_TRD_NEED_VARLENGTH = STATUS_TRD_NEED_VARLENGTH;

	const STATUS_INVALID_VARIABLETABLE = STATUS_INVALID_VARIABLETABLE;

	const STATUS_AUTOINC_SPACE_ERROR = STATUS_AUTOINC_SPACE_ERROR;

	const STATUS_TOO_LONG_OWNERNAME = STATUS_TOO_LONG_OWNERNAME;

	const STATUS_CANT_DEL_FOR_REL = STATUS_CANT_DEL_FOR_REL;

	const STATUS_NO_AUTOINC_SPACE = STATUS_NO_AUTOINC_SPACE;

	const STATUS_INVALID_RECLEN = STATUS_INVALID_RECLEN;

	const STATUS_INVALID_FIELDVALUE = STATUS_INVALID_FIELDVALUE;

	const STATUS_INVALID_VALLEN = STATUS_INVALID_VALLEN;

	const STATUS_FIELDTYPE_NOTSUPPORT = STATUS_FIELDTYPE_NOTSUPPORT;

	const STATUS_SUCCESS = STATUS_SUCCESS;

	const STATUS_PROGRAM_ERROR = STATUS_PROGRAM_ERROR;

	const STATUS_IO_ERROR = STATUS_IO_ERROR;

	const STATUS_FILE_NOT_OPENED = STATUS_FILE_NOT_OPENED;

	const STATUS_NOT_FOUND_TI = STATUS_NOT_FOUND_TI;

	const STATUS_DUPPLICATE_KEYVALUE = STATUS_DUPPLICATE_KEYVALUE;

	const STATUS_INVALID_KEYNUM = STATUS_INVALID_KEYNUM;

	const STATUS_NO_CURRENT = STATUS_NO_CURRENT;

	const STATUS_EOF = STATUS_EOF;

	const STATUS_TABLE_NOTOPEN = STATUS_TABLE_NOTOPEN;

	const STATUS_REQUESTER_DEACTIVE = STATUS_REQUESTER_DEACTIVE;

	const STATUS_KEYBUFFERTOOSMALL = STATUS_KEYBUFFERTOOSMALL;

	const STATUS_BUFFERTOOSMALL = STATUS_BUFFERTOOSMALL;

	const STATUS_CANT_CREATE = STATUS_CANT_CREATE;

	const STATUS_NOSUPPORT_OP = STATUS_NOSUPPORT_OP;

	const STATUS_INVALID_BOOKMARK = STATUS_INVALID_BOOKMARK;

	const STATUS_ACCESS_DENIED = STATUS_ACCESS_DENIED;

	const STATUS_INVALID_OWNERNAME = STATUS_INVALID_OWNERNAME;

	const STATUS_TABLE_EXISTS_ERROR = STATUS_TABLE_EXISTS_ERROR;

	const STATUS_LIMMIT_OF_REJECT = STATUS_LIMMIT_OF_REJECT;

	const STATUS_WARKSPACE_TOO_SMALL = STATUS_WARKSPACE_TOO_SMALL;

	const STATUS_REACHED_FILTER_COND = STATUS_REACHED_FILTER_COND;

	const STATUS_INVALID_FIELD_OFFSET = STATUS_INVALID_FIELD_OFFSET;

	const STATUS_CHANGE_CONFLICT = STATUS_CHANGE_CONFLICT;

	const STATUS_INVALID_LOCKTYPE = STATUS_INVALID_LOCKTYPE;

	const STATUS_LOCK_ERROR = STATUS_LOCK_ERROR;

	const STATUS_FILE_LOCKED = STATUS_FILE_LOCKED;

	const STATUS_CANNOT_LOCK_TABLE = STATUS_CANNOT_LOCK_TABLE;

	const STATUS_INVALID_KEYNAME = STATUS_INVALID_KEYNAME;

	const STATUS_INVALID_DATASIZE = STATUS_INVALID_DATASIZE;

	const STATUS_INVALID_FIELDNAME = STATUS_INVALID_FIELDNAME;

	const ERROR_TD_INVALID_CLINETHOST = ERROR_TD_INVALID_CLINETHOST;

	const ERROR_NOSPECIFY_TABLE = ERROR_NOSPECIFY_TABLE;

	const ERROR_LOAD_CLIBRARY = ERROR_LOAD_CLIBRARY;

	const SERVER_CLIENT_NOT_COMPATIBLE = SERVER_CLIENT_NOT_COMPATIBLE;

	const NET_BAD_SRB_FORMAT = NET_BAD_SRB_FORMAT;

	const ERROR_TD_HOSTNAME_NOT_FOUND = ERROR_TD_HOSTNAME_NOT_FOUND;

	const ERROR_TD_CONNECTION_FAILURE = ERROR_TD_CONNECTION_FAILURE;

	const ERROR_TD_NOT_CONNECTED = ERROR_TD_NOT_CONNECTED;

	const TRANSACTD_SCHEMANAME = TRANSACTD_SCHEMANAME;

	const FILTER_CURRENT_TYPE_NOTINC = FILTER_CURRENT_TYPE_NOTINC;

	const FILTER_CURRENT_TYPE_INC = FILTER_CURRENT_TYPE_INC;

	const FILTER_CURRENT_TYPE_NOBOOKMARK = FILTER_CURRENT_TYPE_NOBOOKMARK;

	const NIS_FILED_NAME = NIS_FILED_NAME;

	const OWNERNAME_SIZE = OWNERNAME_SIZE;

	const TD_BACKUP_MODE_OK = TD_BACKUP_MODE_OK;

	const TD_BACKUP_MODE_NOT_SUPPORT = TD_BACKUP_MODE_NOT_SUPPORT;

	const TD_BACKUP_MODE_BUSY = TD_BACKUP_MODE_BUSY;

	const C_INTERFACE_VER_MAJOR = C_INTERFACE_VER_MAJOR;

	const C_INTERFACE_VER_MINOR = C_INTERFACE_VER_MINOR;

	const C_INTERFACE_VER_RELEASE = C_INTERFACE_VER_RELEASE;

	const C_INTERFACE_VERSTR = C_INTERFACE_VERSTR;

	const TDCLC_LIBNAME = TDCLC_LIBNAME;

	const TD_CPP_LIB_PRE = TD_CPP_LIB_PRE;

	const TD_LIB_PART = TD_LIB_PART;

	const CPP_INTERFACE_VER_MAJOR = CPP_INTERFACE_VER_MAJOR;

	const CPP_INTERFACE_VER_MINOR = CPP_INTERFACE_VER_MINOR;

	const CPP_INTERFACE_VER_RELEASE = CPP_INTERFACE_VER_RELEASE;

	const TRANSACTD_VER_MAJOR = TRANSACTD_VER_MAJOR;

	const TRANSACTD_VER_MINOR = TRANSACTD_VER_MINOR;

	const TRANSACTD_VER_RELEASE = TRANSACTD_VER_RELEASE;

	const MAX_KEY_SEGMENT = MAX_KEY_SEGMENT;

	static function MYSQL_FDNAME_SIZE_get() {
		return MYSQL_FDNAME_SIZE_get();
	}

	static function MYSQL_TBNAME_SIZE_get() {
		return MYSQL_TBNAME_SIZE_get();
	}

	static function PERVASIVE_FDNAME_SIZE_get() {
		return PERVASIVE_FDNAME_SIZE_get();
	}

	static function FIELD_NAME_SIZE_get() {
		return FIELD_NAME_SIZE_get();
	}

	static function TABLE_NAME_SIZE_get() {
		return TABLE_NAME_SIZE_get();
	}

	static function FILE_NAME_SIZE_get() {
		return FILE_NAME_SIZE_get();
	}

	static function TABLEDEF_FILLER_SIZE_get() {
		return TABLEDEF_FILLER_SIZE_get();
	}

	static function getTypeName($type) {
		return getTypeName($type);
	}

	static function getTypeAlign($type) {
		return getTypeAlign($type);
	}

	static function lenByCharnum($type,$charsetIndex,$charnum) {
		return lenByCharnum($type,$charsetIndex,$charnum);
	}

	static function isStringType($type) {
		return isStringType($type);
	}

	const eCend = 0;

	const eCand = eCand;

	const eCor = eCor;

	static function getFilterLogicTypeCode($cmpstr) {
		return getFilterLogicTypeCode($cmpstr);
	}

	const TABLE_NUM_TMP = TABLE_NUM_TMP;

	const eMinlen = 0;

	const eMaxlen = eMaxlen;

	const eDefaultlen = eDefaultlen;

	const eDecimals = eDecimals;

	const null_str = null_str;

	static function mra_nojoin_get() {
		return mra_nojoin_get();
	}

	static function mra_first_get() {
		return mra_first_get();
	}

	static function mra_nextrows_get() {
		return mra_nextrows_get();
	}

	static function mra_innerjoin_get() {
		return mra_innerjoin_get();
	}

	static function mra_outerjoin_get() {
		return mra_outerjoin_get();
	}

	static function mra_current_block_get() {
		return mra_current_block_get();
	}

	const MAX_CHAR_INFO = MAX_CHAR_INFO;

	const CHARSET_LATIN1 = CHARSET_LATIN1;

	const CHARSET_CP850 = CHARSET_CP850;

	const CHARSET_ASCII = CHARSET_ASCII;

	const CHARSET_SJIS = CHARSET_SJIS;

	const CHARSET_UTF8 = CHARSET_UTF8;

	const CHARSET_USC2 = CHARSET_USC2;

	const CHARSET_UTF8B4 = CHARSET_UTF8B4;

	const CHARSET_UTF16LE = CHARSET_UTF16LE;

	const CHARSET_CP932 = CHARSET_CP932;

	const CHARSET_EUCJ = CHARSET_EUCJ;

	static function charsize($index) {
		return charsize($index);
	}

	static function charsetName($index) {
		return charsetName($index);
	}

	static function charsetIndex($name_or_codePage) {
		return charsetIndex($name_or_codePage);
	}

	static function codePage($charsetIndex) {
		return codePage($charsetIndex);
	}

	static function atobtrd($date) {
		$r=atobtrd($date);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new btrDate($r);
		}
		return $r;
	}

	static function atobtrt($p) {
		$r=atobtrt($p);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new btrTime($r);
		}
		return $r;
	}

	static function btrdtoa($d_or_date,$type_vb=false) {
		$r=btrdtoa($d_or_date,$type_vb);
		return $r;
	}

	static function btrttoa($t_or_time,$type_vb=false) {
		$r=btrttoa($t_or_time,$type_vb);
		return $r;
	}

	static function btrstoa($d,$type_vb=false) {
		return btrstoa($d,$type_vb);
	}

	static function atobtrs($p) {
		$r=atobtrs($p);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new btrDateTime($r);
		}
		return $r;
	}

	static function c_str($d) {
		return c_str($d);
	}

	static function getNowDate() {
		return getNowDate();
	}

	static function getNowTime() {
		return getNowTime();
	}

	static function dummyFd() {
		$r=dummyFd();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddef($r);
		}
		return $r;
	}

	const ROW_MEM_BLOCK_RESERVE = ROW_MEM_BLOCK_RESERVE;

	static function getFieldType($arg1) {
		return getFieldType($arg1);
	}

	static function new_fieldsBase_p_p() {
		return new_fieldsBase_p_p();
	}

	static function copy_fieldsBase_p_p($value) {
		return copy_fieldsBase_p_p($value);
	}

	static function delete_fieldsBase_p_p($obj) {
		delete_fieldsBase_p_p($obj);
	}

	static function fieldsBase_p_p_assign($obj,$value) {
		fieldsBase_p_p_assign($obj,$value);
	}

	static function fieldsBase_p_p_value($obj) {
		$r=fieldsBase_p_p_value($obj);
		$this->_cPtr = $r;
		return $this;
	}
}

/* PHP Proxy Classes */
class trdVersiton {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'trdVersiton_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('trdVersiton_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'trdVersiton_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_trdVersiton') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_trdVersiton();
	}
}

class FLAGS {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'FLAGS_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('FLAGS_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'FLAGS_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__FLAGS') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FLAGS();
	}
}

class keySegment {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'fieldNum') return keySegment_fieldNum_set($this->_cPtr,$value);
		if ($var === 'flags') return keySegment_flags_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('keySegment_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'flags') return new FLAGS(keySegment_flags_get($this->_cPtr));
		if ($var === 'fieldNum') return keySegment_fieldNum_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__keySegment') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_keySegment();
	}
}

class keydef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'keydef_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('keydef_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'segments') return new keySegment(keydef_segments_get($this->_cPtr));
		if ($var === 'keyNumber') return keydef_keyNumber_get($this->_cPtr);
		if ($var === 'segmentCount') return keydef_segmentCount_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function segment($index) {
		$r=keydef_segment($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new keySegment($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__keydef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_keydef();
	}
}

class fielddef_t_my {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'fielddef_t_my_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('fielddef_t_my_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'fielddef_t_my_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__fielddef_tT_64_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fielddef_t_my();
	}
}

class fielddef extends fielddef_t_my {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		fielddef_t_my::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return fielddef_t_my::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return fielddef_t_my::__get($var);
	}

	function name() {
		return fielddef_name($this->_cPtr);
	}

	function setName($s) {
		fielddef_setName($this->_cPtr,$s);
	}

	function nameA() {
		return fielddef_nameA($this->_cPtr);
	}

	function setNameA($s) {
		fielddef_setNameA($this->_cPtr,$s);
	}

	function typeName() {
		return fielddef_typeName($this->_cPtr);
	}

	function align() {
		return fielddef_align($this->_cPtr);
	}

	function setLenByCharnum($charnum) {
		fielddef_setLenByCharnum($this->_cPtr,$charnum);
	}

	function codePage() {
		return fielddef_codePage($this->_cPtr);
	}

	function getKeyValueFromKeybuf($from,$data,$size) {
		return fielddef_getKeyValueFromKeybuf($this->_cPtr,$from,$data,$size);
	}

	function varLenBytes() {
		return fielddef_varLenBytes($this->_cPtr);
	}

	function blobLenBytes() {
		return fielddef_blobLenBytes($this->_cPtr);
	}

	function maxVarDatalen() {
		return fielddef_maxVarDatalen($this->_cPtr);
	}

	function isStringType() {
		return fielddef_isStringType($this->_cPtr);
	}

	function charNum() {
		return fielddef_charNum($this->_cPtr);
	}

	function setCharsetIndex($index) {
		fielddef_setCharsetIndex($this->_cPtr,$index);
	}

	function charsetIndex() {
		return fielddef_charsetIndex($this->_cPtr);
	}

	function unPackCopy($dest,$src) {
		return fielddef_unPackCopy($this->_cPtr,$dest,$src);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__fielddef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_fielddef();
	}
}

class tabledef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'tabledef_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('tabledef_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'keyDefs') return new keydef(tabledef_keyDefs_get($this->_cPtr));
		if ($var === 'fieldDefs') return new fielddef(tabledef_fieldDefs_get($this->_cPtr));
		if ($var === 'flags') return new FLAGS(tabledef_flags_get($this->_cPtr));
		if ($var === 'parent') return new dbdef(tabledef_parent_get($this->_cPtr));
		$func = 'tabledef_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__tabledef') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_tabledef();
	}

	function cleanup() {
		tabledef_cleanup($this->_cPtr);
	}

	function fileName() {
		return tabledef_fileName($this->_cPtr);
	}

	function tableName() {
		return tabledef_tableName($this->_cPtr);
	}

	function setFileName($s) {
		tabledef_setFileName($this->_cPtr,$s);
	}

	function setTableName($s) {
		tabledef_setTableName($this->_cPtr,$s);
	}

	function toChar($buf,$s,$size) {
		return tabledef_toChar($this->_cPtr,$buf,$s,$size);
	}

	function fileNameA() {
		return tabledef_fileNameA($this->_cPtr);
	}

	function tableNameA() {
		return tabledef_tableNameA($this->_cPtr);
	}

	function setFileNameA($s) {
		tabledef_setFileNameA($this->_cPtr,$s);
	}

	function setTableNameA($s) {
		tabledef_setTableNameA($this->_cPtr,$s);
	}

	function fieldDef($index) {
		$r=tabledef_fieldDef($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddef($r);
		}
		return $r;
	}

	function keyDef($index) {
		$r=tabledef_keyDef($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new keydef($r);
		}
		return $r;
	}
}

class btrVersion {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrVersion_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrVersion_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'btrVersion_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function moduleVersionShortString($buf) {
		return btrVersion_moduleVersionShortString($this->_cPtr,$buf);
	}

	function moduleTypeString() {
		return btrVersion_moduleTypeString($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrVersion') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrVersion();
	}
}

class btrVersions {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'versions') return btrVersions_versions_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrVersions_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'versions') return new btrVersion(btrVersions_versions_get($this->_cPtr));
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function version($index) {
		$r=btrVersions_version($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new btrVersion($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrVersions') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrVersions();
	}
}

abstract class nstable {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	const changeCurrentCc = 0;

	const changeCurrentNcc = nstable_changeCurrentNcc;

	const changeInKey = nstable_changeInKey;

	const findForword = 0;

	const findBackForword = nstable_findBackForword;

	const inkey = nstable_inkey;

	function addref() {
		nstable_addref($this->_cPtr);
	}

	function refCount() {
		return nstable_refCount($this->_cPtr);
	}

	function tableid() {
		return nstable_tableid($this->_cPtr);
	}

	function setTableid($v) {
		nstable_setTableid($this->_cPtr,$v);
	}

	function isOpen() {
		return nstable_isOpen($this->_cPtr);
	}

	function isUseTransactd() {
		return nstable_isUseTransactd($this->_cPtr);
	}

	function setAccessRights($curd) {
		nstable_setAccessRights($this->_cPtr,$curd);
	}

	function data() {
		return nstable_data($this->_cPtr);
	}

	function setData($v) {
		nstable_setData($this->_cPtr,$v);
	}

	function buflen() {
		return nstable_buflen($this->_cPtr);
	}

	function setBuflen($v) {
		nstable_setBuflen($this->_cPtr,$v);
	}

	function datalen() {
		return nstable_datalen($this->_cPtr);
	}

	function stat() {
		return nstable_stat($this->_cPtr);
	}

	function setStat($v) {
		nstable_setStat($this->_cPtr,$v);
	}

	function keyNum() {
		return nstable_keyNum($this->_cPtr);
	}

	function setKeyNum($v) {
		nstable_setKeyNum($this->_cPtr,$v);
	}

	function canRead() {
		return nstable_canRead($this->_cPtr);
	}

	function canWrite() {
		return nstable_canWrite($this->_cPtr);
	}

	function canInsert() {
		return nstable_canInsert($this->_cPtr);
	}

	function canDelete() {
		return nstable_canDelete($this->_cPtr);
	}

	function getWriteImageLen() {
		return nstable_getWriteImageLen($this->_cPtr);
	}

	function close() {
		nstable_close($this->_cPtr);
	}

	function update($type=null) {
		switch (func_num_args()) {
		case 0: nstable_update($this->_cPtr); break;
		default: nstable_update($this->_cPtr,$type);
		}
	}

	function del($inkey=false) {
		nstable_del($this->_cPtr,$inkey);
	}

	function insert($ncc=false) {
		return nstable_insert($this->_cPtr,$ncc);
	}

	function createIndex($specifyKeyNum=false) {
		nstable_createIndex($this->_cPtr,$specifyKeyNum);
	}

	function dropIndex($norenumber=false) {
		nstable_dropIndex($this->_cPtr,$norenumber);
	}

	function recordCount($estimate=true,$fromCurrent=false,$direction=null) {
		switch (func_num_args()) {
		case 0: case 1: case 2: $r=nstable_recordCount($this->_cPtr,$estimate,$fromCurrent); break;
		default: $r=nstable_recordCount($this->_cPtr,$estimate,$fromCurrent,$direction);
		}
		return $r;
	}

	function tdapLastErr($hWnd,$retbuf) {
		$r=nstable_tdapLastErr($this->_cPtr,$hWnd,$retbuf);
		return $r;
	}

	function beginBulkInsert($maxBuflen) {
		nstable_beginBulkInsert($this->_cPtr,$maxBuflen);
	}

	function abortBulkInsert() {
		nstable_abortBulkInsert($this->_cPtr);
	}

	function commitBulkInsert($autoCommit=false) {
		return nstable_commitBulkInsert($this->_cPtr,$autoCommit);
	}

	function tdap($op) {
		nstable_tdap($this->_cPtr,$op);
	}

	function seekFirst($lockBias=0) {
		nstable_seekFirst($this->_cPtr,$lockBias);
	}

	function seekLast($lockBias=0) {
		nstable_seekLast($this->_cPtr,$lockBias);
	}

	function seekPrev($lockBias=0) {
		nstable_seekPrev($this->_cPtr,$lockBias);
	}

	function seekNext($lockBias=0) {
		nstable_seekNext($this->_cPtr,$lockBias);
	}

	function seek($lockBias=0) {
		nstable_seek($this->_cPtr,$lockBias);
	}

	function seekGreater($orEqual,$lockBias=0) {
		nstable_seekGreater($this->_cPtr,$orEqual,$lockBias);
	}

	function seekLessThan($orEqual,$lockBias=0) {
		nstable_seekLessThan($this->_cPtr,$orEqual,$lockBias);
	}

	function stepFirst($lockBias=0) {
		nstable_stepFirst($this->_cPtr,$lockBias);
	}

	function stepLast($lockBias=0) {
		nstable_stepLast($this->_cPtr,$lockBias);
	}

	function stepPrev($lockBias=0) {
		nstable_stepPrev($this->_cPtr,$lockBias);
	}

	function stepNext($lockBias=0) {
		nstable_stepNext($this->_cPtr,$lockBias);
	}

	function bookmark() {
		return nstable_bookmark($this->_cPtr);
	}

	function seekByBookmark($bm=null,$lockBias=0) {
		switch (func_num_args()) {
		case 0: nstable_seekByBookmark($this->_cPtr); break;
		default: nstable_seekByBookmark($this->_cPtr,$bm,$lockBias);
		}
	}

	function getPercentage($bm=null) {
		switch (func_num_args()) {
		case 0: $r=nstable_getPercentage($this->_cPtr); break;
		default: $r=nstable_getPercentage($this->_cPtr,$bm);
		}
		return $r;
	}

	function seekByPercentage($pc=null) {
		switch (func_num_args()) {
		case 0: nstable_seekByPercentage($this->_cPtr); break;
		default: nstable_seekByPercentage($this->_cPtr,$pc);
		}
	}

	function setOwnerName($name,$enctype=0) {
		nstable_setOwnerName($this->_cPtr,$name,$enctype);
	}

	function clearOwnerName() {
		nstable_clearOwnerName($this->_cPtr);
	}

	function recordLength() {
		return nstable_recordLength($this->_cPtr);
	}

	function stats($databuffer,$buflen,$estimate=true) {
		nstable_stats($this->_cPtr,$databuffer,$buflen,$estimate);
	}

	function unlock($bm=0) {
		nstable_unlock($this->_cPtr,$bm);
	}

	static function getFileName($uri,$filename) {
		return nstable_getFileName($uri,$filename);
	}

	static function tdapErr($self_or_hWnd,$hWnd_or_status,$tableName=null,$retbuf=null) {
		switch (func_num_args()) {
		case 2: $r=nstable_tdapErr($self_or_hWnd,$hWnd_or_status); break;
		case 3: $r=nstable_tdapErr($self_or_hWnd,$hWnd_or_status,$tableName); break;
		default: $r=nstable_tdapErr($self_or_hWnd,$hWnd_or_status,$tableName,$retbuf);
		}
		return $r;
	}

	static function throwError($caption,$statusCode_or_tb) {
		nstable_throwError($caption,$statusCode_or_tb);
	}

	static function getDirURI($uri,$retbuf) {
		return nstable_getDirURI($uri,$retbuf);
	}

	static function existsFile($filename) {
		return nstable_existsFile($filename);
	}

	static function test($p) {
		return nstable_test($p);
	}
}

class dbdef {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function addref() {
		dbdef_addref($this->_cPtr);
	}

	function refCount() {
		return dbdef_refCount($this->_cPtr);
	}

	function tableCount() {
		return dbdef_tableCount($this->_cPtr);
	}

	function relateData() {
		return dbdef_relateData($this->_cPtr);
	}

	function openMode() {
		return dbdef_openMode($this->_cPtr);
	}

	function tableDefs($index) {
		$r=dbdef_tableDefs($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new tabledef($r);
		}
		return $r;
	}

	function tableDefPtr($index) {
		return dbdef_tableDefPtr($this->_cPtr,$index);
	}

	function setVersion($v) {
		dbdef_setVersion($this->_cPtr,$v);
	}

	function version() {
		return dbdef_version($this->_cPtr);
	}

	function stat() {
		return dbdef_stat($this->_cPtr);
	}

	function updateTableDef($tableIndex,$forPsqlDdf=true) {
		dbdef_updateTableDef($this->_cPtr,$tableIndex,$forPsqlDdf);
	}

	function insertField($tableIndex,$insertIndex) {
		$r=dbdef_insertField($this->_cPtr,$tableIndex,$insertIndex);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddef($r);
		}
		return $r;
	}

	function deleteField($tableIndex,$deleteIndex) {
		dbdef_deleteField($this->_cPtr,$tableIndex,$deleteIndex);
	}

	function insertKey($tableIndex,$insertIndex) {
		$r=dbdef_insertKey($this->_cPtr,$tableIndex,$insertIndex);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new keydef($r);
		}
		return $r;
	}

	function deleteKey($tableIndex,$deleteIndex) {
		dbdef_deleteKey($this->_cPtr,$tableIndex,$deleteIndex);
	}

	function insertTable($tableDef) {
		dbdef_insertTable($this->_cPtr,$tableDef);
	}

	function deleteTable($tableIndex) {
		dbdef_deleteTable($this->_cPtr,$tableIndex);
	}

	function renumberTable($oldIndex,$newIndex) {
		dbdef_renumberTable($this->_cPtr,$oldIndex,$newIndex);
	}

	function tableNumByName($tableName) {
		return dbdef_tableNumByName($this->_cPtr,$tableName);
	}

	function getRecordLen($tableIndex) {
		return dbdef_getRecordLen($this->_cPtr,$tableIndex);
	}

	function getFileSpec($fs,$tableIndex) {
		dbdef_getFileSpec($this->_cPtr,$fs,$tableIndex);
	}

	function findKeynumByFieldNum($tableIndex,$index) {
		return dbdef_findKeynumByFieldNum($this->_cPtr,$tableIndex,$index);
	}

	function fieldNumByName($tableIndex,$name) {
		return dbdef_fieldNumByName($this->_cPtr,$tableIndex,$name);
	}

	function allocRelateData($size) {
		return dbdef_allocRelateData($this->_cPtr,$size);
	}

	function fieldValidLength($query,$fieldType) {
		return dbdef_fieldValidLength($this->_cPtr,$query,$fieldType);
	}

	function pushBackup($tableIndex) {
		dbdef_pushBackup($this->_cPtr,$tableIndex);
	}

	function compAsBackup($tableIndex) {
		return dbdef_compAsBackup($this->_cPtr,$tableIndex);
	}

	function popBackup($tableIndex) {
		dbdef_popBackup($this->_cPtr,$tableIndex);
	}

	function tdapErr($hWnd,$retbuf=null) {
		switch (func_num_args()) {
		case 1: $r=dbdef_tdapErr($this->_cPtr,$hWnd); break;
		default: $r=dbdef_tdapErr($this->_cPtr,$hWnd,$retbuf);
		}
		return $r;
	}

	function reopen($mode=-2) {
		dbdef_reopen($this->_cPtr,$mode);
	}

	function setStat($v) {
		dbdef_setStat($this->_cPtr,$v);
	}

	static function getFieldPosition($tableDef,$fieldNum) {
		return dbdef_getFieldPosition($tableDef,$fieldNum);
	}

	static function cacheFieldPos($tableDef) {
		dbdef_cacheFieldPos($tableDef);
	}
}

abstract class multiRecordAlocator {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function init($recordCount,$recordLen,$addType,$tb) {
		multiRecordAlocator_init($this->_cPtr,$recordCount,$recordLen,$addType,$tb);
	}

	function ptr($row,$stat) {
		return multiRecordAlocator_ptr($this->_cPtr,$row,$stat);
	}

	function setJoinType($v) {
		multiRecordAlocator_setJoinType($this->_cPtr,$v);
	}

	function setInvalidRecord($row,$v) {
		multiRecordAlocator_setInvalidRecord($this->_cPtr,$row,$v);
	}

	function setJoinRowMap($v) {
		multiRecordAlocator_setJoinRowMap($this->_cPtr,$v);
	}

	function joinRowMap() {
		return multiRecordAlocator_joinRowMap($this->_cPtr);
	}
}

class table extends nstable {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		nstable::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return nstable::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return nstable::__get($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function tableDef() {
		$r=table_tableDef($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new tabledef($r);
		}
		return $r;
	}

	function tableDefPtr() {
		return table_tableDefPtr($this->_cPtr);
	}

	function valiableFormatType() {
		return table_valiableFormatType($this->_cPtr);
	}

	function blobFieldUsed() {
		return table_blobFieldUsed($this->_cPtr);
	}

	function logicalToString() {
		return table_logicalToString($this->_cPtr);
	}

	function setLogicalToString($v) {
		table_setLogicalToString($this->_cPtr,$v);
	}

	function trimPadChar() {
		return table_trimPadChar($this->_cPtr);
	}

	function setTrimPadChar($v) {
		table_setTrimPadChar($this->_cPtr,$v);
	}

	function usePadChar() {
		return table_usePadChar($this->_cPtr);
	}

	function setUsePadChar($v) {
		table_setUsePadChar($this->_cPtr,$v);
	}

	function optionalData() {
		return table_optionalData($this->_cPtr);
	}

	function setOptionalData($v) {
		table_setOptionalData($this->_cPtr,$v);
	}

	function myDateTimeValueByBtrv() {
		return table_myDateTimeValueByBtrv($this->_cPtr);
	}

	function bookMarksCount() {
		return table_bookMarksCount($this->_cPtr);
	}

	function moveBookmarksId($Id) {
		table_moveBookmarksId($this->_cPtr,$Id);
	}

	function clearBuffer() {
		table_clearBuffer($this->_cPtr);
	}

	function getRecordHash() {
		return table_getRecordHash($this->_cPtr);
	}

	function smartUpdate() {
		table_smartUpdate($this->_cPtr);
	}

	function setMra($p) {
		table_setMra($this->_cPtr,$p);
	}

	function mra() {
		$r=table_mra($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function find($type=null) {
		switch (func_num_args()) {
		case 0: table_find($this->_cPtr); break;
		default: table_find($this->_cPtr,$type);
		}
	}

	function findFirst() {
		table_findFirst($this->_cPtr);
	}

	function findLast() {
		table_findLast($this->_cPtr);
	}

	function findNext($notIncCurrent=true) {
		table_findNext($this->_cPtr,$notIncCurrent);
	}

	function findPrev($notIncCurrent=true) {
		table_findPrev($this->_cPtr,$notIncCurrent);
	}

	function bookmarkFindCurrent() {
		return table_bookmarkFindCurrent($this->_cPtr);
	}

	function setQuery($query) {
		table_setQuery($this->_cPtr,$query);
	}

	function setFilter($str,$rejectCount,$cacheCount,$autoEscape=true) {
		table_setFilter($this->_cPtr,$str,$rejectCount,$cacheCount,$autoEscape);
	}

	function fieldNumByName($name) {
		return table_fieldNumByName($this->_cPtr,$name);
	}

	function getFVbyt($index_or_fieldName) {
		return table_getFVbyt($this->_cPtr,$index_or_fieldName);
	}

	function getFVsht($index_or_fieldName) {
		return table_getFVsht($this->_cPtr,$index_or_fieldName);
	}

	function getFVint($index_or_fieldName) {
		return table_getFVint($this->_cPtr,$index_or_fieldName);
	}

	function getFVlng($index_or_fieldName) {
		return table_getFVlng($this->_cPtr,$index_or_fieldName);
	}

	function getFV64($index_or_fieldName) {
		return table_getFV64($this->_cPtr,$index_or_fieldName);
	}

	function getFVflt($index_or_fieldName) {
		return table_getFVflt($this->_cPtr,$index_or_fieldName);
	}

	function getFVdbl($index_or_fieldName) {
		return table_getFVdbl($this->_cPtr,$index_or_fieldName);
	}

	function getFVAstr($index_or_fieldName) {
		return table_getFVAstr($this->_cPtr,$index_or_fieldName);
	}

	function getFVbin($index_or_fieldName) {
		return table_getFVbin($this->_cPtr,$index_or_fieldName);
	}

	function setFVA($index_or_fieldName,$data) {
		table_setFVA($this->_cPtr,$index_or_fieldName,$data);
	}

	function getFVstr($index_or_fieldName) {
		return table_getFVstr($this->_cPtr,$index_or_fieldName);
	}

	function fieldPtr($index) {
		return table_fieldPtr($this->_cPtr,$index);
	}

	function getCurProcFieldCount() {
		return table_getCurProcFieldCount($this->_cPtr);
	}

	function getCurProcFieldIndex($index) {
		return table_getCurProcFieldIndex($this->_cPtr,$index);
	}

	function fields() {
		return table_fields($this->_cPtr);
	}

	function setFV($index_or_fieldName,$data,$size=null) {
		switch (func_num_args()) {
		case 2: table_setFV($this->_cPtr,$index_or_fieldName,$data); break;
		default: table_setFV($this->_cPtr,$index_or_fieldName,$data,$size);
		}
	}

	function keyValueDescription() {
		return table_keyValueDescription($this->_cPtr);
	}
}

class queryBase {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const none = 0;

	const joinKeyValuesUnique = 1;

	const joinWhereFields = 2;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__queryBase') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_queryBase();
	}

	function reset() {
		queryBase_reset($this->_cPtr);
	}

	function clearSeekKeyValues() {
		queryBase_clearSeekKeyValues($this->_cPtr);
	}

	function clearSelectFields() {
		queryBase_clearSelectFields($this->_cPtr);
	}

	function addSeekKeyValuePtr($value,$reset=false) {
		queryBase_addSeekKeyValuePtr($this->_cPtr,$value,$reset);
	}

	function reserveSeekKeyValueSize($v) {
		queryBase_reserveSeekKeyValueSize($this->_cPtr,$v);
	}

	function queryString($str,$autoEscape=false) {
		$r=queryBase_queryString($this->_cPtr,$str,$autoEscape);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__queryBase': return new queryBase($r);
		default: return new queryBase($r);
		}
	}

	function reject($v) {
		$r=queryBase_reject($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function limit($v) {
		$r=queryBase_limit($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function direction($v) {
		$r=queryBase_direction($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function all() {
		$r=queryBase_all($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function optimize($v) {
		$r=queryBase_optimize($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function bookmarkAlso($v) {
		$r=queryBase_bookmarkAlso($this->_cPtr,$v);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function toString() {
		return queryBase_toString($this->_cPtr);
	}

	function getDirection() {
		return queryBase_getDirection($this->_cPtr);
	}

	function getReject() {
		return queryBase_getReject($this->_cPtr);
	}

	function getLimit() {
		return queryBase_getLimit($this->_cPtr);
	}

	function isAll() {
		return queryBase_isAll($this->_cPtr);
	}

	function getOptimize() {
		return queryBase_getOptimize($this->_cPtr);
	}

	function isBookmarkAlso() {
		return queryBase_isBookmarkAlso($this->_cPtr);
	}

	function selectCount() {
		return queryBase_selectCount($this->_cPtr);
	}

	function getSelect($index) {
		return queryBase_getSelect($this->_cPtr,$index);
	}

	function whereTokens() {
		return queryBase_whereTokens($this->_cPtr);
	}

	function getWhereToken($index) {
		return queryBase_getWhereToken($this->_cPtr,$index);
	}

	function reverseAliasName($alias,$src) {
		queryBase_reverseAliasName($this->_cPtr,$alias,$src);
	}

	function release() {
		queryBase_release($this->_cPtr);
	}

	static function create() {
		$r=queryBase_create();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function select($value1,$value2=null,$value3=null,$value4=null,$value5=null,$value6=null,$value7=null,$value8=null,$value9=null,$value10=null) {
		switch (func_num_args()) {
		case 1: $r=queryBase_select($this->_cPtr,$value1); break;
		case 2: $r=queryBase_select($this->_cPtr,$value1,$value2); break;
		case 3: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3); break;
		case 4: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4); break;
		case 5: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5); break;
		case 6: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6); break;
		case 7: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7); break;
		case 8: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8); break;
		case 9: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8,$value9); break;
		default: $r=queryBase_select($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8,$value9,$value10);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__queryBase': return new queryBase($r);
		default: return new queryBase($r);
		}
	}

	function where($field,$op,$val) {
		$r=queryBase_where($this->_cPtr,$field,$op,$val);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function andWhere($field,$op,$val) {
		$r=queryBase_andWhere($this->_cPtr,$field,$op,$val);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function orWhere($field,$op,$val) {
		$r=queryBase_orWhere($this->_cPtr,$field,$op,$val);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new queryBase($r);
		}
		return $r;
	}

	function In($value1,$value2=null,$value3=null,$value4=null,$value5=null,$value6=null,$value7=null,$value8=null,$value9=null,$value10=null) {
		switch (func_num_args()) {
		case 1: $r=queryBase_In($this->_cPtr,$value1); break;
		case 2: $r=queryBase_In($this->_cPtr,$value1,$value2); break;
		case 3: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3); break;
		case 4: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4); break;
		case 5: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5); break;
		case 6: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6); break;
		case 7: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7); break;
		case 8: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8); break;
		case 9: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8,$value9); break;
		default: $r=queryBase_In($this->_cPtr,$value1,$value2,$value3,$value4,$value5,$value6,$value7,$value8,$value9,$value10);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__queryBase': return new queryBase($r);
		default: return new queryBase($r);
		}
	}

	function addInValue($value,$reset=false) {
		$r=queryBase_addInValue($this->_cPtr,$value,$reset);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__queryBase': return new queryBase($r);
		default: return new queryBase($r);
		}
	}
}

class nsdatabase {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__nsdatabase') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_nsdatabase();
	}

	function release() {
		nsdatabase_release($this->_cPtr);
	}

	function refCount() {
		return nsdatabase_refCount($this->_cPtr);
	}

	function enableTrn() {
		return nsdatabase_enableTrn($this->_cPtr);
	}

	function stat() {
		return nsdatabase_stat($this->_cPtr);
	}

	function clientID() {
		return nsdatabase_clientID($this->_cPtr);
	}

	function openTableCount() {
		return nsdatabase_openTableCount($this->_cPtr);
	}

	function uri() {
		return nsdatabase_uri($this->_cPtr);
	}

	function uriMode() {
		return nsdatabase_uriMode($this->_cPtr);
	}

	function lockWaitCount() {
		return nsdatabase_lockWaitCount($this->_cPtr);
	}

	function lockWaitTime() {
		return nsdatabase_lockWaitTime($this->_cPtr);
	}

	function localSharing() {
		return nsdatabase_localSharing($this->_cPtr);
	}

	function setLockWaitCount($v) {
		nsdatabase_setLockWaitCount($this->_cPtr,$v);
	}

	function setLockWaitTime($v) {
		nsdatabase_setLockWaitTime($this->_cPtr,$v);
	}

	function setLocalSharing($v) {
		nsdatabase_setLocalSharing($this->_cPtr,$v);
	}

	function dropTable($uri) {
		nsdatabase_dropTable($this->_cPtr,$uri);
	}

	function rename($oldUri,$newUri) {
		nsdatabase_rename($this->_cPtr,$oldUri,$newUri);
	}

	function swapTablename($uri1,$uri2) {
		nsdatabase_swapTablename($this->_cPtr,$uri1,$uri2);
	}

	function beginTrn($bias=null) {
		switch (func_num_args()) {
		case 0: nsdatabase_beginTrn($this->_cPtr); break;
		default: nsdatabase_beginTrn($this->_cPtr,$bias);
		}
	}

	function endTrn() {
		nsdatabase_endTrn($this->_cPtr);
	}

	function abortTrn() {
		nsdatabase_abortTrn($this->_cPtr);
	}

	function beginSnapshot() {
		nsdatabase_beginSnapshot($this->_cPtr);
	}

	function endSnapshot() {
		nsdatabase_endSnapshot($this->_cPtr);
	}

	function tdapErr($hWnd,$retbuf=null) {
		switch (func_num_args()) {
		case 1: $r=nsdatabase_tdapErr($this->_cPtr,$hWnd); break;
		default: $r=nsdatabase_tdapErr($this->_cPtr,$hWnd,$retbuf);
		}
		return $r;
	}

	function useLongFilename() {
		return nsdatabase_useLongFilename($this->_cPtr);
	}

	function setUseLongFilename($value) {
		nsdatabase_setUseLongFilename($this->_cPtr,$value);
	}

	function setUseTransactd() {
		return nsdatabase_setUseTransactd($this->_cPtr);
	}

	function isTransactdUri($uri) {
		return nsdatabase_isTransactdUri($this->_cPtr,$uri);
	}

	function isUseTransactd() {
		return nsdatabase_isUseTransactd($this->_cPtr);
	}

	function readDatabaseDirectory($retBuf,$len) {
		nsdatabase_readDatabaseDirectory($this->_cPtr,$retBuf,$len);
	}

	function connect($uri,$newConnection=false) {
		return nsdatabase_connect($this->_cPtr,$uri,$newConnection);
	}

	function disconnect($uri="") {
		return nsdatabase_disconnect($this->_cPtr,$uri);
	}

	const maxtables = nsdatabase_maxtables;

	static function trnsactionFlushWaitStatus() {
		return nsdatabase_trnsactionFlushWaitStatus();
	}

	static function setExecCodePage($codepage) {
		nsdatabase_setExecCodePage($codepage);
	}

	static function execCodePage() {
		return nsdatabase_execCodePage();
	}
}

class database extends nsdatabase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		nsdatabase::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return nsdatabase::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return nsdatabase::__get($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function dbDef() {
		$r=database_dbDef($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new dbdef($r);
		}
		return $r;
	}

	function rootDir() {
		return database_rootDir($this->_cPtr);
	}

	function setRootDir($directory) {
		database_setRootDir($this->_cPtr,$directory);
	}

	function optionalData() {
		return database_optionalData($this->_cPtr);
	}

	function setOptionalData($v) {
		database_setOptionalData($this->_cPtr,$v);
	}

	function tableReadOnly() {
		return database_tableReadOnly($this->_cPtr);
	}

	function setTableReadOnly($value) {
		database_setTableReadOnly($this->_cPtr,$value);
	}

	function open($uri,$schemaType=0,$mode=-2,$dir=null,$ownerName=null) {
		switch (func_num_args()) {
		case 1: case 2: case 3: $r=database_open($this->_cPtr,$uri,$schemaType,$mode); break;
		case 4: $r=database_open($this->_cPtr,$uri,$schemaType,$mode,$dir); break;
		default: $r=database_open($this->_cPtr,$uri,$schemaType,$mode,$dir,$ownerName);
		}
		return $r;
	}

	function openTable($fileNum_or_tableName,$mode=null,$autoCreate=null,$ownerName=null,$uri=null) {
		switch (func_num_args()) {
		case 1: $r=database_openTable($this->_cPtr,$fileNum_or_tableName); break;
		case 2: $r=database_openTable($this->_cPtr,$fileNum_or_tableName,$mode); break;
		case 3: $r=database_openTable($this->_cPtr,$fileNum_or_tableName,$mode,$autoCreate); break;
		case 4: $r=database_openTable($this->_cPtr,$fileNum_or_tableName,$mode,$autoCreate,$ownerName); break;
		default: $r=database_openTable($this->_cPtr,$fileNum_or_tableName,$mode,$autoCreate,$ownerName,$uri);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__table': return new table($r);
		default: return new table($r);
		}
	}

	function c_clone() {
		$r=database_c_clone($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new database($r);
		}
		return $r;
	}

	function create($uri,$type=null) {
		switch (func_num_args()) {
		case 1: database_create($this->_cPtr,$uri); break;
		default: database_create($this->_cPtr,$uri,$type);
		}
	}

	function drop() {
		database_drop($this->_cPtr);
	}

	function dropTable($tableName) {
		database_dropTable($this->_cPtr,$tableName);
	}

	function close() {
		database_close($this->_cPtr);
	}

	function continuous($op=null,$inclideRepfile=false) {
		switch (func_num_args()) {
		case 0: $r=database_continuous($this->_cPtr); break;
		default: $r=database_continuous($this->_cPtr,$op,$inclideRepfile);
		}
		return $r;
	}

	function assignSchemaData($src) {
		return database_assignSchemaData($this->_cPtr,$src);
	}

	function copyTableData($dest,$src,$turbo,$offset=0,$keyNum=-1,$maxSkip=-1) {
		return database_copyTableData($this->_cPtr,$dest,$src,$turbo,$offset,$keyNum,$maxSkip);
	}

	function convertTable($tableIndex,$turbo,$ownerName=null) {
		switch (func_num_args()) {
		case 2: database_convertTable($this->_cPtr,$tableIndex,$turbo); break;
		default: database_convertTable($this->_cPtr,$tableIndex,$turbo,$ownerName);
		}
	}

	function existsTableFile($tableIndex,$ownerName=null) {
		switch (func_num_args()) {
		case 1: $r=database_existsTableFile($this->_cPtr,$tableIndex); break;
		default: $r=database_existsTableFile($this->_cPtr,$tableIndex,$ownerName);
		}
		return $r;
	}

	function getTableUri($buf,$fileNum) {
		return database_getTableUri($this->_cPtr,$buf,$fileNum);
	}

	function getBtrVersion($versions) {
		database_getBtrVersion($this->_cPtr,$versions);
	}

	function isOpened() {
		return database_isOpened($this->_cPtr);
	}

	function defaultAutoIncSpace() {
		return database_defaultAutoIncSpace($this->_cPtr);
	}

	static function createObject() {
		$r=database_createObject();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new database($r);
		}
		return $r;
	}
}

class benchmark {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	static function report2($func,$name) {
		benchmark_report2($func,$name);
	}

	static function start() {
		benchmark_start();
	}

	static function showTimeSec($result,$name) {
		benchmark_showTimeSec($result,$name);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__rtl__benchmark') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_benchmark();
	}
}

class btrDate {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrDate_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrDate_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'btrDate_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrDate') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrDate();
	}
}

class btrTime {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrTime_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrTime_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'btrTime_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrTime') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrTime();
	}
}

class btrDateTime {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'btrDateTime_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrDateTime_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'time') return new btrTime(btrDateTime_time_get($this->_cPtr));
		if ($var === 'date') return new btrDate(btrDateTime_date_get($this->_cPtr));
		if ($var === 'i64') return btrDateTime_i64_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__btrDateTime') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_btrDateTime();
	}
}

class btrTimeStamp {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i64') return btrTimeStamp_i64_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('btrTimeStamp_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i64') return btrTimeStamp_i64_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($i_or_p_or_d,$t=null) {
		if (is_resource($i_or_p_or_d) && get_resource_type($i_or_p_or_d) === '_p_bzs__db__protocol__tdap__btrTimeStamp') {
			$this->_cPtr=$i_or_p_or_d;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_btrTimeStamp($i_or_p_or_d); break;
		default: $this->_cPtr=new_btrTimeStamp($i_or_p_or_d,$t);
		}
	}

	function toString() {
		return btrTimeStamp_toString($this->_cPtr);
	}

	function fromString($p) {
		btrTimeStamp_fromString($this->_cPtr,$p);
	}
}

class bdate {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($btrDate_or_date) {
		if (is_resource($btrDate_or_date) && get_resource_type($btrDate_or_date) === '_p_bzs__db__protocol__tdap__bdate') {
			$this->_cPtr=$btrDate_or_date;
			return;
		}
		$this->_cPtr=new_bdate($btrDate_or_date);
	}

	function year_str() {
		return bdate_year_str($this->_cPtr);
	}

	function month_str() {
		return bdate_month_str($this->_cPtr);
	}

	function date_str() {
		return bdate_date_str($this->_cPtr);
	}

	function year() {
		return bdate_year($this->_cPtr);
	}

	function date() {
		return bdate_date($this->_cPtr);
	}

	function month() {
		return bdate_month($this->_cPtr);
	}

	function btr_date() {
		$r=bdate_btr_date($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new btrDate($r);
		}
		return $r;
	}

	function c_str() {
		return bdate_c_str($this->_cPtr);
	}
}

class fielddefs {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function c_clone() {
		$r=fielddefs_c_clone($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddefs($r);
		}
		return $r;
	}

	function indexByName($name) {
		return fielddefs_indexByName($this->_cPtr,$name);
	}

	function getFielddef($index) {
		$r=fielddefs_getFielddef($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddef($r);
		}
		return $r;
	}

	function checkIndex($index) {
		return fielddefs_checkIndex($this->_cPtr,$index);
	}

	function size() {
		return fielddefs_size($this->_cPtr);
	}

	static function create() {
		$r=fielddefs_create();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddefs($r);
		}
		return $r;
	}

	static function destroy($p) {
		fielddefs_destroy($p);
	}
}

class field {
	public function getFV() {
		switch ($this->type()) {
			case transactd::ft_integer:
			case transactd::ft_uinteger:
			case transactd::ft_autoinc:
			case transactd::ft_autoIncUnsigned:
			case transactd::ft_logical:
			case transactd::ft_bit:
				return $this->i64();
			case transactd::ft_float:
			case transactd::ft_decimal:
			case transactd::ft_money:
			case transactd::ft_numeric:
			case transactd::ft_bfloat:
			case transactd::ft_numericsts:
			case transactd::ft_numericsa:
			case transactd::ft_currency:
				return $this->d();
			case transactd::ft_mychar:
			case transactd::ft_myvarchar:
			case transactd::ft_mywchar:
			case transactd::ft_mywvarchar:
			case transactd::ft_mytext:
			case transactd::ft_mydate:
			case transactd::ft_mytime:
			case transactd::ft_mydatetime:
			case transactd::ft_mytimestamp:
			case transactd::ft_date:
			case transactd::ft_time:
			case transactd::ft_datetime:
			case transactd::ft_timestamp:
				return $this->c_str();
			case transactd::ft_string:
			case transactd::ft_myvarbinary:
			case transactd::ft_mywvarbinary:
			case transactd::ft_myblob:
				return $this->getBin();
		}
		return null;
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__field') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_field();
	}

	function ptr() {
		return field_ptr($this->_cPtr);
	}

	function type() {
		return field_type($this->_cPtr);
	}

	function len() {
		return field_len($this->_cPtr);
	}

	function c_str() {
		return field_c_str($this->_cPtr);
	}

	function a_str() {
		return field_a_str($this->_cPtr);
	}

	function i() {
		return field_i($this->_cPtr);
	}

	function i8() {
		return field_i8($this->_cPtr);
	}

	function i16() {
		return field_i16($this->_cPtr);
	}

	function i64() {
		return field_i64($this->_cPtr);
	}

	function f() {
		return field_f($this->_cPtr);
	}

	function d() {
		return field_d($this->_cPtr);
	}

	function setBin($data,$size) {
		field_setBin($this->_cPtr,$data,$size);
	}

	function getBin() {
		return field_getBin($this->_cPtr);
	}

	function comp($r_,$logType=16) {
		return field_comp($this->_cPtr,$r_,$logType);
	}

	function isCompPartAndMakeValue() {
		return field_isCompPartAndMakeValue($this->_cPtr);
	}
}
class RecordIterator implements \Iterator {
	private $_record_cPtr = null;
	private $_position = 0;
	private $_count = -1;
	private $_field = null;
	private $_fielddefs = null;

	function __construct($record_cPtr, $fielddefs) {
		$this->_record_cPtr = $record_cPtr;
		$this->_position = 0;
		$this->_count = Record_size($record_cPtr);
		$this->_fielddefs = $fielddefs;
		$this->_field = new field();
	}

	public function rewind() {
		$this->_position = 0;
	}

	public function valid() {
		return $this->_position < $this->_count;
	}

	public function current() {
		Record_getFieldByIndexRef($this->_record_cPtr, $this->_position, $this->_field);
		return $this->_field->getFV();
	}

	public function key() {
		return $this->_fielddefs->getFielddef($this->_position)->nameA();
	}

	public function next() {
		$this->_position++;
	}
}

class Record implements \ArrayAccess, \Countable, \IteratorAggregate {
	private $_field = null;
	private $_fielddefs = null;

	function __clone() {
		$this->_field = new field();
	}

	// IteratorAggregate
	public function getIterator() {
		return new RecordIterator($this->_cPtr, $this->_fielddefs);
	}

	// ArrayAccess
	public function offsetExists($offset) {
		switch (\gettype($offset)) {
			case "integer":
				return $offset >= 0 && $offset < $this->count();
			case "string":
				return Record_indexByName($this->_cPtr, $offset) >= 0;
			default:
				return false;
		}
	}

	public function offsetGet($offset) {
		switch (\gettype($offset)) {
			case "integer":
				Record_getFieldByIndexRef($this->_cPtr, $offset, $this->_field);
				break;
			case "string":
				Record_getFieldByNameRef($this->_cPtr, $offset, $this->_field);
				break;
			default:
				throw new \OutOfRangeException();
		}
		return $this->_field->getFV();
	}

	public function offsetSet($offset, $value) {
		throw new \BadMethodCallException();
	}

	public function offsetUnset($offset) {
		throw new \BadMethodCallException();
	}

	// Countable
	public function count() {
		return Record_size($this->_cPtr);
	}

	// generator
	function keys() {
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			yield $this->_fielddefs->getFielddef($i)->nameA();
		}
	}

	function values() {
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			yield $this->_field->getFV();
		}
	}

	// toArray
	function keysArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			$ret[] = $this->_fielddefs->getFielddef($i)->nameA();
		}
		return $ret;
	}

	function valuesArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			$ret[] = $this->_field->getFV();
		}
		return $ret;
	}

	function toArray() {
		$ret = array();
		$count = Record_size($this->_cPtr);
		for ($i = 0; $i < $count; $i++) {
			Record_getFieldByIndexRef($this->_cPtr, $i, $this->_field);
			$ret[$this->_fielddefs->getFielddef($i)->nameA()] = $this->_field->getFV();
		}
		return $ret;
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
		$this->_fielddefs = $this->fieldDefs();
		$this->_field = new field();
	}

	function setInvalidRecord($v) {
		Record_setInvalidRecord($this->_cPtr,$v);
	}

	function isInvalidRecord() {
		return Record_isInvalidRecord($this->_cPtr);
	}

	function getFieldNoCheck($index) {
		$r=Record_getFieldNoCheck($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new field($r);
		}
		return $r;
	}

	function getFieldByIndex($index) {
		$r=Record_getFieldByIndex($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new field($r);
		}
		return $r;
	}

	function getFieldByName($name) {
		$r=Record_getFieldByName($this->_cPtr,$name);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new field($r);
		}
		return $r;
	}

	function size() {
		return Record_size($this->_cPtr);
	}

	function indexByName($name) {
		return Record_indexByName($this->_cPtr,$name);
	}

	function fieldDefs() {
		$r=Record_fieldDefs($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddefs($r);
		}
		return $r;
	}

	function clear() {
		Record_clear($this->_cPtr);
	}

	function setRecordData($ptr,$size,$endFieldIndex,$owner=false) {
		Record_setRecordData($this->_cPtr,$ptr,$size,$endFieldIndex,$owner);
	}

	function getFieldByIndexRef($index,$return_field) {
		Record_getFieldByIndexRef($this->_cPtr,$index,$return_field);
	}

	function getFieldByNameRef($name,$return_field) {
		Record_getFieldByNameRef($this->_cPtr,$name,$return_field);
	}
}

class memoryRecord extends Record {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		Record::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Record::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return Record::__get($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function createRecord($fdinfo) {
		$r=memoryRecord_createRecord($fdinfo);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new memoryRecord($r);
		}
		return $r;
	}

	static function release($p) {
		memoryRecord_release($p);
	}
}

class writableRecord extends memoryRecord {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		memoryRecord::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return memoryRecord::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return memoryRecord::__get($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function read($KeysetAlrady=false) {
		return writableRecord_read($this->_cPtr,$KeysetAlrady);
	}

	function insert() {
		writableRecord_insert($this->_cPtr);
	}

	function del($KeysetAlrady=false) {
		writableRecord_del($this->_cPtr,$KeysetAlrady);
	}

	function update() {
		writableRecord_update($this->_cPtr);
	}

	function save() {
		writableRecord_save($this->_cPtr);
	}

	static function create($tb,$alias) {
		$r=writableRecord_create($tb,$alias);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new writableRecord($r);
		}
		return $r;
	}
}

class RecordSetIterator implements \SeekableIterator {
	private $_recordset_cPtr = null;
	private $_position = 0;
	private $_fieldsBase_p_p = null;
	private $_record = null;
	private $_count = -1;

	function __construct($recordset_cPtr, $fielddefs) {
		$this->_recordset_cPtr = $recordset_cPtr;
		$this->_position = 0;
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_count = RecordSet_count($recordset_cPtr);
		$this->_record = new Record(memoryRecord::createRecord($fielddefs));
	}

	function __destruct() {
		delete_fieldsBase_p_p($this->_fieldsBase_p_p);
	}

	public function rewind() {
		$this->_position = 0;
	}

	public function valid() {
		return $this->_position < $this->_count;
	}

	public function current() {
		RecordSet_getRow($this->_recordset_cPtr, $this->_position, $this->_fieldsBase_p_p);
		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
		return $this->_record;
	}

	public function key() {
		return $this->_position;
	}

	public function next() {
		$this->_position++;
	}

	public function seek($position) {
		if ($position < 0 || $position >= $this->_count) {
			throw new \OutOfBoundsException("invalid seek position ($position)");
		}
		$this->_position = $position;
	}
}

class RecordSet implements \ArrayAccess, \Countable, \IteratorAggregate {
	private $_fieldsBase_p_p = null;
	private $_record = null;

	function __clone() {
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
	}

	function __destruct() {
		transactd::delete_fieldsBase_p_p($this->_fieldsBase_p_p);
	}

	// IteratorAggregate
	public function getIterator() {
		return new RecordSetIterator($this->_cPtr, $this->fieldDefs());
	}

	// ArrayAccess
	public function offsetExists($offset) {
		return \gettype($offset) !== 'integer' && $offset >= 0 && $offset < $this->count();
	}

	public function offsetGet($offset) {
		RecordSet_getRow($this->_cPtr, $offset, $this->_fieldsBase_p_p);
		$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
		return $this->_record;
	}

	public function offsetSet($offset, $value) {
		throw new \BadMethodCallException();
	}

	public function offsetUnset($offset) {
		throw new \BadMethodCallException();
	}

	// random access
	function first() {
		if ($this->count() <= 0) {
			throw new \OutOfBoundsException('no records in recordset');
		}
		return $this->offsetGet(0);
	}

	function last() {
		if ($this->count() <= 0) {
			throw new \OutOfBoundsException('no records in recordset');
		}
		return $this->offsetGet($this->count() - 1);
	}

	// generator
	function range($start = null, $end = null) {
		$count = $this->count();
		if (\gettype($start) !== 'integer' || $start < 0) {
			$i = 0;
		} else {
			$i = $start;
		}
		if (\gettype($end) !== 'integer' || $end < 0 || $end >= $count) {
			$end = $count - 1;
		}
		while ($i <= $end) {
			RecordSet_getRow($this->_cPtr, $i, $this->_fieldsBase_p_p);
			$this->_record->_cPtr = fieldsBase_p_p_value($this->_fieldsBase_p_p);
			yield $this->_record;
			$i++;
		}
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordset') {
			$this->_cPtr=$res;
			$this->_fieldsBase_p_p = new_fieldsBase_p_p();
			$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
			return;
		}
		$this->_cPtr=new_RecordSet();
		$this->_fieldsBase_p_p = new_fieldsBase_p_p();
		$this->_record = new Record(memoryRecord::createRecord($this->fieldDefs()));
	}

	function c_clone() {
		$r=RecordSet_c_clone($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecordSet($r);
		}
		return $r;
	}

	function uniqueReadMaxField() {
		return RecordSet_uniqueReadMaxField($this->_cPtr);
	}

	function clearRecords() {
		RecordSet_clearRecords($this->_cPtr);
	}

	function fieldDefs() {
		$r=RecordSet_fieldDefs($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new fielddefs($r);
		}
		return $r;
	}

	function clear() {
		RecordSet_clear($this->_cPtr);
	}

	function top($c_,$n) {
		$r=RecordSet_top($this->_cPtr,$c_,$n);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecordSet($r);
		}
		return $r;
	}

	function begin() {
		return RecordSet_begin($this->_cPtr);
	}

	function end() {
		return RecordSet_end($this->_cPtr);
	}

	function erase($index_or_it) {
		return RecordSet_erase($this->_cPtr,$index_or_it);
	}

	function push_back($r_) {
		RecordSet_push_back($this->_cPtr,$r_);
	}

	function size() {
		return RecordSet_size($this->_cPtr);
	}

	function count() {
		return RecordSet_count($this->_cPtr);
	}

	function readBefore($tb,$alias) {
		RecordSet_readBefore($this->_cPtr,$tb,$alias);
	}

	function resolvKeyValue($name,$noexception=false) {
		return RecordSet_resolvKeyValue($this->_cPtr,$name,$noexception);
	}

	function removeField($index) {
		RecordSet_removeField($this->_cPtr,$index);
	}

	function matchBy($rq) {
		$r=RecordSet_matchBy($this->_cPtr,$rq);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecordSet($r);
		}
		return $r;
	}

	function groupBy($gq) {
		$r=RecordSet_groupBy($this->_cPtr,$gq);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecordSet($r);
		}
		return $r;
	}

	function orderBy($name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null) {
		switch (func_num_args()) {
		case 1: $r=RecordSet_orderBy($this->_cPtr,$name1); break;
		case 2: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2); break;
		case 3: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3); break;
		case 4: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3,$name4); break;
		case 5: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3,$name4,$name5); break;
		case 6: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3,$name4,$name5,$name6); break;
		case 7: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
		default: $r=RecordSet_orderBy($this->_cPtr,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8);
		}
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_bzs__db__protocol__tdap__client__recordset': return new RecordSet($r);
		default: return new RecordSet($r);
		}
	}

	function reverse() {
		$r=RecordSet_reverse($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RecordSet($r);
		}
		return $r;
	}

	function appendCol($name,$type,$len) {
		RecordSet_appendCol($this->_cPtr,$name,$type,$len);
	}

	function getRow($index,$return_record) {
		RecordSet_getRow($this->_cPtr,$index,$return_record);
	}
}

class map_orm {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($fdi) {
		if (is_resource($fdi) && get_resource_type($fdi) === '_p_bzs__db__protocol__tdap__client__map_orm') {
			$this->_cPtr=$fdi;
			return;
		}
		$this->_cPtr=new_map_orm($fdi);
	}

	function compKeyValue($l,$r_,$keyNum) {
		return map_orm_compKeyValue($this->_cPtr,$l,$r_,$keyNum);
	}
}

class recordsetQuery {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function reset() {
		$r=recordsetQuery_reset($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new recordsetQuery($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__recordsetQuery') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_recordsetQuery();
	}
}

class groupFuncBase {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($targetName,$resultName=null,$query=null) {
		if (is_resource($targetName) && get_resource_type($targetName) === '_p_bzs__db__protocol__tdap__client__groupFuncBase') {
			$this->_cPtr=$targetName;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_groupFuncBase($targetName); break;
		default: $this->_cPtr=new_groupFuncBase($targetName,$resultName,$query);
		}
	}

	function setQuery($query) {
		$r=groupFuncBase_setQuery($this->_cPtr,$query);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new groupFuncBase($r);
		}
		return $r;
	}

	function targetName() {
		return groupFuncBase_targetName($this->_cPtr);
	}

	function resultName() {
		return groupFuncBase_resultName($this->_cPtr);
	}

	function resultKey() {
		return groupFuncBase_resultKey($this->_cPtr);
	}

	function reset() {
		groupFuncBase_reset($this->_cPtr);
	}

	function result($groupIndex) {
		return groupFuncBase_result($this->_cPtr,$groupIndex);
	}
}

class groupQuery {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function reset() {
		return groupQuery_reset($this->_cPtr);
	}

	function addFunction($func) {
		$r=groupQuery_addFunction($this->_cPtr,$func);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new groupQuery($r);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_bzs__db__protocol__tdap__client__groupQuery') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_groupQuery();
	}
}

class sum extends groupFuncBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __construct($targetName,$resultName=null,$query=null) {
		if (is_resource($targetName) && get_resource_type($targetName) === '_p_bzs__db__protocol__tdap__client__sum') {
			$this->_cPtr=$targetName;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_sum($targetName); break;
		default: $this->_cPtr=new_sum($targetName,$resultName,$query);
		}
	}
}

class count extends groupFuncBase {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		groupFuncBase::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return groupFuncBase::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return groupFuncBase::__get($var);
	}

	function __construct($resultName,$query=null) {
		if (is_resource($resultName) && get_resource_type($resultName) === '_p_bzs__db__protocol__tdap__client__count') {
			$this->_cPtr=$resultName;
			return;
		}
		$this->_cPtr=new_count($resultName,$query);
	}
}

class avg extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __construct($targetName,$resultName=null,$query=null) {
		if (is_resource($targetName) && get_resource_type($targetName) === '_p_bzs__db__protocol__tdap__client__avg') {
			$this->_cPtr=$targetName;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_avg($targetName); break;
		default: $this->_cPtr=new_avg($targetName,$resultName,$query);
		}
	}
}

class min extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __construct($targetName,$resultName=null,$query=null) {
		if (is_resource($targetName) && get_resource_type($targetName) === '_p_bzs__db__protocol__tdap__client__min') {
			$this->_cPtr=$targetName;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_min($targetName); break;
		default: $this->_cPtr=new_min($targetName,$resultName,$query);
		}
	}
}

class max extends sum {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		sum::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return sum::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return sum::__get($var);
	}

	function __construct($targetName,$resultName=null,$query=null) {
		if (is_resource($targetName) && get_resource_type($targetName) === '_p_bzs__db__protocol__tdap__client__max') {
			$this->_cPtr=$targetName;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_max($targetName); break;
		default: $this->_cPtr=new_max($targetName,$resultName,$query);
		}
	}
}

class ActiveTable {
	function keyValue($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
		$args = \func_get_args();
		$params = array();
		$end_args = false;
		for ($i = 0; $i < \func_num_args(); $i++) {
			switch (\gettype($args[$i])) {
				case 'string':
					$params[] = $args[$i]; break;
				case 'NULL':
					$end_args = true; break;
				default:
					$params[] = (string) $args[$i]; break;
			}
			if ($end_args) {
				break;
			}
		}
		return call_user_func_array(array($this, '_keyValue'), $params);
	}

	function read($queryBase) {
		$rs = new RecordSet();
		$this->read_rs($rs, $queryBase);
		return $rs;
	}

	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'm_record') return ActiveTable_m_record_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_transactd_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('ActiveTable_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'm_record') return ActiveTable_m_record_get($this->_cPtr);
		if ($var === 'thisown') return swig_transactd_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($db,$tableName) {
		if (is_resource($db) && get_resource_type($db) === '_p_bzs__db__protocol__tdap__client__activeTableT_bzs__db__protocol__tdap__client__map_orm_bzs__db__protocol__tdap__client__map_orm__mdl_typename_bzs__db__protocol__tdap__client__map_orm__fdi_typename_t') {
			$this->_cPtr=$db;
			return;
		}
		$this->_cPtr=new_ActiveTable($db,$tableName);
	}

	function beginBulkInsert($maxBuflen) {
		ActiveTable_beginBulkInsert($this->_cPtr,$maxBuflen);
	}

	function abortBulkInsert() {
		ActiveTable_abortBulkInsert($this->_cPtr);
	}

	function commitBulkInsert() {
		return ActiveTable_commitBulkInsert($this->_cPtr);
	}

	function index($v) {
		ActiveTable_index($this->_cPtr,$v);
		return $this;
	}

	function table() {
		return ActiveTable_table($this->_cPtr);
	}

	function option($v) {
		return ActiveTable_option($this->_cPtr,$v);
	}

	function del() {
		ActiveTable_del($this->_cPtr);
	}

	function alias($src,$dst) {
		return ActiveTable_alias($this->_cPtr,$src,$dst);
	}

	function resetAlias() {
		return ActiveTable_resetAlias($this->_cPtr);
	}

	function getWritableRecord() {
		$r=ActiveTable_getWritableRecord($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new writableRecord($r);
		}
		return $r;
	}

	function keyValue1($kv0) {
		return ActiveTable_keyValue1($this->_cPtr,$kv0);
	}

	function keyValue2($kv0,$kv1) {
		return ActiveTable_keyValue2($this->_cPtr,$kv0,$kv1);
	}

	function keyValue3($kv0,$kv1,$kv2) {
		return ActiveTable_keyValue3($this->_cPtr,$kv0,$kv1,$kv2);
	}

	function keyValue4($kv0,$kv1,$kv2,$kv3) {
		return ActiveTable_keyValue4($this->_cPtr,$kv0,$kv1,$kv2,$kv3);
	}

	function keyValue5($kv0,$kv1,$kv2,$kv3,$kv4) {
		return ActiveTable_keyValue5($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4);
	}

	function keyValue6($kv0,$kv1,$kv2,$kv3,$kv4,$kv5) {
		return ActiveTable_keyValue6($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5);
	}

	function keyValue7($kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6) {
		return ActiveTable_keyValue7($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6);
	}

	function keyValue8($kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7) {
		return ActiveTable_keyValue8($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
	}

	function read_rs($mdls,$q,$func=null) {
		switch (func_num_args()) {
		case 2: $r=ActiveTable_read_rs($this->_cPtr,$mdls,$q); break;
		default: $r=ActiveTable_read_rs($this->_cPtr,$mdls,$q,$func);
		}
		return $r;
	}

	function join($mdls,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null,$name11=null) {
		switch (func_num_args()) {
		case 3: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1); break;
		case 4: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2); break;
		case 5: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3); break;
		case 6: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4); break;
		case 7: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5); break;
		case 8: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6); break;
		case 9: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
		case 10: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8); break;
		case 11: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9); break;
		case 12: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10); break;
		default: $r=ActiveTable_join($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10,$name11);
		}
		return $r;
	}

	function outerJoin($mdls,$q,$name1,$name2=null,$name3=null,$name4=null,$name5=null,$name6=null,$name7=null,$name8=null,$name9=null,$name10=null,$name11=null) {
		switch (func_num_args()) {
		case 3: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1); break;
		case 4: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2); break;
		case 5: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3); break;
		case 6: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4); break;
		case 7: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5); break;
		case 8: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6); break;
		case 9: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7); break;
		case 10: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8); break;
		case 11: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9); break;
		case 12: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10); break;
		default: $r=ActiveTable_outerJoin($this->_cPtr,$mdls,$q,$name1,$name2,$name3,$name4,$name5,$name6,$name7,$name8,$name9,$name10,$name11);
		}
		return $r;
	}

	function _keyValue($kv0,$kv1=null,$kv2=null,$kv3=null,$kv4=null,$kv5=null,$kv6=null,$kv7=null) {
		switch (func_num_args()) {
		case 1: $r=ActiveTable__keyValue($this->_cPtr,$kv0); break;
		case 2: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1); break;
		case 3: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2); break;
		case 4: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3); break;
		case 5: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4); break;
		case 6: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5); break;
		case 7: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6); break;
		default: $r=ActiveTable__keyValue($this->_cPtr,$kv0,$kv1,$kv2,$kv3,$kv4,$kv5,$kv6,$kv7);
		}
		return $this;
	}
}


?>
